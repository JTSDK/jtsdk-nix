#! /usr/bin/env bash
#
# Name ..........: jtsdk-wsjtx-sb
# Execution .....: Called from JTSDK main script
# Copyright .....: @COPYRIGHT@
# License .......: @LICENSE@
# Contributors ..: @AUTHORS@
# Comment .......: Part of the JTSDK Linux Project
#
# @PROGRAM@ is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation either version 3 of the License, or
# (at your option) any later version. 
#
# @PROGRAM@ is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#-------------------------------------------------------------------------#

set -e

# passed from JTSDK main script
OPT1=$1		# dev = ^/branches, garc = ^/tags
OPT2=$2		# is the actual branch folder name, wsjtx, wsjtx-1.6, etc
OPT3="$3"
OPT4="0"	# Set to 1 for verbose builds

# system locations
MENU=@SHARE@

# home directory locations
HOMEDIR=~/jtsdk
BASED=$HOMEDIR/wsjtx/superbuild
SRCD="$HOMEDIR/src"
TMPD="$HOMEDIR/tmp"
LOGS="$HOMEDIR/logs"
CFG="$HOMEDIR/config"

# wsjtx-superbuild variables
APP_NAME=wsjtx-superbuild
APP_SRC="$SRCD/$APP_NAME"
URL="https://svn.code.sf.net/p/wsjt/wsjt/branches/wsjtx-superbuild"

# general options
JJ=@JJJJ@
SEPARATE=@SEPARATE@

# foreground colors
C_R='\033[01;31m'		# red
C_G='\033[01;32m'		# green
C_Y='\033[01;33m'		# yellow
C_C='\033[01;36m'		# cyan
C_NC='\033[01;37m'		# no color

# variables used in process
case $OPT1 in
	dev) # for ^/branches location
		BURL="https://svn.code.sf.net/p/wsjt/wsjt/branches"
		CHECK_URL="$BURL/$OPT2"
		TYPE=branches
	;;

	garc) # for ^/tags location
		TURL="https://svn.code.sf.net/p/wsjt/wsjt/tags"
		CHECK_URL="$TURL/$OPT2"
		TYPE=tags
	;;
esac

################################################################################
# FUNCTIONS
################################################################################

# display build message --------------------------------------------------------
build_message() {

clear ||:
echo "-------------------------------------------"
echo -e ${C_G} "WSJT-X SUPERBUILD"${C_NC}
echo "-------------------------------------------"
echo ''
echo 'This script will perform the following:'
echo ''
echo ' * Checkout or Update WSJT-X Superbuild Scripts'
echo ' * Get the application SVN version'
echo ' * Download the latest Hamlib3 sources'
echo ' * Download the latest WSJT-X sources'
echo ' * Create a single tar.gz file ready for compiling'
echo ' * Configure and Build WSJT-X'
echo ' * Install WSJT-X to the user space for testing'
sleep 2

}


# update or checkout wsjtx-superbuild from svn ---------------------------------
check_svn() {
echo ''
echo '-----------------------------------------------------'
echo -e ${C_Y}" WSJT-X SUPERBUILD SVN UPDATE"${C_NC}
echo '-----------------------------------------------------'

if [[ ! -d $SRCD/$APP_NAME/.svn ]]
then
	echo ''
	echo "Checking Out New Version of $APP_NAME"
	cd $SRCD
	svn co $URL
else
	# Yy / Nn answer to update from svn	
	while [ 1 ]
	do
		echo ''
		read -p "Update from SVN Before Building? [ Y/N ]: " yn
		case $yn in
		
		[Yy]* )
			cd "$APP_SRC"
			echo "Updating ( $APP_NAME )"
			svn cleanup && svn update
			break ;;
		
		[Nn]* )
			echo "Nothing to be done..."
			break ;;
		
		* )
			clear ||:
			echo "Please use "Y" yes or "N" No." ;;
		esac
	done
fi

}


# get svn version info from the branch location on Sourceforge -----------------
get_svn_revision() {

	SVN_VER=$(svn info $CHECK_URL | grep "Last Changed Rev:" | awk '{print $4}')	
	SB_SVN_VER=$(svn info $APP_SRC | grep "Last Changed Rev:" | awk '{print $4}')	

}


# setup folder based on separation selection -----------------------------------
check_separation() {

# separation is enabled / disabled from the configure script, default = Yes
if [ $SEPARATE == "Yes" ] ; then 
	BUILDD="$HOMEDIR/wsjtx/superbuild/$OPT1/$OPT2/$SVN_VER/build/$OPTION"
	INSTALLD="$HOMEDIR/wsjtx/superbuild/$OPT1/$OPT2/$SVN_VER/install/$OPTION"
	PKGD="$HOMEDIR/wsjtx/superbuild/$OPT1/$OPT2/$SVN_VER/package"
else
	BUILDD="$HOMEDIR/wsjtx/superbuild/$OPT1/$OPT2/build/$OPTION"
	INSTALLD="$HOMEDIR/wsjtx/superbuild/$OPT1/$OPT2/install/$OPTION"
	PKGD="$HOMEDIR/wsjtx/superbuild/$OPT1/$OPT2/package"
fi

}


# Setup checkout and build directories -----------------------------------------
setup_dirs() {
echo ''
echo '-----------------------------------------------------'
echo -e ${C_Y}" SETUP DIRECTORIES"${C_NC}
echo '-----------------------------------------------------'
echo ''
# move old wsjtx-sb directory if exists
if [[ -f ~/jtsdk/wsjtx-sb ]] ; then
	mv ~/jtsdk/wsjtx-sb ~/jtsdk/wsjtx-sb.old
fi
mkdir -p "$BASED" >/dev/null 2>&1
mkdir -p "$BUILDD" >/dev/null 2>&1
mkdir -p "$INSTALLD" >/dev/null 2>&1
mkdir -p "$PKGD" >/dev/null 2>&1
echo " Superbuild ...: $APP_NAME r$SB_SVN_VER"
echo " App Version ..: $OPT2 r$SVN_VER"
echo " Build ........: $BUILDD"
echo " Install ......: $INSTALLD"
echo " Package ......: $PKGD"
echo ''

}

# configure the source branch --------------------------------------------------
configure_build() {

# NOTE - The WSJTX Superbuild script cannot be run from within it's own directory

# $INSTALLD ..: is the local install location from check_separation
# $BUILDD ....: is the build directory from check_separation
# $TYPE ......: is from $OPT1 dev = ^/branches, garc = ^/tags
# $OPT2 ......: is the actual branch name: wsjtx, wsjtx-1.6 etc etc
# $APP_SRC ...: is the src location of wsjtx-superbuild scripts

echo ''
echo "-------------------------------------------"
echo -e ${C_Y} "CONFIGURE SOURCE PACKAGE"${C_NC}
echo "-------------------------------------------"
echo ''
cd "$BUILDD"
cmake -Wno-dev -D CMAKE_INSTALL_PREFIX="$INSTALLD" -D WSJTX_TAG=$TYPE/$OPT2 $APP_SRC

}

# build the [ wsjtx.tgz ] file -------------------------------------------------
build_source_package() {

echo ''
echo "-------------------------------------------"
echo -e ${C_Y} "BUILD SOURCE TARBALL [ wsjtx.tgz ]"${C_NC}
echo "-------------------------------------------"
echo  ''
echo '** Please be patient as this can take a few minutes **'
echo ''
cd "$BUILDD"

# Verbose option settings
case "$OPT4" in
	1) cmake --build . --target source -- VERBOSE=1 ;;
	*) cmake --build . --target source ;;
esac

# copy the source file to the package directory
cp wsjtx*.tgz $PKGD/$OPT2-$SVN_VER.orig.tar.gz

}


# Finished building source package ---------------------------------------------
source_finish_message() {

echo ''
echo "-------------------------------------------"
echo -e ${C_G} "SOURCE PACKAGE COMPLETE"${C_NC}
echo "-------------------------------------------"
echo ''
echo " Branch Name ......: $OPT2"
echo " Branch Type ......: ^/$TYPE"
echo " Branch URL .......: $CHECK_URL"
echo " Build Directory ..: $BUILDD"
echo " Source Package ...: $OPT2-$SVN_VER.orig.tar.gz"
echo " Location .........: $PKGD"
echo ''
read -rp " Press [ Enter ] to continue .."
	
}

################################################################################
# START MAIN SCRIPT
################################################################################

case $OPT3 in
	build )
		clear ||:
		echo '-----------------------------------------------------------'
		echo -e "${C_Y}"' Under Construction'"${C_NC}"
		echo '-----------------------------------------------------------'
		echo ''
		echo ' Building both Source Package and The Application'
		echo ' is currently disabled.'
		echo ''
		echo ' When the scripts are finished, this feature will'
		echo ' perform both actions, resulting in a useable application'
		echo ' and the Source package it was built from' 
		echo ''
		read -rp "Press [ Enter ] to continue ..."
		;;

	source-pkg )
		source_pkg_array=('build_message' 'check_svn' 'get_svn_revision' \
		'check_separation' 'setup_dirs' 'configure_build' 'build_source_package' \
		'source_finish_message')

		# run the array
		for i in "${!source_pkg_array[@]}" ; do ${source_pkg_array[$i]} ; done	

	;;

esac

exit 0

