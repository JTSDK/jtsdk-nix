#! /usr/bin/env bash
#
# Name			: jtsdk-wspr.sh
# Execution		: As normal user type: jtsdk-wspr.sh
# Copyright		: @JTSDK_COPYRIGHT@
# Contributors	: @JTSDK_AUTHORS@
# Comment		: Part of the JTSDK Linux Project
#
# @PROGRAM@ is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation either version 3 of the License, or
# (at your option) any later version. 
#
# @PROGRAM@ is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#-------------------------------------------------------------------------#

set -e

# set home and directory paths
HOMEDIR=~/jtsdk
MENU=@SHARE@
SRCD="$HOMEDIR/src"
TMPD="$HOMEDIR/tmp"
LOGS="$HOMEDIR/logs"


# app specfic options
APP_NAME=wspr
APP_SRC="$SRCD/$APP_NAME"
URL="https://svn.code.sf.net/p/wsjt/wsjt/branches/wspr"
SEPARATE=@SEPARATE@
PYTHON3=@PYTHON3@
F2PY3=@F2PY3@


# Foreground colours
C_R='\033[01;31m'		# red
C_G='\033[01;32m'		# green
C_Y='\033[01;33m'		# yellow
C_C='\033[01;36m'		# cyan
C_NC='\033[01;37m'		# no color

################################################################################
# FUNCTOINS
################################################################################
check_svn() {

if [[ ! -d $APP_SRC/.svn ]]
then
	echo
	echo "Checking Out New Version of $APP_NAME"
	cd $SRCD
	svn co $URL
else
	# Yy / Nn answer to update from svn	
	while [ 1 ]
	do
		echo
		read -p "Update from SVN Before Building? [ Y/N ]: " yn
		case "$yn" in
		
		[Yy]* )
			cd "$APP_SRC" 
			echo "Updating ( $APP_NAME )"
			svn cleanup && svn update
			break ;;
		[Nn]* )
			echo 'Nothing to be done..'
			break ;;
		
		* )
			clear ||:
			echo "Please use "Y" yes or "N" No." ;;
		esac
	done
fi

}

# get WSPR Version information from: wspy.py
get_version() {

# Example
# ------------------------------------------------------------------------------
# Using wspy.py line: Version="4.0 r" + "$Rev: 4889 $"[6:-2]
# ------------------------------------------------------------------------------

AVER=$(cat $APP_SRC/wspr.py |grep 'Version="' |awk '{print $1}' |cut -c10-13)
echo "-- Repository Version Is ..: $AVER"

}


# get the last changed svn number
get_svn_revision() {
SVN_VER=$(svn info "$APP_SRC" |grep "Last Changed Rev:" |awk '{print $4}')
echo "-- SVN Revision Is ........: $SVN_VER"

}


# generate a simple wsjt.sh run script -----------------------------------------
generate_shell_script() {
(
cat <<EOF_WSJT
#!/usr/bin/env bash
#-------------------------------------------------------------------------------
# File Name:    wspr.sh
# Description:  Shell script wrapper to run wsjt
#				JTSDK auto generated file
#-------------------------------------------------------------------------------

set -e

# python3 path is updated from configure script
cd $INSTALLD
env PYTHONPATH="$INSTALLD/WsjtMod" @PYTHON3@ -O ./wspy.py

EOF_WSJT
) > "$INSTALLD"/wspr.sh

}

# generate hamlib lis ----------------------------------------------------------
rigctl_error() {
echo ''
echo '--------------------------------------------'
echo -e ${C_Y}"RIG CONTROL ERROR"${C_NC}
echo '--------------------------------------------'
echo ''
cat <<EOF
 There was an error when trying to access the
 application rigctl (from libhamlib-utils) to
 generate the latest rig list.
 
 Ensure you have Hamlib Utils installed and it
 is reachable from the the command line.
 
 For most distributions, the package is called:
 
 libhamlib-utils
 
EOF

read -p "Press [ Enter ] to return to the main menu .."
exit 0

}


################################################################################
# START MAIN SCRIPT
################################################################################

# Make sure directories are present, in case they were deleted
clear ||:
echo '-----------------------------------------------------'
echo -e ${C_Y}"STARTING BUILD for ( $APP_NAME )"${C_NC}
echo '-----------------------------------------------------'
check_svn

echo ''
echo '-----------------------------------------------------'
echo -e ${C_Y}" CHECK APP and SVN REVISIONS"${C_NC}
echo '-----------------------------------------------------'
get_version
get_svn_revision

# set install locaiton
if [ $SEPARATE == "Yes" ] ; then 
	INSTALLD="$HOMEDIR/$APP_NAME/$AVER/$SVN_VER"
else
	INSTALLD="$HOMEDIR/$APP_NAME/$AVER"
fi

if [[ -f "$APP_SRC/Makefile" ]] ; then
echo
echo '-----------------------------------------------------'
echo -e ${C_Y}'RUN MAKE DISTCLEAN FIRST'${C_NC}
echo '-----------------------------------------------------'
echo ''
cd "$APP_SRC" ; make distclean
echo ''
fi

# run autoreconf to generate new Makefile & configure scripts
echo
echo '-----------------------------------------------------'
echo -e ${C_Y}'RUN AUTORECONF and CONFIGURE'${C_NC}
echo '-----------------------------------------------------'
echo ''
cd "$APP_SRC"
autoreconf -f -i
./configure --prefix=$INSTALLD

# compile WSJT application
echo
echo '-----------------------------------------------------'
echo -e ${C_Y}'RUNNING MAKE'${C_NC}
echo '-----------------------------------------------------'
echo ''
make

# now install the targets
mkdir -p "$INSTALLD"/{doc/examples,save/Samples,WsprMod,manpages}
echo "..Installing Binaries"
# loop through binaries && install strip
binaries=(fmtest fcal fmeasure fmtave wspr0 wsprcode)
for i in "${binaries[@]}"
do
	install -m 755 -s $i "$INSTALLD" 
done

echo "..Installing Python3 Files"
install -m 755 gocal Pmw*.py wspr.py wsprrc "$INSTALLD"
install -m 755 WsprMod/{*.py,*.so} "$INSTALLD"/WsprMod

echo "..Installing Sample Wav Files"
install -m 644 save/Samples/* "$INSTALLD"/save/Samples/

echo "..Installing Misc Text Files"
install -m 644 AUTHORS	README NEWS COPYING COPYRIGHT "$INSTALLD"
install -m 644 doc/examples/* "$INSTALLD"/doc/examples/

echo "..Installing Runtime Script"
if [[ -f $INSTALLD/$APP_NAME.sh ]] ; then rm -f "$INSTALLD/$APP_NAME.sh" ; fi
touch "$INSTALLD/$APP_NAME.sh" && chmod +x "$INSTALLD/$APP_NAME.sh"
generate_shell_script

echo "..Generating Hamlib Rig List"
rigctl -l >> "$INSTALLD/r.l" || {
rigctl_error
}
if [[ -f $INSTALLD/hamlib_rig_numbers ]] ; then rm -f "$INSTALLD/hamlib_rig_numbers" ; fi
awk 'NR > 3 { print }' < "$INSTALLD/r.l" > "$INSTALLD/hamlib_rig_numbers"
sed  -i 's .\{2\}  ' "$INSTALLD/hamlib_rig_numbers"
rm -f "$INSTALLD/r.l"

# Manpages and User Guide
for f in ./manpages/*.1 ; do
	echo "..Installing $f"
	install -m 644 "$f" "$INSTALLD"/manpages/
done
echo "..Installing $(ls -al ./doc/wspr-main* |awk '{print $9}')"
install -m 644 doc/wspr-main*.html "$INSTALLD/doc/"
DOCNAME=$(ls -al doc/wspr-main* |awk '{print $9}' |rev | cut -d"/" -f1 | rev)

# Finished
echo
echo '-----------------------------------------------------'
echo -e ${C_G}"BUILD SUMMARY"${C_NC}
echo '-----------------------------------------------------'
echo ''
echo " Name .........: $APP_NAME"
echo " Version ......: $AVER"
echo " SVN Version ..: r$SVN_VER"	
echo " User Guide ...: $DOCNAME"		
echo " Source .......: $APP_SRC"
echo " Install ......: $INSTALLD"
echo " SVN URL ......: $URL"
echo ''
echo " TO RUN $APP_NAME"
echo " cd ...........: $INSTALLD"
echo " Type, ........: ./$APP_NAME.sh"
echo ''
read -p "Press [ Enter ] to return to the main menu .."

exit 0

