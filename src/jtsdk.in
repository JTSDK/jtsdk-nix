#! /usr/bin/env bash
#
# Name			: @PROGRAM@ @VERSION@
# Execution		: As normal user type: jtsdk
# Copyright		: @COPYRIGHT@
# License		: @LICENSE@
# Contributors	: @AUTHORS@
# Comment		: Part of the JTSDK Linux Project
#
# @PROGRAM@ is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation either version 3 of the License, or
# (at your option) any later version. 
#
# @PROGRAM@ is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#-------------------------------------------------------------------------#

# exit on error
set -e

################################################################################
#
# VARIABLE SECTION
#
################################################################################

# host informaiton and apps
HOST_OS=@HOST_OS@
HOST_CPU=@HOST_CPU@

# set home and directory paths
HOMEDIR=~/jtsdk
MENU=@SHARE@
SRCD="$HOMEDIR/src"
TMPD="$HOMEDIR/tmp"
LOGS="$HOMEDIR/logs"
CFG="$HOMEDIR/config"

# enable / disable experimental branch
ENABLE_EXP=No

# dynamic menu generation time
GENTIME='60'

# Foreground colours
C_R='\033[01;31m'		# red
C_G='\033[01;32m'		# green
C_Y='\033[01;33m'		# yellow
C_C='\033[01;36m'		# cyan
C_NC='\033[01;37m'		# no color


################################################################################
#
# LANGUAGE SECTION
#
################################################################################

# backtitle lang
BACKTITLE="@PROGRAM@ @VERSION@"

# root chk lang
RCTITLE="ROOT / SUDO CHECK FAILED"
RCMSG="    @PROGRAM@ must be run as normal user, not root or sudo.\n\
          Please run "$0" without "sudo" prefix"

# dialog lang
DITITLE="DIALOG INSTALL"
DIMSG="        @PROGRAM@ Will now install Dialog Msg CLient"
DISUCTITLE="DIALOG INSTALL COMPLETE"
DISUCMSG="\n      Dialog Install Complete."

# sig catch lang
SIGCAUGHT="   SIGNAL CAUGHT"
SIGCAUGHTMSG="\n   Signal Caught, Performing Cleanup Routine"
CLEANTMP=" CLEANING TMP"
CLEANTMPMSG="\n         Cleaning Up Temporary Files"
RESETOPT=" RESET OPTIONS"
RESETOPTMSG="\n         Resetting Used Bash Options"
CLEANVAR=" CLEANING VARS"
CLEANVARMSG="\n             Unset Used Variables"

# exit lang
EXITWSDT=" EXIT @PROGRAM@"
EXITWSDTMSG="\n      Performing Shutdown Cleanup Routine"

# main menu lang
MMTITLE=" @PROGRAM@ MAIN MENU"
MENUMSG="     Arrow Up/Down, then [ Enter] to Select"

# applicaiton menu title's
WSJTXTITLE=" WSJT-X BUILD MENU"
WSJTXRCTITLE=" WSJT-X RC BUILD MENU"
WSJTXEXPTITLE=" WSJT-X EXP BUILD MENU"

# help menu lang
HTITLE="APPLICATION BUILD HELP DOCUMENT"
WSJTXHELPTITLE="WSJT-X BUILD HELP"
WSJTXRCHELPTITLE="WSJT-X RC BUILD HELP"
WSJTXEXPHELPTITLE="WSJT-X EXP BUILD HELP"

# under development
UD=" UNDER DEVELOPMENT"
UDMSG="\n      Build Selection is Under Development"

# release candidate message
BS=" BUILD STATUS"
BSMSG="\n There Are No Pending RC Builds At This Time"

# Dormant Branch
IB=" INACTIVE BRANCH"
IBMSG="\n    Branch Activity Is Currently Dormant"

# ga and rc menu title
RC_TITLE="  WSJT-X GA and RC SELECTION"

# superbuild menu items
SBTITLE="  WSJT-X SUPERBUILD MENU"


################################################################################
#
# FUNCTIONS SECTION
#
################################################################################

# MAKE DIRECTORIES -------------------------------------------------------------
make_dirs() {

mkdir -p $HOMEDIR/{src,tmp,logs,config}

}


# SET BASH OPTIONS -------------------------------------------------------------
set_options() {

set -e                 # exit immediately on any error
set -o pipefail        # pipeline fail retun exit status
set -u                 # undefined variables

}


# UNSET BASH OPTIONS -----------------------------------------------------------
function unset_options() {

set +e
set +o pipefail
set +u

}


# UNDER DEVELOPMENT BOX --------------------------------------------------------
function under_development() {

dialog --backtitle "$BACKTITLE" --title "$UD" --ok-label "Return" --msgbox "$UDMSG" 7 50

}


# RELEASED MESSAGE BOX ---------------------------------------------------------
function build_status() {

dialog --backtitle "$BACKTITLE" --title "$BS" --ok-label "Return" --msgbox "$BSMSG" 7 50

}


# INACTIVE BRANCH --------------------------------------------------------------
function inactive_branch() {

dialog --backtitle "$BACKTITLE" --title "$IB" --ok-label "Return" --msgbox "$IBMSG" 7 50

}


# SIGNAL CATCH -----------------------------------------------------------------
sig_catch_cleanup() {
EXIT_STATUS="$?"

if [[ "$EXIT_STATUS" == "0" ]]
then
   clean_exit

else

dialog --backtitle "$BACKTITLE" --title "$SIGCAUGHT" --infobox "$SIGCAUGHTMSG" 5 50
	sleep 1

dialog --backtitle "$BACKTITLE" --title "$CLEANTMP" --infobox "$CLEANTMPMSG" 5 50
	rm -r  $TMPD/*
	sleep 1

dialog --backtitle "$BACKTITLE" --title "$RESETOPT" --infobox "$RESETOPTMSG" 5 50
	unset_options
	wait
	clear ||:

	echo "Exit Status ""[ "$EXIT_STATUS" ]"
	echo "@PROGRAM@ Signal Catch Cleanup Complete"
	echo ''
	trap - SIGHUP SIGINT SIGQUIT SIGTERM SIGTSTP
	unset exit_status
	exit
fi
}


# ROOT CHECK -------------------------------------------------------------------
root_chk() {
MSGCLIENT=""
TESTD=$(dpkg --get-selections dialog | awk '{print $1}')

if [[ $TESTD = "dialog" ]]
then
   MSGCLIENT="dialog"
  else
   MSGCLIENT="whiptail"
fi
clear ||:

if [[ $EUID = "0" ]]
then
"$MSGCLIENT" --title "$RCTITLE" --backtitle "$BACKTITLE" --msgbox "$RCMSG" 7 70
clean_exit
exit
fi
clear ||:

unset {TESTVAR,MSGCLIENT}
}


# DIALOG CHECK -----------------------------------------------------------------
dialog_chk() {
INSTALLED=$(dialog --version |awk '{print $1}')

if [[ $INSTALLED == Version: ]]; then
   MSGCLIENT="dialog"

elif [[ $INSTALLED != dialog ]]; then
   MSGCLIENT="whiptail"
   clear ||:

"$MSGCLIENT" --title "$DITITLE" --backtitle "$BACKTITLE" --msgbox "$DIMSG" 7 70
   touch "$LOGS"/install_log
   sudo apt-get -qy install dialog | tee 2>>"$LOGS"/install_log
   wait
   dialog --create-rc ~/.dialogrc
   wait
   cp "$CONFIG"/debian.rc ~/.dialogrc
   wait
   clear ||:

dialog --title "$DISUCTITLE" --backtitle "$BACKTITLE" --msgbox "$DISUCMSG" 7 40
sudo -k

fi
}


# NORMAL SHUTDOWN --------------------------------------------------------------
clean_exit() {
local EXIT_STATUS=$?

dialog --backtitle "$BACKTITLE" --title "$EXITWSDT" --infobox "$EXITWSDTMSG" 5 50
   sleep .5

dialog --backtitle "$BACKTITLE" --title "$CLEANTMP" --infobox "$CLEANTMPMSG" 5 50
   rm -r $TMPD/*
   wait
   sleep .5

dialog --backtitle "$BACKTITLE" --title "$RESETOPT" --infobox "$RESETOPTMSG" 5 50
	unset_options
	wait
	sleep .5
	clear ||:

   echo "Exit Status ""[ "$EXIT_STATUS" ]"
   echo "@PROGRAM@ Clean Exit Complete."
   echo ''
   trap - SIGHUP SIGINT SIGQUIT SIGTERM SIGTSTP
   unset EXIT_STATUS
exit
}


# DIALOG RC FILE ---------------------------------------------------------------
make_dialogrc() {

if [ -f "$CFG"/.dialogrc ]; then rm -f "$CFG"/.dialogrc ; fi
touch "$CFG"/.dialogrc

(
cat <<'EOF_DIALOGRC'
aspect = 0
separate_widget = ""
tab_len = 0
visit_items = OFF
use_shadow = ON
use_colors = ON
screen_color = (CYAN,BLUE,ON)
shadow_color = (BLACK,BLACK,ON)
dialog_color = (BLACK,WHITE,OFF)
title_color = (BLUE,WHITE,ON)
border_color = (WHITE,WHITE,ON)
button_active_color = (WHITE,BLUE,ON)
button_inactive_color = (BLACK,WHITE,OFF)
button_key_active_color = (WHITE,BLUE,ON)
button_key_inactive_color = (RED,WHITE,OFF)
button_label_active_color = (YELLOW,BLUE,ON)
button_label_inactive_color = (BLACK,WHITE,ON)
inputbox_color = (BLACK,WHITE,OFF)
inputbox_border_color = (BLACK,WHITE,OFF)
searchbox_color = (BLACK,WHITE,OFF)
searchbox_title_color = (BLUE,WHITE,ON)
searchbox_border_color = (WHITE,WHITE,ON)
position_indicator_color = (BLUE,WHITE,ON)
menubox_color = (BLACK,WHITE,OFF)
menubox_border_color = (WHITE,WHITE,ON)
item_color = (BLACK,WHITE,OFF)
item_selected_color = (WHITE,BLUE,ON)
tag_color = (BLUE,WHITE,ON)
tag_selected_color = (YELLOW,BLUE,ON)
tag_key_color = (BLACK,WHITE,OFF)
tag_key_selected_color = (WHITE,BLUE,ON)
check_color = (BLACK,WHITE,OFF)
check_selected_color = (WHITE,BLUE,ON)
uarrow_color = (GREEN,WHITE,ON)
darrow_color = (GREEN,WHITE,ON)
itemhelp_color = (WHITE,BLACK,OFF)
form_active_text_color = (WHITE,BLUE,ON)
form_text_color = (WHITE,CYAN,ON)
form_item_readonly_color = (CYAN,WHITE,ON)
gauge_color = (BLUE,WHITE,ON)
EOF_DIALOGRC
) > "$CFG"/.dialogrc

# use preset dialog config file
if [ -f "$CFG"/.dialogrc ]; then
	export DIALOGRC="$CFG"/.dialogrc
fi

}


# MAIN MENU HELP ---------------------------------------------------------------
main_menu_help() {

	dialog --exit-label DONE --backtitle "$BACKTITLE" --title "$HTITLE" --textbox "$HELP" 20 80

}

# GENERATE BUILD LISTS FROM SOURCEFORGE SVN ------------------------------------
generate_build_lists() {

# - Generates Dynamic Menu Lists
TSFILE="$CFG/time-stamp"
if [[ ! -f $TSFILE ]] || [[ $(find $TSFILE -mmin +$GENTIME) != "" ]] ; then

	# these branches are not supported by the Superbuild script
	dev_exclude_array=('wsjtx-1.3' 'wsjtx-1.4' 'wsjtx_k1jt_p1' 'wsjtx-superbuild' 'wsjtx_w')

	# these branches are no longer being updated / supported
	ga_exclude_array=('wsjtx-1.3' 'wsjtx-1.4')

	clear ||:
	echo '------------------------------------------------'
	echo -e ${C_Y}'Updating Dynamic Menus From Sourceforge'${C_NC}
	echo '------------------------------------------------'
	echo ''
	echo 'Please be patient, this can take a few seconds'
	echo ''

	# Generate Dev ists
		echo '* Generating Dev Lists'
		svn list http://svn.code.sf.net/p/wsjt/wsjt/branches \
		| grep ^wsjtx \
		| sed 's:/*$::' \
		| sort > $TMPD/dev_list.txt
		#sed -i '1s/wsjtx/Development/g' $TMPD/dev_list.txt
		echo "Back-To-Main-Menu" >> $TMPD/dev_list.txt
	
		for i in "${dev_exclude_array[@]}"
		do
			sed -i '/^'"$i"'/d' $TMPD/dev_list.txt
		done
		cp -u $TMPD/dev_list.txt $CFG

	# Generate GA and RC List
		echo '* Generating GA and RC List'
		svn list http://svn.code.sf.net/p/wsjt/wsjt/tags \
		| grep ^wsjtx-[1-9]\.[5-9]\.[0-9] \
		| sed 's:/*$::' > $TMPD/ga_rc_list.txt
		echo "Back-To-Main-Menu" >> $TMPD/ga_rc_list.txt
		cp -u $TMPD/ga_rc_list.txt $CFG

	# Generate Superbuild Dev List
		echo '* Generating Superbuild Dev List'
		svn list http://svn.code.sf.net/p/wsjt/wsjt/branches \
		| grep ^wsjtx \
		| sed 's:/*$::' \
		| sort > $TMPD/sb_dev_list.txt
		sed -i '1s/wsjtx/Development/g' $TMPD/sb_dev_list.txt
		echo "Back-To-Main-Menu" >> $TMPD/sb_dev_list.txt
	
		for i in "${dev_exclude_array[@]}"
		do
			sed -i '/^'"$i"'/d' $TMPD/sb_dev_list.txt
		done
		cp -u $TMPD/sb_dev_list.txt $CFG
	
	# Generate Superbuild GA and RC List
	echo '* Generating Superbuild GA and RC List'
	svn list http://svn.code.sf.net/p/wsjt/wsjt/tags \
	| grep ^wsjtx-[1-9]\.[5-9] \
	| sed 's:/*$::' > $TMPD/sb_ga_rc_list.txt
	echo "Back-To-Main-Menu" >> $TMPD/sb_ga_rc_list.txt
	cp -u $TMPD/sb_ga_rc_list.txt $CFG
	
	# create a time stamp file
	touch $CFG/time-stamp
	echo ''
	read -p "Press [ ENTER ] to continue..."
	
fi

}

# WSJT-X MAIN MENU -------------------------------------------------------------
wsjtx_main_menu() {
	dialog --ok-label SELECT \
	--no-cancel \
	--backtitle "$BACKTITLE" \
	--title "$WSJTXTITLE" \
	--menu "$MENUMSG" 0 50 0 \
	"1" "Development Branches" \
	"2" "GA and RC Candidates" \
	"3" "Superbuilds" \
	"4" "Maintainer" \
	"H" "Help" \
	"B" "Back To Main Menu" 2> "$TMPD/wsjtx_menu_select"
	WSJTX_SELECT=$(head -c 1 < $TMPD/wsjtx_menu_select)
}

# WSJT-X DEVELOPMENT MENU ------------------------------------------------------
wsjtx_dev_menu() {

	# generate the list of development branches to select from
	dev_array=()
	while read a b ; do
		dev_array+=("$a" "$b")
	done < $CFG/dev_list.txt

	# select which development branch to build
	dialog 	--ok-label "Select" \
	--no-cancel \
	--backtitle "$BACKTITLE" \
	--title "  WSJT-X DEVELOPMENT SELECTION" \
	--menu "$MENUMSG" 0 55 0 "${dev_array[@]}" 2> $TMPD/dev_select.txt
	branch=$(head -1 < $TMPD/dev_select.txt)

	# select what target to build
	dialog --ok-label SELECT \
	--no-cancel \
	--backtitle "$BACKTITLE" \
	--title "$WSJTXTITLE" \
	--menu "$MENUMSG" 0 50 0 \
	"1" "Release Target" \
	"2" "Debug Target" \
	"3" "User Guide" \
	"B" "Back To Main Menu" 2> "$TMPD/wsjtx_dev_target_select"
	target=$(head -c 1 < $TMPD/wsjtx_dev_target_select)

	# now send the build command to jtsdk-wsjtx build script
	case $target in
		1) # build the release target
			clear ||:
			echo
			echo "jtsdk-wsjtx dev $branch Release"
			echo
			read -p "enter to continue" ;;

		2) # build the debug target
			clear ||:
			echo
			echo "jtsdk-wsjtx dev $branch Debug"
			echo
			read -p "enter to continue" ;;

		3) # build the user guide
			clear ||:
			echo
			echo "jtsdk-wsjtx dev $branch doc"
			echo
			read -p "enter to continue" ;;
		esac
}

# GA and RELEASE CANDIDATES ----------------------------------------------------
wsjtx_ga_rc_menu() {

	# generate GA and RC list from ga_rc_lists.txt
	ga_rc_array=()
	while read a b ; do
		ga_rc_array+=("$a" "$b")
	done < $CFG/ga_rc_list.txt

	# display the menu selection dialog box
	dialog 	--ok-label "Select" \
	--no-cancel \
	--backtitle "$BACKTITLE" \
	--title "$RC_TITLE" \
	--menu "$MENUMSG" 0 55 0 "${ga_rc_array[@]}" 2> $TMPD/ga_rc_select.txt
	GA_RC_SELECT=$(head -1 < $TMPD/ga_rc_select.txt)

	case $GA_RC_SELECT in
		Back*)
		continue ;;
		*)
		# for testing only, comment out for release
		clear ||:
		echo ''
		echo "You Selected ..........: $GA_RC_SELECT"
		echo ''
		read -p "Press [ Enter ] to continue ... "
		;;
	esac
}

# SUPERBUILD MENU --------------------------------------------------------------
superbuild_menu() {

	# Superbuild Dev List Array
	sb_dev_array=()
	while read a b ; do
	    sb_dev_array+=("$a" "$b")
	done < $CFG/sb_dev_list.txt

	# Superbuild GA and RC List Array
	sb_ga_rc_array=()
	while read a b ; do
	    sb_ga_rc_array+=("$a" "$b")
	done < $CFG/sb_ga_rc_list.txt

	# display the superbuild main menu
	dialog --ok-label SELECT \
	--no-cancel \
	--backtitle "$BACKTITLE" \
	--title "$SBTITLE" \
	--menu "$MENUMSG" 0 50 0 \
	"1" "Devlopment Branches" \
	"2" "GA and RC Branches" \
	"B" "Back To Main Menu" 2> "$TMPD/sb_menu_select.txt"
	SB_MENU_SELECT=$(head -c 1 < $TMPD/sb_menu_select.txt)

	# setup for either Dev, RC and GA-Release Branches
	case $SB_MENU_SELECT in
		1) # Development Branch Selection
			SBTITLE="  WSJT-X SUPERBUILD DEV"
			dialog 	--ok-label "Select" \
			--no-cancel \
			--backtitle "$BACKTITLE" \
			--title "$SBTITLE" \
			--menu "$MENUMSG" 0 55 0 "${sb_dev_array[@]}" 2> $TMPD/sb_select.txt
			SB_SELECT=$(head -1 < $TMPD/sb_select.txt)
			clear ||:
			echo "You Selected ..........: $SB_SELECT"
			echo ''
			read -p "Press [ Enter ] to continue ... "
		;;

		2) # Development Release Candidates
			SBTITLE="  WSJT-X SUPERBUILD GA and RC"
			dialog 	--ok-label "Select" \
			--no-cancel \
			--backtitle "$BACKTITLE" \
			--title "$SBTITLE" \
			--menu "$MENUMSG" 0 55 0 "${sb_ga_rc_array[@]}" 2> $TMPD/sb_select.txt
			SB_SELECT=$(head -1 < $TMPD/sb_select.txt)
			clear ||:
			echo "You Selected ..........: $SB_SELECT"
			echo ''
			read -p "Press [ Enter ] to continue ... "
		;;

		B*)
		continue ;;
	esac

}


################################################################################
#
# START MAIN SCRIPT
#
################################################################################

# set traps
trap sig_catch_cleanup SIGHUP SIGINT SIGQUIT SIGTERM SIGTSTP

# set shell options
set_options

# root check
root_chk

# dialog check
dialog_chk

# make directories
make_dirs

# generate dialog rc
make_dialogrc

# menu help files
HELP="$MENU"/main_menu_help.txt
WSJTXHELP="$MENU"/wsjtx_menu_help.txt
WSJTXRCHELP="$MENU"/wsjtxrc_menu_help.txt
WSJTXEXPHELP="$MENU"/wsjtxexp_menu_help.txt

# generate SB Dev, SB GA and RC lists from Sourceforge
# update regeneration interval is set by $GENTIME at the top of the script
generate_build_lists

# DRAW MAIN MENU ---------------------------------------------------------------
clear ||:
while [ 0 ]; do

dialog --ok-label SELECT \
--nocancel \
--backtitle "$BACKTITLE" \
--title "$MMTITLE" \
--menu "$MENUMSG" 0 50 0 \
"1" "WSJT" \
"2" "WSPR" \
"3" "WSJT-X" \
"4" "HAMLIB-3" \
"H" "Help" \
"E" "Exit" 2> "$TMPD/selection"
MAIN_SELECT=$(head -c 1 < $TMPD/selection)

# run fuction based on the users selection
case "$MAIN_SELECT" in
	1) # WSJT ------------------------------------------------------------------
	under_development	
	continue ;;

	2) # WSPR ------------------------------------------------------------------
	under_development	
	continue ;;
	
	3) # WSJT-X ----------------------------------------------------------------
	wsjtx_main_menu

	# present build options based on wsjtx_main_menu selection
	case $WSJTX_SELECT in
		1) # Development Branch Builds
		wsjtx_dev_menu ;;
	
		2) # GA and Release Candidates Builds
		wsjtx_ga_rc_menu ;;

		3) # Superbuild Menu
		superbuild_menu ;;

		4) # Maintainer Build Options
		under_development ;;

	esac
	;;
	
	4) # HAMLIB-3 --------------------------------------------------------------
	under_development
	continue ;;

	H) # HELP ------------------------------------------------------------------
	main_menu_help
	continue ;;

	E) # EXIT JTSDK ------------------------------------------------------------
	clean_exit ;;
esac

done

