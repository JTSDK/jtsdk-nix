#! /usr/bin/env bash
#
# Name			: jtsdk-wsjt.sh
# Execution		: As normal user type: jtsdk-wsjt.sh
# Copyright		: @JTSDK_COPYRIGHT@
# Contributors	: @JTSDK_AUTHORS@
# Comment		: Part of the JTSDK Linux Project
#
# @PROGRAM@ is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation either version 3 of the License, or
# (at your option) any later version. 
#
# @PROGRAM@ is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#-------------------------------------------------------------------------#

set -e

# set home and directory paths
HOMEDIR=~/jtsdk
SRCD="$HOMEDIR/src"
TMPD="$HOMEDIR/tmp"
LOGS="$HOMEDIR/logs"
OPTION=$1

# app specific variables
APP_NAME=wsjt
APP_SRC="$SRCD/trunk"
URL="https://svn.code.sf.net/p/wsjt/wsjt/trunk"
LOGGRP=$(groups $USER | cut -d ' ' -f 3)

# Configure and Makefiles Expansions
SEPARATE=@SEPARATE@
MENU=@SHARE@
PYTHON3=@PYTHON3@
F2PY3=@F2PY3@

# Foreground colours
C_R='\033[01;31m'		# red
C_G='\033[01;32m'		# green
C_Y='\033[01;33m'		# yellow
C_C='\033[01;36m'		# cyan
C_NC='\033[01;37m'		# no color

################################################################################
# FUNCTOINS
################################################################################

# check if user wants to update from svn before building -----------------------
check_svn() {

if [[ ! -d $APP_SRC/.svn ]]
then
	echo
	echo "Checking Out New Version of $APP_NAME"
	cd $SRCD
	svn co $URL
else
	# Yy / Nn answer to update from svn	
	while [ 1 ]
	do
		echo
		read -p "Update from SVN Before Building? [ Y/N ]: " yn
		case "$yn" in
		
		[Yy]* )
			cd "$APP_SRC" 
			echo "Updating ( $APP_NAME )"
			svn cleanup && svn update
			break ;;
		[Nn]* )
			echo "Nothing to be done..."
			break ;;
		
		* )
			clear ||:
			echo "Please use "Y" yes or "N" No." ;;
		esac
	done
fi

}

# get WSJT Version information from: wsjt.py -----------------------------------
get_version() {

# Example
# Version="10.0 r" + "$Rev: 5247 $"[6:-1]
AVER=$(cat $APP_SRC/wsjt.py |grep 'Version="' |awk '{print $1}' |cut -c10-13)
echo "-- Application Version..: $AVER"

}

# get the last changed svn number
get_svn_revision() {

SVN_VER=$(svn info "$APP_SRC" |grep "Last Changed Rev:" |awk '{print $4}')
echo "-- SVN Revision.........: $SVN_VER"

}

# generate a simple wsjt.sh run script -----------------------------------------
generate_shell_script() {
(
cat <<EOF_WSJT
#!/usr/bin/env bash
#-------------------------------------------------------------------------------
# File Name:    wsjt.sh
# Description:  Shell script wrapper to run wsjt
#				JTSDK auto generated file
#-------------------------------------------------------------------------------

set -e

# python3 path is updated from configure script
cd $INSTALLD
env PYTHONPATH="$INSTALLD/WsjtMod" @PYTHON3@ -O ./wsjt.py

EOF_WSJT
) > "$INSTALLD"/wsjt.sh

}

################################################################################
# START MAIN SCRIPT
################################################################################

clear ||:
echo '-----------------------------------------------------'
echo -e ${C_Y}"STARTING BUILD for ( $APP_NAME )"${C_NC}
echo '-----------------------------------------------------'
check_svn

echo ''
echo '-----------------------------------------------------'
echo -e ${C_Y}" CHECK APP and SVN REVISIONS"${C_NC}
echo '-----------------------------------------------------'
get_version
get_svn_revision

# set install locaiton
if [ $SEPARATE == "Yes" ] ; then 
	INSTALLD="$HOMEDIR/$APP_NAME/$AVER/$SVN_VER/install"
else
	INSTALLD="$HOMEDIR/$APP_NAME/$AVER/install"
fi

if [[ -f "$APP_SRC/Makefile" ]] ; then
echo
echo '-----------------------------------------------------'
echo -e ${C_Y}'RUN MAKE DISTCLEAN FIRST'${C_NC}
echo '-----------------------------------------------------'
echo ''
cd "$APP_SRC" ; make distclean
echo ''
fi

# run autoreconf to generate new Makefile & configure scripts
echo
echo '-----------------------------------------------------'
echo -e ${C_Y}'RUN AUTORECONF and CONFIGURE'${C_NC}
echo '-----------------------------------------------------'
echo ''
cd "$APP_SRC"
autoreconf -f -i
./configure --prefix=$INSTALLD --enable-rsdtest

# compile WSJT application
echo
echo '-----------------------------------------------------'
echo -e ${C_Y}'RUNNING MAKE'${C_NC}
echo '-----------------------------------------------------'
echo ''
make

# install the targets
echo
echo '-----------------------------------------------------'
echo -e ${C_Y}'INSTALL WSJT'${C_NC}
echo '-----------------------------------------------------'
echo ''
cd $APP_SRC
mkdir -p "$INSTALLD"/{RxWav/Samples,WsjtMod,rsdtest,manpages,doc}

echo "..Installing Binaries"
install -m 755 -s jt65code jt4code "$INSTALLD"

echo "..Installing Python3 Files"
install -m 755 Pmw*.py wsjt.py wsjtrc "$INSTALLD"
install -m 755 WsjtMod/{*.py,*.so} "$INSTALLD"/WsjtMod

echo "..Installing Sample Wav Files"
install -m 644 RxWav/Samples/* "$INSTALLD"/RxWav/Samples/

echo "..Installing Misc Text Files"
install -m 644 CALL3.TXT wsjt.ico wsjtrc "$INSTALLD"

echo "..Installing RSD Test Tools"
install -m 755 -s $APP_SRC/rsdtest/{rsdtest,rsdtest2,rsdtest3} "$INSTALLD/rsdtest"

# generate shell script
echo "..Installing Runtime Script"
rm -f "$INSTALLD/$APP_NAME.sh" >/dev/null 2>&1
touch "$INSTALLD/$APP_NAME.sh" && chmod +x "$INSTALLD/$APP_NAME.sh"
generate_shell_script

# Manpages and User Guide
for f in ./manpages/*.1 ; do
	echo "..Installing $f"
	install -m 644 "$f" "$INSTALLD"/manpages/
done
echo "..Installing $(ls -al ./doc/wsjt-main* |awk '{print $9}')"
install -m 644 doc/wsjt-main*.html "$INSTALLD/doc/"
DOCNAME=$(ls -al doc/wsjt-main* |awk '{print $9}' |rev | cut -d"/" -f1 | rev)

# Finished
echo
echo '-----------------------------------------------------'
echo -e ${C_G}"BUILD SUMMARY"${C_NC}
echo '-----------------------------------------------------'
echo ''
echo " Name .........: $APP_NAME"
echo " Version ......: $AVER"
echo " SVN Version ..: r$SVN_VER"
echo " User Guide ...: $DOCNAME"	
echo " Source .......: $APP_SRC"
echo " Install ......: $INSTALLD"
echo " SVN URL ......: $URL"
echo ''
echo " TO RUN $APP_NAME"
echo " cd ...........: $INSTALLD"
echo " Type, ........: ./$APP_NAME.sh"
echo ''
read -p "Press [ Enter ] to return to the main menu .."

exit 0

