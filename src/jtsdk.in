#! /usr/bin/env bash
#
# Name ..........: @PROGRAM@ @VERSION@
# Execution .....: As normal user type: jtsdk
# Copyright .....: @COPYRIGHT@
# License .......: @LICENSE@
# Contributors ..: @AUTHORS@
# Comment .......: Part of the JTSDK Linux Project
#
# @PROGRAM@ is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation either version 3 of the License, or
# (at your option) any later version. 
#
# @PROGRAM@ is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#-------------------------------------------------------------------------#

# exit on error
set -e

################################################################################
#
# VARIABLE SECTION
#
################################################################################

# foreground colours
C_R='\033[01;31m'		# red
C_G='\033[01;32m'		# green
C_Y='\033[01;33m'		# yellow
C_C='\033[01;36m'		# cyan
C_NC='\033[01;37m'		# no color

# unicode bling bling :-)
CHK1=${C_G}✔${C_NC}
CHK2=' ✘ '

# set home and directory paths
HOMEDIR="$HOME/jtsdk"
TMPD="$HOMEDIR/tmp"
MENU="$HOMEDIR/tmp"
LOGS="$HOMEDIR/logs"
CFG="$HOMEDIR/config"
DOCS="$HOMEDIR/docs"

# subversion base urls
TAGS="http://svn.code.sf.net/p/wsjt/wsjt/tags"
BRANCHES="http://svn.code.sf.net/p/wsjt/wsjt/branches"

# options based on configure.ac --enable --disable commands
#
# Note(s):
# [1] these features can be reset with with jtsdk -e [FEATURE] -d [FEATURE]
# [2] for resetting JJ use jtsdk -c
# [3] manpages, docs, parallel and separate are enabled by default
# 
# SEPARATE = separate by svn revision, command:  = ./autogen.sh --enable-separate
# BDOCS    = disable user guides, command:       = ./autogen.sh --disable-docs
# BMANP    = disable manpages, command:          = ./sutogen.sh --disable-manpages
# JJJJ     = disable multi core builds, command: = ./sutogen.sh --disable-parallel
SEPARATE=@SEPARATE@
BDOCS=@BDOCS@
BMANP=@BMANP@
JJ=@JJJJ@

# WSJT-X menu generation timer, in minutes -mmin, *cannot be blank !!*
GENTIME='1440'

################################################################################
#
# LANGUAGE SECTION
#
################################################################################

#---------------------------------------------------------------- backtitle lang
BACKTITLE="@PROGRAM@ @VERSION@"

#----------------------------------------------------------------- root chk lang
RCTITLE="ROOT / SUDO CHECK FAILED"
RCMSG="    @PROGRAM@ must be run as normal user, not root or sudo.\n\
          Please run $0 without sudo prefix"

#------------------------------------------------------------------- dialog lang
DITITLE="DIALOG INSTALL"
DIMSG="        @PROGRAM@ Will now install Dialog Msg CLient"
DISUCTITLE="DIALOG INSTALL COMPLETE"
DISUCMSG="\n      Dialog Install Complete."

#---------------------------------------------------------------- sig catch lang
SIGCAUGHT="   SIGNAL CAUGHT"
SIGCAUGHTMSG="\n   Signal Caught, Performing Cleanup Routine"
CLEANTMP=" CLEANING TMP"
CLEANTMPMSG="\n         Cleaning Up Temporary Files"
RESETOPT=" RESET OPTIONS"
RESETOPTMSG="\n         Resetting Used Bash Options"

#--------------------------------------------------------------------- exit lang
EXITWSDT=" EXIT @PROGRAM@"
EXITWSDTMSG="\n      Performing Shutdown Cleanup Routine"

#---------------------------------------------------------------- main menu lang
MMTITLE=" @PROGRAM@ MAIN MENU"
MENUMSG="     Arrow Up/Down, then [ Enter] to Select"

#-------------------------------------------------- application menu titles lang
WSJTXTITLE=" WSJT-X BUILD MENU"

#---------------------------------------------------------------- help menu lang
HTITLE="MAIN HELP SCREEN"
OMTITLE="USER OPTIONS MENU SCREEN"

#-------------------------------------------------------- under development lang
UD=" UNDER DEVELOPMENT"
UDMSG="\n      Build Selection is Under Development"

#------------------------------------------------ release candidate message lang
BS=" BUILD STATUS"
BSMSG="\n There Are No Pending RC Builds At This Time"

#----------------------------------------------------------- dormant branch lang
IB=" INACTIVE BRANCH"
IBMSG="\n    Branch Activity Is Currently Dormant"

#---------------------------------------------------------- superbuild menu lang
SBTITLE="  WSJT-X SUPERBUILD MENU"

#------------------------------------------------------------- user options lang
OMTITLE="  USER OPTIONS MENU"
OPICKTITLE=" USER OPTIONS PICKLIST"
OPICKMSG=" Arrow Up/Down, then [ Space Bar ] to Select Items\n
      Use the [ Enter Key ] to Save Selections\n
            ( On = Enabled   Off = Disabled ) "



################################################################################
#
# FUNCTIONS SECTION
#
################################################################################


#-------------------------------------------------------------- MAKE DIRECTORIES
make_dirs() {

mkdir -p $HOMEDIR/{src,tmp,logs,config,docs}

}


#-------------------------------------------------------------- SET BASH OPTIONS
set_options() {

set -e                 # exit immediately on any error
set -o pipefail        # pipeline fail return exit status
set -u                 # undefined variables

}


#------------------------------------------------------------ UNSET BASH OPTIONS
function unset_options() {

set +e
set +o pipefail
set +u

}


#--------------------------------------------------------- UNDER DEVELOPMENT BOX
function under_development() {

dialog --backtitle "$BACKTITLE" --title "$UD" --ok-label "Return" --msgbox "$UDMSG" 7 50

}


#---------------------------------------------------------- RELEASED MESSAGE BOX
function build_status() {

dialog --backtitle "$BACKTITLE" --title "$BS" --ok-label "Return" --msgbox "$BSMSG" 7 50

}


#--------------------------------------------------------------- INACTIVE BRANCH
function inactive_branch() {

dialog --backtitle "$BACKTITLE" --title "$IB" --ok-label "Return" --msgbox "$IBMSG" 7 50

}


#------------------------------------------------------------------ SIGNAL CATCH
sig_catch_cleanup() {

EXIT_STATUS="$?"

if [[ $EXIT_STATUS -eq 0 ]]
then
   clean_exit

else

dialog --backtitle "$BACKTITLE" --title "$SIGCAUGHT" --infobox "$SIGCAUGHTMSG" 5 50
	sleep 1

dialog --backtitle "$BACKTITLE" --title "$CLEANTMP" --infobox "$CLEANTMPMSG" 5 50
	rm -rf  "${TMPD:?}/"*
	sleep 1

dialog --backtitle "$BACKTITLE" --title "$RESETOPT" --infobox "$RESETOPTMSG" 5 50
	unset_options
	wait
	clear ||:

	echo "Exit Status ""[ $EXIT_STATUS ]"
	echo "@PROGRAM@ Signal Catch Cleanup Complete"
	echo ''
	trap - SIGHUP SIGINT SIGQUIT SIGTERM SIGTSTP
	unset exit_status
	exit
fi
}

#------------------------------------------------------------------ DIALOG CHECK
dialog_chk() {

INSTALLED=$(dialog --version |awk '{print $1}')

if [[ $INSTALLED == Version: ]]; then
   MSGCLIENT="dialog"

elif [[ $INSTALLED != dialog ]]; then
   MSGCLIENT="whiptail"
   clear ||:

"$MSGCLIENT" --title "$DITITLE" --backtitle "$BACKTITLE" --msgbox "$DIMSG" 7 70
   touch "$LOGS"/install_log
   sudo apt-get -qy install dialog | tee 2>>"$LOGS"/install_log
   wait
   dialog --create-rc ~/.dialogrc
   wait
   cp "$CONFIG"/debian.rc ~/.dialogrc
   wait
   clear ||:

dialog --title "$DISUCTITLE" --backtitle "$BACKTITLE" --msgbox "$DISUCMSG" 7 40
sudo -k

fi
}


#--------------------------------------------------------------- NORMAL SHUTDOWN
clean_exit() {

local EXIT_STATUS=$?

dialog --backtitle "$BACKTITLE" --title "$EXITWSDT" --infobox "$EXITWSDTMSG" 5 50
   sleep .5

dialog --backtitle "$BACKTITLE" --title "$CLEANTMP" --infobox "$CLEANTMPMSG" 5 50
	rm -rf  "${TMPD:?}/"*
	wait
	sleep .5

dialog --backtitle "$BACKTITLE" --title "$RESETOPT" --infobox "$RESETOPTMSG" 5 50
	unset_options
	wait
	sleep .5
	clear ||:

   echo "Exit Status ""[ $EXIT_STATUS ]"
   echo "@PROGRAM@ Clean Exit Complete."
   echo ''
   trap - SIGHUP SIGINT SIGQUIT SIGTERM SIGTSTP
   unset EXIT_STATUS
exit
}

#-------------------------------------------------------------- CLEAN TMP FOLDER
clean_tmp() {

	# used to clean ~/jtsdk/tmp folder safely
	rm -rf  "${TMPD:?}/"*

}

#---------------------------------------------------------------- DIALOG RC FILE
make_dialogrc() {

if [[ -f $CFG/.dialogrc ]]; then rm -f "$CFG"/.dialogrc ; fi
touch "$CFG"/.dialogrc

(
cat <<'EOF_DIALOGRC'
aspect = 0
separate_widget = ""
tab_len = 0
visit_items = OFF
use_shadow = ON
use_colors = ON
screen_color = (CYAN,BLUE,ON)
shadow_color = (BLACK,BLACK,ON)
dialog_color = (BLACK,WHITE,OFF)
title_color = (BLUE,WHITE,ON)
border_color = (WHITE,WHITE,ON)
button_active_color = (WHITE,BLUE,ON)
button_inactive_color = (BLACK,WHITE,OFF)
button_key_active_color = (WHITE,BLUE,ON)
button_key_inactive_color = (RED,WHITE,OFF)
button_label_active_color = (YELLOW,BLUE,ON)
button_label_inactive_color = (BLACK,WHITE,ON)
inputbox_color = (BLACK,WHITE,OFF)
inputbox_border_color = (BLACK,WHITE,OFF)
searchbox_color = (BLACK,WHITE,OFF)
searchbox_title_color = (BLUE,WHITE,ON)
searchbox_border_color = (WHITE,WHITE,ON)
position_indicator_color = (BLUE,WHITE,ON)
menubox_color = (BLACK,WHITE,OFF)
menubox_border_color = (WHITE,WHITE,ON)
item_color = (BLACK,WHITE,OFF)
item_selected_color = (WHITE,BLUE,ON)
tag_color = (BLUE,WHITE,ON)
tag_selected_color = (YELLOW,BLUE,ON)
tag_key_color = (BLACK,WHITE,OFF)
tag_key_selected_color = (WHITE,BLUE,ON)
check_color = (BLACK,WHITE,OFF)
check_selected_color = (WHITE,BLUE,ON)
uarrow_color = (GREEN,WHITE,ON)
darrow_color = (GREEN,WHITE,ON)
itemhelp_color = (WHITE,BLACK,OFF)
form_active_text_color = (WHITE,BLUE,ON)
form_text_color = (WHITE,CYAN,ON)
form_item_readonly_color = (CYAN,WHITE,ON)
gauge_color = (BLUE,WHITE,ON)
EOF_DIALOGRC
) > "$CFG"/.dialogrc

# use preset dialog config file
if [ -f "$CFG"/.dialogrc ]; then
	export DIALOGRC="$CFG"/.dialogrc
fi

}



# ------------------------------------------------------- ALIAS COMMAND EXAMPLES
jtsdk_alias_commands() {

if [[ ! -f $DOCS/.jtsdk_aliases ]]; then touch "$DOCS/.jtsdk_aliases" ; fi

(
cat <<'EOF_JTSDK_ALIAS'
# JTSDK EXAMPLE ALIAS COMMANDS
# ============================

# The following alias commands (shorcuts) can be sourced, then used to provide
# shortcuts to build various application targets. This file is only generated
# one time, so you are safe to update it as you see fit.

# To have the commands available when you open a terminal, add the following
# lines to your ~/.bashrc file. Be sure to remove the "#" sign for all
# three lines.

# Alias Command For JTSDK BUild Scripts
# if [[ -f ~/jtsdk/docs/.jtsdk_aliases ]] ; then
#	source ~/jtsdk/docs/.jtsdk_aliases
# fi

# If you want to use the commands without editing the .bashrc file, 
# source the command after opening the terminal with:

# source ~/jtsdk/docs/.jtsdk_aliases


# WSJT-X EXAMPLE COMMANDS
# ========================

# There are virtually thousands of possible combinations that can be used.
# The following is but a small sample of what is possible.

# EXMAPLE-1
# WSJT-X Devel Branch, auto update from SVN = YES
# Run Command: wsjtx-build
alias wsjtx-build='yes |jtsdk-wsjtx -b dev -n wsjtx -c Release -t install'

# EXAMPLE-2
# WSJT-X 1.6.0 GA Release Package, auto update from SVN = YES
# Run command: wsjtx-docs
alias wsjtx-package='yes |jtsdk-wsjtx -b gar -n wsjtx-1.6.0 -c Release -t package'


# EXAMPLE-3
# WSJT-X Devel User Guide, auto update from SVN = NO
# Run command: wsjtx-docs
alias wsjtx-docs='yes n |jtsdk-wsjtx -b dev -n wsjtx -c Release -t docs'


# EXAMPLE-4
# WSJT-X Development Manpages, auto update from SVN = NO
# Run Command: wsjtx-manpages
alias wsjtx-manpages='yes n |jtsdk-wsjtx -b dev -n wsjtx -c Release -t manpages'


# EXAMPLE-5
# WSJT-X User Specified Target, auto update from SVN == NO
#
# With this command, the user must specify the target, if not, the jtsdk-wsjtx
# will assume you want the "Release" target and build the full package
# 
# Some legal targets to consider:
# jt65 jt65code jt65sim jt9 jt9code jt9sim jt4 jt4code jt4sim wsprd wsprd
#
# The run command becomes: wsjtx-custom $1
# Where $1 = the target you specify
# Example: wsjtx-custom jt65sim
alias wsjtx-custom="yes n |jtsdk-wsjtx -b dev -n wsjtx -c Release -t $1"


# EXAMPLE-6
# This example will list what alias commands you have set and are available
alias jtsdk-alias="grep "^alias" ~/jtsdk/docs/.jtsdk_aliases"

# WSJT-S Development Rellated
# Uncomment ( remove # ) then re-source this file

# SVN RELATED
#alias ss='svn.exe status'
#alias sv='svn status |grep "?"'
#alias sa="svn status |grep "A"
#alias sd="svn status |grep "D"
#alias sm="svn status |grep "M"
#alias slog='svn log -l1'
#alias slogr="svn log -r$1"

EOF_JTSDK_ALIAS
) > "$DOCS"/.jtsdk_aliases

}


# --------------------------------------------------------------- MAIN MENU HELP 
main_menu_help() {

if [[ -f $TMPD/main_menu_help.txt ]]; then rm -f "$TMPD/main_menu_help.txt" ; fi
touch "$TMPD/main_menu_help.txt"

(
cat <<'EOF_MAIN_HELP'

INTRODUCTION
------------
 
 * @PROGRAM@ allows you to build most of the WSJT applications through
   an easy to use menu system or direct command line entry. Several build
   options exist for each application.

 * Except for the WSJT-X Super-Build, all WSJT-X builds require Hamlib3
   to be built "before" building then desired version. If Hamlib3 is not
   found in the default location, a message will be displayed prompting you
   to perform the build first. This is true for both menu system and command
   line build.


BUILD DESCRIPTIONS
------------------

 WSJT-X
 
 * Development Branches: using this option, the menu system will list all
   the available development branches from ^/branches/* that can be build with
   the current version of JTSDK. Select a branch, followed by the CMake Type to
   build the combination desired.
 
 * GA and RC Candidates: using this options, the menu system will list all
   the available GA Release and Release Candidate branches from ^/tags that can
   be build with current version of JTSDK. Select a branch, followed by the
   CMake Type to build the combination desired.
 
 * Superbuilds: Superbuilds are available for both Dev and GA/RCCandicates. The
   Superbuilds combine both WSJT-X and Hamlib3 soruce code into one package.
 
 * Custom Builds: This options allows users to enable or disable elemts contain
   with the CMakeLists.txt file. The options are generated dynamically after
   svn checkout or update.
 
 For build specific help, see ADDITIONAL RESOURCES section below
 
 
 WSJT and WSPR v4.0
 
 * Both WSJT and WSPR have many targets. Currently, the build script
   simply runs the install target. Later versions JTSDK may include
   individual targets for each application. However, once configured, users
   can change directories to the source tree then build individual targets
   by calling the Makefile directly.
 
 
 WSPR-X and MAP65
 
 * WSPR-X and MAP65 cannot be built on Linux without applying several
   patches. As such, the builds are classed as "under development" at
   this time. When the source codes has been updated to build on Linux,
   the builds will be enabled.


 Hamlib3
 
 * Hamlib3 is a custom Git repository maintained by Bill (G4WJS). Updates to
   this repo may eventually land in the Official Hamlib libraries, however,
   when the updates will be included is unknown. 

 * There is only one target for building Hamlib3. Selecting via the menu
   system or direct command line entry. Nothing else should eb required.


ADDITIONAL RESOURCES
--------------------

 * @PROGRAM@ @VERSION@ user guide can be found at:

   Location: @DOCDIR@/jtsdk-@VERSION@.html
 
 * The following manpages are also available:
 
   jtsdk(1), jtsdk-wsjtx(1), jtsdk-wsjtx-sb(1), jtsdk-wsjt(1), jtsdk-wspr(1)
   jtsdk-hamlib3(1)
 
 
 WSJT Home Page:
 * http://www.physics.princeton.edu/pulsar/K1JT/

 WSJT Program Development:
 * www.physics.princeton.edu/pulsar/K1JT/wsjtx-doc/wsjt-dev-guide.html

EOF_MAIN_HELP
) > "$TMPD/main_menu_help.txt"

HELP="$TMPD/main_menu_help.txt"
dialog --exit-label DONE --backtitle "$BACKTITLE" --title "$HTITLE" --textbox "$HELP" 20 80

}


# ------------------------------------------------------------- OPTION MENU HELP
options_menu_help() {

if [[ -f $TMPD/options_menu_help.txt ]]; then rm -f "$TMPD/options_menu_help.txt" ; fi
touch "$TMPD/options_menu_help.txt"

(
cat <<'EOF_OPTIONS_HELP'

INTRODUCTION
------------
The options menu allows the users to view and set varuous elements of @PROGRAM@
that control build behaviour. All of the options listed in the menu can also be
set via the command line. Option explinations are as follows:


 * Option Status:
   List the current status of all options

 * Set Options:
   Allows the user to set features that control various aspects of each build
   script. Setting these options, either through the memu system or command line
   affects all scripts.


 * Set Update Timer:
   Using this feature sets the elapsed time in which the WSJT-X
   Menus will be updated each JTSDK is start.

   The default timer is ( 1440 ) expreseed in *Minutes*, or
   once every day. Daily is (recommended)


 * Set CPU Cores:
   Using this feature sets the number of CPU cores to be used
   in parallel compiling, for example

   make -jx   or  cmake --build . -- -j xx

   This can have adverse affects on low resource systems such
   as SoC ARM devices. For low resource systems, consider using
   ( 3 or 2 ), for all others systems (4) should be OK.


 * Update WSJT-X Menus
   This function updates several WSJT-X menus from the
   SourceForge WSJT repository ^/tags and ^/branches.

   When the event timer is reached, JTSDK will automatically
   update the menu entries the next time it is launched.
   The default update interval is set to [ 1440 ] minutes
   or 24 hours / once per day.


ADDITIONAL RESOURCES
--------------------

 * @PROGRAM@ @VERSION@ user guide can be found at:

   Location: @DOCDIR@/jtsdk-@VERSION@.html
 
 * The following manpages are also available:
 
   jtsdk(1), jtsdk-wsjtx(1), jtsdk-wsjtx-sb(1), jtsdk-wsjt(1), jtsdk-wspr(1)
   jtsdk-hamlib3(1)
 
 
 WSJT Home Page:
 * http://www.physics.princeton.edu/pulsar/K1JT/

 WSJT Program Development:
 * www.physics.princeton.edu/pulsar/K1JT/wsjtx-doc/wsjt-dev-guide.html

EOF_OPTIONS_HELP
) > "$TMPD/options_menu_help.txt"

OMHELP="$TMPD/options_menu_help.txt"
dialog --exit-label DONE --backtitle "$BACKTITLE" --title "$OMTITLE" --textbox "$OMHELP" 20 80

}


# ------------------------------------------------------------ WSJT-X BUILD LIST
generate_build_lists() {

# check that each menu is present, if not, regenerate it
if [[ ! -f $CFG/time-stamp ]] || [[ ! -f $CFG/dev_list.txt ]] || \
[[ ! -f $CFG/ga_rc_list.txt ]] || [[ ! -f $CFG/sb_dev_list.txt ]] || \
[[ ! -f $CFG/sb_ga_rc_list.txt ]] || [[ ! -f $CFG/combined_list.txt ]] || 
[[ $(find $CFG/time-stamp -mmin +$GENTIME) != "" ]]
then

# these branches are not supported by the Superbuild script
	dev_exclude_array=('wsjtx-1.3' 'wsjtx-1.4' 'wsjtx_k1jt_p1' 'wsjtx-superbuild' 'wsjtx_w')

	clear ||:
	echo '-----------------------------------------------------------'
	echo -e ${C_G}' WSJT-X Build Menu Update via Sourceforge'${C_NC}
	echo '-----------------------------------------------------------'
	echo ''
	echo ' This function updates several WSJT-X menus from the'
	echo ' SourceForge WSJT repository ^/tags and ^/branches.'
	echo ''
	echo ' When the event timer is reached, JTSDK will automatically'
	echo ' update the menu entries the next time it is launched.'
	echo ' The default update interval is set to [ 1440 ] minutes'
	echo ' or 24 hours / once per day.'
	echo ''
	echo ' You can manually update the menus at any time by using'
	echo ' the following command: jtsdk -u' 
	echo ''
	echo ' Please be patient while the update runs, this can'
	echo ' take a few seconds depending on your Internet speed'
	echo ' and access to Sourceforge'
	echo ''

# test Internet connection first
	wget -q --tries=5 --timeout=10 -O - http://google.com > /dev/null 2>&1
	if [[ $? -eq 0 ]]; then
		echo -e "$CHK1 Internet Connection"
	else
		echo -e " * Internet Connection - $CHK2"
		echo ''
		echo ' You must have access to the Internet to update'
		echo ' the WSJT-X menus. The script will continue, but'
		echo ' you *will not* be able to update from Sourceforge'
		echo ''
		echo ' If you have not had a successful JTSDK update at least'
		echo ' one time before, you may not have menu entries available'
		echo ' for WSJT-X builds'
		echo ''
		read -rp "Press [ Enter ] to continue ..."
		exit 1
	fi

# test access to Sourceforge WSJT SVN repository
	svn list http://svn.code.sf.net/p/wsjt/wsjt > /dev/null 2>&1
	if [[ $? -eq 0 ]]; then
		echo -e "$CHK1 Sourceforge Access"
	else
		echo -e " * Sourceforge Access - $CHK2"
		echo ''
		echo ' You must have access to SF SVN repositories to update'
		echo ' the WSJT-X menus. The script will continue, but'
		echo ' you *will not* be able to perform updates'
		echo ''
		read -rp "Press [ Enter ] to continue ..."
		exit 1
	fi

# generate Devel lists
	if [[ ! -f $CFG/dev_list.txt ]] || [[ ! -f $CFG/time-stamp ]] ; then
		UTYPE='Generating'
	else 
		UTYPE='Updating'
	fi
	echo -e "$CHK1 $UTYPE Dev Lists"
	
	svn list "$BRANCHES"| grep ^wsjtx | sed 's:/*$::' | sort > "$TMPD"/dev_list.txt
	echo "Back" >> "$TMPD"/dev_list.txt
	
# exclude some branches
	for i in "${dev_exclude_array[@]}"
	do
		sed -i '/^'"$i"'/d' "$TMPD"/dev_list.txt
	done
	
# copy final menu to the config dir
	cp -u "$TMPD"/dev_list.txt "$CFG"

# generate GA and RC List
	if [[ ! -f $CFG/ga_rc_list.txt ]] || [[ ! -f $CFG/time-stamp ]] ; then
		UTYPE='Generating'
	else 
		UTYPE='Updating'
	fi
	echo -e "$CHK1 $UTYPE GA and RC List"
	svn list "$TAGS" | grep "^wsjtx-[1-9]\.[5-9]\.[0-9]" | sed 's:/*$::' > "$TMPD"/ga_rc_list.txt
	echo "Back" >> "$TMPD"/ga_rc_list.txt
	cp -u "$TMPD"/ga_rc_list.txt $CFG

# generate Superbuild Dev List
	if [[ ! -f $CFG/sb_dev_list.txt ]] || [[ ! -f $CFG/time-stamp ]] ; then
		UTYPE='Generating'
	else 
		UTYPE='Updating'
	fi
	echo -e "$CHK1 $UTYPE Superbuild Dev List"

	svn list "$BRANCHES" | grep ^wsjtx | sed 's:/*$::' | sort > "$TMPD"/sb_dev_list.txt
	echo "Back" >> "$TMPD"/sb_dev_list.txt
	
# exclude some branches
	for i in "${dev_exclude_array[@]}"
	do
		sed -i '/^'"$i"'/d' "$TMPD"/sb_dev_list.txt
	done
	
	# copy final menu to the config dir
	cp -u "$TMPD"/sb_dev_list.txt "$CFG"
	
# Generate Superbuild GA and RC List
	if [[ ! -f $CFG/sb_ga_rc_list.txt ]] || [[ ! -f $CFG/time-stamp ]] ; then
		UTYPE='Generating'
	else 
		UTYPE='Updating'
	fi
	echo -e "$CHK1 $UTYPE Superbuild GA and RC List"

	svn list "$TAGS" | grep "^wsjtx-[1-9]\.[5-9]" | sed 's:/*$::' > "$TMPD"/sb_ga_rc_list.txt
	echo "Back" >> "$TMPD"/sb_ga_rc_list.txt

# copy final menu to the config dir
	cp -u "$TMPD"/sb_ga_rc_list.txt "$CFG"
	
	# create a time stamp file
	touch "$CFG"/time-stamp
	echo ''

# getopts combined list 
	if [[ -f $CFG/combined_list.txt ]] ; then 
		rm -f $CFG/combined_list.txt
	fi

# combine the lists
	cat "$CFG/ga_rc_list.txt" "$CFG/dev_list.txt" \
	|sort |uniq |sed '/Back/d' > "$CFG/combined_list.txt"

fi

}

# ------------------------------------------------------------- WSJT-X MAIN MENU
wsjtx_main_menu() {
	
	# remove previous selections each time the function is called
	unset MM_WSJTX
	unset WSJTX_SELECT
	
	MM_WSJTX=(
	1 "Development Branches" \
	2 "GA and RC Candidates" \
	3 "Superbuilds" \
	4 "Custom Build" \
	H "Help" \
	B "Back"
	)
	
	WSJTX_SELECT=$(
	dialog --ok-label SELECT \
	--no-cancel \
	--backtitle "$BACKTITLE" \
	--title "$WSJTXTITLE" \
	--menu "$MENUMSG" 0 50 0 \
	"${MM_WSJTX[@]}" 2>&1 > /dev/tty
	)

}

# -------------------------------------------------------------- WSJT-X DEV MENU 
wsjtx_dev_menu() {

# remove previous selections each time the function is called
	unset BRANCH
	unset TARGET
	unset TARGET_MENU
	unset dev_array
	
# generate dev_list array
	dev_array=()
	while read -r a b ; do dev_array+=("$a" "$b") ; done < $CFG/dev_list.txt

# select which ^/branches/$BRANCH to build
	BRANCH=$(
	dialog 	--ok-label "Select" \
	--no-cancel \
	--backtitle "$BACKTITLE" \
	--title "  WSJT-X DEVELOPMENT SELECTION" \
	--menu "$MENUMSG" 0 55 0 \
	"${dev_array[@]}" 2>&1 > /dev/tty
	)

	case "$BRANCH" in
		Back)
			return 0
		;;

# select what target to build
		*) 
			TARGET_MENU=(
			1 "Release Type" \
			2 "Debug Type" \
			3 "User Guide" \
			4 "Package" \
			B "Back"
			)

			TARGET=$(
			dialog --ok-label SELECT \
			--no-cancel \
			--backtitle "$BACKTITLE" \
			--title "$WSJTXTITLE" \
			--menu "$MENUMSG" 0 50 0 \
			"${TARGET_MENU[@]}" 2>&1 > /dev/tty
			)

		;;
	esac
	
# send the build command to jtsdk-wsjtx script
	case $TARGET in
		1)
			jtsdk-wsjtx -b dev -n "$BRANCH" -c Release -t install
			echo ''		
			read -p " Press [ Enter ] to continue..."
		;;

		2)
			jtsdk-wsjtx -b dev -n "$BRANCH" -c Debug -t install
			echo ''		
			read -p " Press [ Enter ] to continue..."
		;;

		3)
			jtsdk-wsjtx -b dev -n "$BRANCH" -c Release -t docs
			echo ''		
			read -p " Press [ Enter ] to continue..."
		;;

		4)
			jtsdk-wsjtx -b dev -n "$BRANCH" -c Release -t package
			echo ''		
			read -p " Press [ Enter ] to continue..."
		;;
			
		Back)
			return 0
		;;
	esac
}

#---------------------------------------------------------------- GA and RC MENU
wsjtx_ga_rc_menu() {

# remove previous selections each time the function is called
	unset BRANCH
	unset TARGET
	unset TARGET_MENU
	unset ga_rc_array
	
# generate GA and RC list array
	ga_rc_array=()
	while read -r a b ; do ga_rc_array+=("$a" "$b") ; done < $CFG/ga_rc_list.txt

# select which ^/tags/$BRANCH to build
	BRANCH=$(
	dialog 	--ok-label "Select" \
	--no-cancel \
	--backtitle "$BACKTITLE" \
	--title "  WSJT-X GA and RC SELECTION" \
	--menu "$MENUMSG" 0 55 0 \
	"${ga_rc_array[@]}"  2>&1 > /dev/tty
	)

# select the target to build
	case "$BRANCH" in
		Back)
			return 0
		;;
		
		*)
			TARGET_MENU=(1 "Release Type" 2 "Package" B "Back")
			TARGET=$(
			dialog --ok-label SELECT \
			--no-cancel \
			--backtitle "$BACKTITLE" \
			--title "$WSJTXTITLE" \
			--menu "$MENUMSG" 0 50 0 \
			"${TARGET_MENU[@]}" 2>&1 > /dev/tty
			)
		;;
	esac

# send command to the build script
	case $TARGET in
		Back)
			return 0
		;;
		
		1)
			jtsdk-wsjtx -b gar -n "$BRANCH" -c Release -t install
			echo ''		
			read -p " Press [ Enter ] to continue..."
		;;

		2)
			jtsdk-wsjtx -b gar -n "$BRANCH" -c Release -t package
			echo ''		
			read -p " Press [ Enter ] to continue..."
		;;
	esac

}

#--------------------------------------------------------------- SUPERBUILD MENU
superbuild_menu() {

# remove previous selections each time the function is called
	unset BRANCH
	unset TARGET
	unset SB_MENU
	unset SB_MEN_SELECT
	unset sb_dev_array
	unset sb_ga_rc_array

# Dev List Array
	sb_dev_array=()
	while read -r a b ; do sb_dev_array+=("$a" "$b") ; done < $CFG/sb_dev_list.txt

# GA and RC List Array
	sb_ga_rc_array=()
	while read -r a b ; do sb_ga_rc_array+=("$a" "$b") ; done < $CFG/sb_ga_rc_list.txt

# display the menu
	SB_MENU=(1 "Development Branches" 2 "GA and RC Candidates" B "Back")
	
	SB_MENU_SELECT=$(
	dialog --ok-label SELECT \
	--no-cancel \
	--backtitle "$BACKTITLE" \
	--title "$SBTITLE" \
	--menu "$MENUMSG" 0 50 0 \
	"${SB_MENU[@]}" 2>&1 > /dev/tty
	)
	
# setup for either Dev, RC and GA-Release Branches
	case $SB_MENU_SELECT in
		Back)
			return 0
		;;

 # Development Branch Selection
		1)
			SBTITLE="  WSJT-X SUPERBUILD DEV"
			
			BRANCH=$(
			dialog 	--ok-label "Select" \
			--no-cancel \
			--backtitle "$BACKTITLE" \
			--title "$SBTITLE" \
			--menu "$MENUMSG" 0 55 0 \
			"${sb_dev_array[@]}"  2>&1 > /dev/tty
			)

# send command to the build script
			case "$BRANCH" in 
				Back)
					return 0
				;;
				
				*) 
					jtsdk-wsjtx-sb dev "$BRANCH" build
				;;
			esac
		;;

# GA and RC Candidates Selection
		2) 
			SBTITLE="  WSJT-X SUPERBUILD GA and RC"

			BRANCH=$(
			dialog 	--ok-label "Select" \
			--no-cancel \
			--backtitle "$BACKTITLE" \
			--title "$SBTITLE" \
			--menu "$MENUMSG" 0 55 0 \
			"${sb_ga_rc_array[@]}" 2>&1 > /dev/tty
			)
			
# send command to the build script
			case "$BRANCH" in 
				Back)
					return 0
				;;
				
				*)
					jtsdk-wsjtx-sb garc "$BRANCH" build
				;;
			esac
		
		;;

	esac

}

# ---------------------------------------------------- WSJT-X CUSTOM CONFIG MENU 
wsjtx_custom_config() {
# Set wsjtx-custom, clean and rcfg before starting.
touch "$CFG/wsjtx-custom"

# remove previous selections each time the function is called
	unset BRANCH
	unset TARGET
	unset TARGET_MENU
	unset dev_array
	
# generate dev_list array
	dev_array=()
	while read -r a b ; do dev_array+=("$a" "$b") ; done < $CFG/dev_list.txt

# select which ^/branches/$BRANCH to build
	BRANCH=$(
	dialog 	--ok-label "Select" \
	--no-cancel \
	--backtitle "$BACKTITLE" \
	--title "  WSJT-X DEVELOPMENT SELECTION" \
	--menu "$MENUMSG" 0 55 0 \
	"${dev_array[@]}" 2>&1 > /dev/tty
	)

	case "$BRANCH" in
		Back)
			return 0
		;;

# select what target to build
		*) 
			TARGET_MENU=(
			1 "Release Type" \
			2 "Debug Type" \
			B "Back"
			)

			TARGET=$(
			dialog --ok-label SELECT \
			--no-cancel \
			--backtitle "$BACKTITLE" \
			--title "$WSJTXTITLE" \
			--menu "$MENUMSG" 0 50 0 \
			"${TARGET_MENU[@]}" 2>&1 > /dev/tty
			)

		;;
	esac
	
# send the build command to jtsdk-wsjtx script
	case $TARGET in
		1)
			jtsdk-wsjtx -b dev -n "$BRANCH" -c Release -t install
			echo ''		
			read -p " Press [ Enter ] to continue..."
		;;

		2)
			jtsdk-wsjtx -b dev -n "$BRANCH" -c Debug -t install
			echo ''		
			read -p " Press [ Enter ] to continue..."
		;;
		Back)
			return 0
		;;
	esac
}

#----------------------------------------------------- COMMAND LINE OPTIONS HELP
cli_help() {

clear ||:
echo '-------------------------------------------------------------------------'
echo -e ${C_Y}' COMMAND LINE HELP'${C_NC}
echo '-------------------------------------------------------------------------'
echo ''
cat <<EOF
 Usage ....: jtsdk [-h] [-c] [-l] [-t] [-u] [-e FEATURE ] [-d FEATURE ]
 Example ..: jtsdk -e autosvn -e clean -d autorun

 FEATURES
  autorun autosvn clean docs manpages quiet rcfg skipsvn separate 
 
 OPTIONS
  -h  displays this message
  -c  set number of cpus used in compiling, resets JJ=x
  -l  list current user option status
  -t  set WSJT-X menu update frequency ( expressed in minutes )
  -u  update WSJT-X build lists
  -e  enable  [FEATURE]
  -d  disable [FEATURE]

  For more details, see: man jtsdk

EOF

exit 0

}


#----------------------------------------------------------- LIST GLOBAL OPTIONS
list_option_status() {
clear ||:
echo '-----------------------------------------------------------'
echo -e ${C_Y}' CURRENT OPTION STATUS'${C_NC}
echo '-----------------------------------------------------------'
echo ''
echo ' Usage ......: jtsdk -e [FEATURE] [-d FEATURE]'
echo ' Example ....: jtsdk -e autosvn -e clean -d autorun'
echo ''
# options are set to Yes / No for display purposes only
# each build script resets these variables at run time
if [[ -f $CFG/autorun ]] ; then AUTORUN='Enabled' ; else AUTORUN='--' ; fi
if [[ -f $CFG/autosvn ]] ; then AUTOSVN='Enabled' ; else AUTOSVN='--' ; fi
if [[ -f $CFG/clean ]] ; then CLEAN='Enabled' ; else CLEAN='--' ; fi
if [[ -f $CFG/cores ]] ; then CORES=$(awk 'FNR==1 {print $0}' < $CFG/cores) ; else CORES="$JJ" ; fi
if [[ -f $CFG/docs ]] ; then DOCS='Enabled' ; else DOCS='--' ; fi
if [[ -f $CFG/manpages ]] ; then MANPAGES='Enabled' ; else MANPAGES='--' ; fi
if [[ -f $CFG/quiet ]] ; then QUIET='Enabled' ; else QUIET='--' ; fi
if [[ -f $CFG/rcfg ]] ; then RCFG='Enabled' ; else RCFG='--' ; fi
if [[ -f $CFG/separate ]] ; then SEPARATE='Enabled' ; else SEPARATE='--' ; fi
if [[ -f $CFG/skipsvn ]] ; then SKIPSVN='Enabled' ; else SKIPSVN='--' ; fi
if [[ -f $CFG/gentime ]] ; then GENTIME=$(awk 'FNR==1 {print $0}' < $CFG/gentime) ; else GENTIME="$GENTIME" ; fi

# calculate wsjt-x menu gentime in minutes, hours and days
GMIN=$(($GENTIME))
GHRS=$(($GENTIME / 60))
GDAYS=$(($GENTIME / 1440))

# WSJT-X last menu update
if [[ -f $CFG/time-stamp ]] ; then
	LASTUPDATE=$(stat -c %y $CFG/time-stamp)
	LASTUPDATE=${LASTUPDATE%% *}
else
	LASTUPDATE='File Missing, try updating'
fi
# WSJT-X dev and GA / RC branch count
if [[ -f $CFG/dev_list.txt ]] ; then
	D_LIST=$(wc -l < $CFG/dev_list.txt)
else
	D_LIST="File Missing, try updating"
fi
if [[ -f $CFG/ga_rc_list.txt ]] ; then
	G_LIST=$(wc -l < $CFG/ga_rc_list.txt)
else
	G_LIST="File Missing, try updating"
fi

# display data
echo ' GLOBAL OPTIONS'
echo "  autorun .........: $AUTORUN"
echo "  autosvn .........: $AUTOSVN"
echo "  clean ...........: $CLEAN"
echo "  docs ............: $DOCS"
echo "  manpages ........: $MANPAGES"
echo "  quiet ...........: $QUIET"
echo "  rcfg ............: $RCFG"
echo "  separate ........: $SEPARATE"
echo "  skipsvn .........: $SKIPSVN"
echo "  cores ...........: ($CORES)"
echo "  gentime .........: ($GENTIME m) / ($GHRS h) / ($GDAYS d)"
echo ''
echo ' WSJT-X MENU STATUS'
echo "  Last Update .....: $LASTUPDATE"
echo "  Dev Branches ....: $D_LIST"
echo "  GA/RC Branches ..: $G_LIST"
echo ''
echo ' OPTION HELP ......: jtsdk -h'
echo ''
}

#----------------------------------------------------------------- SET CPU CORES
set_cpu_cores() {

# used to set the number of cpu cores to be used during parallel compiling.

cpus=$(grep -c proc /proc/cpuinfo)
maxcpus=$(($cpus + 1))
ALT1=$(($cpus - 1))
ALT2=$(($cpus - 2 ))
clear ||:
echo '-----------------------------------------------------------'
echo -e ${C_Y}' SETTING CUSTOM CPU SELECTION'${C_NC}
echo '-----------------------------------------------------------'
echo ''
echo ' Using this feature sets the number of CPU cores to be used'
echo ' in parallel compiling, for example'
echo ''
echo  ' make -jx   or  cmake --build . -- -j x'
echo ''
echo ' This can have adverse affects on low resource systems such'
echo ' as SoC ARM devices. For low resource systems, consider using'
echo " ( $ALT1 or $ALT2 ), for all others systems ($cpus) should be OK."
echo ''
echo ' The default is always set to the physical number of cores'
echo ' available on the system. Max = ( Physical + 1 )'
echo ''
echo "* Your max value should be no more than ...: $maxcpus"
echo "* Suggested number of cores is between ....: 1 and $maxcpus"
echo -n "* Set the number of cores, default is ..... [ $cpus ] : "
read input

# input entered, check it is at least an integer
if [[ ! -z $input ]] ; then
	if [ $input -eq $input 2>/dev/null ] ; then
		echo "* Doing sanity check for: $input"
	else
		echo ''
		echo "ERROR: this does not look right:"
		echo ''
		echo " $input"
		echo ''
		echo " Try using something between: ( 1 to $cpus )"
		echo ''
	fi
fi

# input entered, check integer, check if between 1 and 4
if [[ ! -z $input ]] ; then
	if [ $input -eq $input 2>/dev/null ] && [ $input -gt "0" 2>/dev/null ] && \
	[ $input -lt $maxcpus 2>/dev/null ] ; then
		echo ''
		echo -e "$CHK1  Setting CPU Cores to: $input"
		rm -rf "$CFG/cores" > /dev/null 2>&1
		touch "$CFG/cores" ; echo $input > "$CFG/cores"
		echo ''
	fi
fi

# input entered, check integer, less than 1
if [[ ! -z $input ]] ; then
	if [ $input -eq $input 2>/dev/null ] && [ $input -lt "1" 2>/dev/null ] ; then
		echo ''
		echo 'ERROR'
		echo -e "$CHK2 Cannot set CPU Cores to ...: 0"
		echo -e " $CHK1  Setting default value to ..: $cpus"
		rm -rf "$CFG/cores" > /dev/null 2>&1
		touch "$CFG/cores" ; echo $cpus > "$CFG/cores"
		echo ''
	fi
fi

# input entered, check integer, but if > than MAX number of CPUs, warn and accept
if [[ ! -z $input ]] ; then
	if [ $input -eq $input 2>/dev/null ] && [ $input -gt "$cpus" 2>/dev/null ] ; then
		echo ''
		echo -e "$CHK1 Warning, CPU cores > ...........: $cpus"
		echo -e "$CHK1 Setting CPU cores as you wish ..: $input"
		rm -rf "$CFG/cores" > /dev/null 2>&1
		touch "$CFG/cores" ; echo $input > "$CFG/cores"
		echo ''
	fi
fi

# set default value of input is empty
if [[ -z $input ]] ; then
	echo ''
	echo -e "$CHK1  Default accepted."
	echo -e "$CHK1  Setting core value to ..: $cpus"
	rm -rf "$CFG/cores" > /dev/null 2>&1
	touch "$CFG/cores" ; echo $cpus > "$CFG/cores"
	echo ''
fi	

}


#--------------------------------------------------------- WSJT-X MENU GEN TIMER
set_gentime() {

# used to set the WSJT-X update
default_gentime='1440'
gmax='43800'
clear ||:
echo '-----------------------------------------------------------'
echo -e ${C_Y}' SET WSJT-X MENU UPDATE FREQUENCY'${C_NC}
echo '-----------------------------------------------------------'
echo ''
echo ' Using this feature sets the elapsed time in which the WSJT-X'
echo ' menus will be updated each JTSDK is start.'
echo ''
echo " The default timer is ( 1440 ) expreseed in *Minutes*, or"
echo ' once every day. Daily is (recommended)'
echo ''
echo ' Once every hour ..: 60'
echo ' Once per Day .....: 1440'
echo ' Once per Week.....: 10080'
echo ''
echo ' * To accept the default setting, press the [ ENTER ] key'
echo " * Suggested Update frequency ........: 1440"
echo -n " * Set new update timer, default is .. [ $default_gentime ] : "
read input

# input entered, check it is at least an integer
if [[ ! -z $input ]] ; then
	if [ $input -eq $input 2>/dev/null ] ; then
		echo " * Doing sanity check for: $input"
	else
		echo ''
		echo "ERROR: this does not look right:"
		echo ''
		echo " $input"
		echo ''
		echo " Try using something between: ( 60 and $GENTIME )"
		echo ''
	fi
fi

# input entered, check integer, check if between 1 and $gmax
if [[ ! -z $input ]] ; then
	if [ $input -eq $input 2>/dev/null ] && [ $input -gt "0" 2>/dev/null ] && \
	[ $input -lt "$gmax" 2>/dev/null ] ; then
		echo ''
		echo -e "$CHK1  Setting update timer to: $input"
		rm -rf "$CFG/gentime" > /dev/null 2>&1
		touch "$CFG/gentime" ; echo $input > "$CFG/gentime"
		echo ''
	fi
fi

# input entered, check integer, less than 1
if [[ ! -z $input ]] ; then
	if [ $input -eq $input 2>/dev/null ] && [ $input -lt "1" 2>/dev/null ] ; then
		echo ''
		echo 'ERROR'
		echo -e "$CHK2  Timer settings cannot be ...: 0"
		echo -e " $CHK1  Setting default value to ..: 1440"
		rm -rf "$CFG/gentime" > /dev/null 2>&1
		touch "$CFG/gentime" ; echo $default_gentime > "$CFG/gentime"
		echo ''
	fi
fi

# input entered, check integer, but if > than MAX number of hours, warn and accept
if [[ ! -z $input ]] ; then
	if [ $input -eq $input 2>/dev/null ] && [ $input -gt "$gmax" 2>/dev/null ] || \
	[ $input -eq "$gmax" 2>/dev/null ] ; then
		GTDAYS=$(($input / 1440))
		echo ''
		echo -e "$CHK1  ( $GTDAYS days ) is a long time between updates!!"
		echo -e "$CHK1  Setting timer as you asked ..: $input"
		rm -rf "$CFG/gentime" > /dev/null 2>&1
		touch "$CFG/gentime" ; echo $input > "$CFG/gentime"
		echo ''
	fi
fi

# set default value of input is empty
if [[ -z $input ]] ; then
	echo ''
	echo -e "$CHK1  Default accepted."
	echo -e "$CHK1  Setting timer to ..: $default_gentime"
	rm -rf "$CFG/gentime" > /dev/null 2>&1
	touch "$CFG/gentime" ; echo $default_gentime > "$CFG/gentime"
	echo ''
fi	

}

#-------------------------------------------------------- USER OPTIONS PICK LIST
user_options_picklist() {

n=1
set +u
for opt in "${jtsdk_array[@]}"
do
		if [[ -f $CFG/$opt ]] ; then status="On" ; else status="Off" ; fi
        list="$list $opt $status $n"
		n=$[n+1]

done

options=$(dialog --backtitle "$BACKTITLE" \
--title "$OPICKTITLE" \
--ok-label " Enter to Save " \
--no-cancel \
--stdout \
--checklist "$OPICKMSG" 0 65 10 $list)

if [[ $? -eq 0 ]]; then
	for i in $options
	do
		if [[ -f $CFG/$i ]] ; then
			rm -f "$CFG/$i"
			disabled_array+=($i)
		else
			touch "$CFG/$i"
			enabled_array+=($i)
		fi
	done
fi
unset list
set -u

}


################################################################################
#
# START MAIN SCRIPT
#
################################################################################

# set traps
trap sig_catch_cleanup SIGHUP SIGINT SIGQUIT SIGTERM SIGTSTP

# set shell options
set_options

# dialog check
dialog_chk

# make directories
make_dirs

# generate dialog rc
make_dialogrc

# generate SB Dev, SB GA and RC lists from Sourceforge
generate_build_lists

# generate example aliases file $DOCS/.jtsdk_aliases
jtsdk_alias_commands

#------------------------------------------------------------------ USER OPTIONS

# These options are used more in a global sense rather than affecting the main
# JTSDK script itself. See descriptions below for more details.
#
# CLI OPTIONS
#  -h  displays this message
#  -c  set number of cpus used in compiling, resets JJ=x
#  -l  list current user option status
#  -u  update wsjt build list
#  -t  set WSJT-X menu update timer
#  -e  enable  [FEATURE]
#  -d  disable [FEATURE]
#
# ENABLE / DISABLE FEATURES
#   autorun ...: run the package after the build finishes
#   autosvn ...: automatically update from svn
#   skipsvn ...: skip svn update completely
#   clean .....: clean the build tree / source location before building
#   rcfg ......: re-run the configure script before running $(MAKE) / cmake --build .
#   separate ..: separate builds by both Version + SVN revision
#   quiet .....: suppress or in some cases, eliminate on screen messages
#   manpages ..: enable / disable building manpages
#   docs ......: enable / disable building user guides
#
# FEATURE ARRAY
jtsdk_array=('autorun' 'autosvn' 'skipsvn' 'clean' 'rcfg' 'separate' 'quiet' 'manpages' 'docs')

# getopts specific items vars
earray=()
darray=()
COPT='0'
CPUX='0'
HOPT='0'
UOPT='0'
LOPT='0'
MOPT='0'
DOPT='0'
TOPT='0'

clear ||:
echo '-----------------------------------------------------------'
echo -e ${C_Y}' CHECKING COMMAND LINE OPTIONS'${C_NC}
echo '-----------------------------------------------------------'
echo ''

# start the main getops loop
while getopts ":hclute:d:" opt ; do
	case $opt in
		c) COPT='1' ;; # change cpu cores
		u) UOPT='1' ;; # update WSJT-X menus
		h) HOPT='1' ;; # display help message
		l) LOPT='1' ;; # list options currently selected
		t) TOPT='1' ;; # set WSJT-X menu update timer
		
# enable user options
		e)
			for i in ${jtsdk_array[@]} ; do
				if [ $i == $OPTARG ] ; then e_array+=("$OPTARG") ; fi
			done
		 ;;
# disable user options
		d)
			for i in ${jtsdk_array[@]} ; do
				if [ $i == $OPTARG ] ; then d_array+=("$OPTARG") ; fi
			done
		 ;;
# unknown command line switch
		\? )
			echo " Invalid Command ..: ( -$OPTARG )"  1>&2
			echo ' For Help Use .....: jtsdk -h'
			echo ''
			exit 1
		;;
		
# invalid syntax
		: )
			echo " Invalid Syntax ..: ( -$OPTARG ) requires an argument" 1>&2
			echo ' For Help Use ....: jtsdk -h'
			echo ''
			exit 1
	esac
done

# TO-DO: look at converting these to ( case $opt in  )
# shift off the options
shift "$(($OPTIND-1))"

# -c option sets the nummber of cpu cores for parallel compiling
if [[ $COPT -eq 1 ]] ; then 
	set_cpu_cores
	exit 0
fi

# -h display cli help message
if [[ $HOPT -eq 1 ]] ; then
	cli_help
	exit 0
fi

# -l list status of user options
if [[ $LOPT -eq 1 ]] ; then
	list_option_status
	exit 0
fi

# -t updates WSJT-X menu generation timer
if [[ $TOPT -eq 1 ]] ; then
	set_gentime
	exit 0
fi

# -u updates wsjt-x build list
if [[ $UOPT -eq 1 ]] ; then 
	rm -f "$CFG/time-stamp" > /dev/null 2>&1
	generate_build_lists
	exit 0
fi

# -e option ( enable x )
if [[ ! -z ${e_array[@]-} ]] ; then
	echo -n -e $CHK1"  Enable Option(s) ...: "
	for i in "${e_array[@]-}" ; do
		echo -n "$i "
		touch "$CFG/$i" > /dev/null 2>&1
	done
echo ''
fi

# -d option ( disable x)
if [[ ! -z ${d_array[@]-} ]] ; then
	echo -n -e $CHK2" Disable Option(s) ..: "
	for i in "${d_array[@]-}" ; do
		echo -n "$i "
		rm -f "$CFG/$i" > /dev/null 2>&1
	done
echo ''
fi

# exit if either -e or -d options were used
if [[ ! -z ${e_array[@]-} ]] || [[ ! -z ${d_array[@]-} ]] ; then
	echo ''
	exit 0
fi



#---------------------------------------------------------------- DRAW MAIN MENU
clear ||:
while [ 0 ]; do

MM_OPTIONS=( 1 "WSJT" 2 "WSPR" 3 "WSJT-X" 4 "HAMLIB-3" O "Options" H "Help" E "Exit")
OM_OPTIONS=( 1 "Option Status" 2 "Set Options" 3 "Set Update Timer" 4 "Set CPU Cores" 5 "Update WSJT-X Menus" H "Help" E "Exit Options")

MM_SELECT=$(
dialog --ok-label SELECT \
--nocancel \
--backtitle "$BACKTITLE" \
--title "$MMTITLE" \
--menu "$MENUMSG" 0 50 0 \
"${MM_OPTIONS[@]}" 2>&1 > /dev/tty
)

# run function based on the users selection
case "$MM_SELECT" in
	1) #---------------------------------------------------------- WSJT MENU (1)
		jtsdk-wsjt
		echo ''		
		read -p " Press [ Enter ] to continue..."
		continue
	;;

	2) # --------------------------------------------------------- WSPR MENU (2)
		jtsdk-wspr
		echo ''		
		read -p " Press [ Enter ] to continue..."
		continue
	;;
	
	3) #-------------------------------------------------------- WSJT-X MENU (3)
		wsjtx_main_menu

		# present build options based on wsjtx_main_menu selection
		case $WSJTX_SELECT in
			1) # Development Branch Builds
				wsjtx_dev_menu
				continue
			;;
		
			2) # GA and Release Candidates Builds
				wsjtx_ga_rc_menu
				continue
			;;
	
			3) # Superbuild Menu
				superbuild_menu
				continue
			;;
	
			4) # Custom Configuration Menu
				wsjtx_custom_config
				continue
			;;

			Back)
				continue
			;;
		esac
	;;
		
	4) #----------------------------------------------------- HAMLIB-3 BUILD (4)
		jtsdk-hamlib3
		echo ''		
		read -p " Press [ Enter ] to continue..."
		continue ;;

	O) #------------------------------------------------- LIST OPTION STATUS (O)

		OM_SELECT=$(
		dialog --ok-label SELECT \
		--nocancel \
		--backtitle "$BACKTITLE" \
		--title "$OMTITLE" \
		--menu "$MENUMSG" 0 50 0 \
		"${OM_OPTIONS[@]}" 2>&1 > /dev/tty
		)

		case "$OM_SELECT" in
			1)
				list_option_status
				echo ''		
				read -p " Press [ Enter ] to continue..."
		
			;;
			2)
				user_options_picklist
				continue
			;;
			3)
				set_gentime
				echo ''		
				read -p " Press [ Enter ] to continue..."
				continue
			;;
			4)
				set_cpu_cores
				echo ''		
				read -p " Press [ Enter ] to continue..."
				continue
			;;
			5)
				rm -f "$CFG/time-stamp" > /dev/null 2>&1
				generate_build_lists
				echo ''		
				read -p " Press [ Enter ] to continue..."
				continue
			;;
			H)
				options_menu_help
				continue
			;;

			E)
				continue
			;;
		esac
	;;

	H) #--------------------------------------------------------------- HELP (H)
		main_menu_help
		continue ;;

	E) #--------------------------------------------------------------- EXIT (E)
		clean_exit ;;
esac

done

