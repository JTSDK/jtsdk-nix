#! /usr/bin/env bash
#
# Name ..........: jtsdk-wsjtx
# Execution .....: Called from JTSDK Main Script
# Copyright .....: @COPYRIGHT@
# License .......: @LICENSE@
# Contributors ..: @AUTHORS@
# Comment .......: Part of the JTSDK Linux Project
#
# jtsdk-wsjtx is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation either version 3 of the License, or
# (at your option) any later version. 
#
# jtsdk-wsjtx is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#-------------------------------------------------------------------------#

set -e

# grab the number of command line arguments
NARGS=$#

# set home and directory paths
HOMEDIR=~/jtsdk
SRCD="$HOMEDIR/src"
TMPD="$HOMEDIR/tmp"
LOGS="$HOMEDIR/logs"
CFG="$HOMEDIR/config"
MENU=@SHARE@
JJ=@JJJJ@
SEPARATE=@SEPARATE@

# hamlib3 directories
HL3SRC="$HOMEDIR/src/g4wjs-hamlib"
HL3B="$HOMEDIR/src/build/hamlib"
HL3I="$HOMEDIR/hamlib3"

# foreground colours
C_R='\033[01;31m'		# red
C_G='\033[01;32m'		# green
C_Y='\033[01;33m'		# yellow
C_C='\033[01;36m'		# cyan
C_NC='\033[01;37m'		# no color

# unicode bling bling :-)
CHK=${C_G}✔${C_NC}
FAILED=${C_R}✘${C_NC}

# enable / disable select functions for debugging
GDB="1"

################################################################################
# PROCESS COMMAND-LINE OPTIONS
################################################################################

# command line options help message --------------------------------------------
cli_help() {

clear ||:
echo '----------------------'
echo -e ${C_G}" COMMAND LINE OPTIONS"${C_NC}
echo '----------------------'
echo ''
cat <<EOF
 Usage .....: jtsdk-wsjtx [-h] [-b] [-n] [-c] [-t]  
 Example....: jtsdk-wsjtx -b dev -n wsjtx -c release -t install

 OPTIONS:
	-h	displays this message

	-b	( dev | gar )
		dev = development branches ^/branches
		gar = GA and RC branches ^/tags

	-n	Branch Name: wsjtx, wsjtx-1.6, wsjtx-1.6.0-rc1, etc

	-c	Cmake Build Type: ( release | debug )

	-t	install package docs | user-defined

EOF

exit 0

}

# shortcut to cut down on repeated code ----------------------------------------
readp_help_message() {
	echo ''
	read -rp "Press [ Enter ] to view the help message"
	readp_help_message
}

# check the number of arguments are > [ 0 ]
# check must happen *after* declaring the cli_help function
if (( "$NARGS" == "0" )) ; then
	clear ||:
	echo ''
	echo "Invalid number of arguments: [ $NARGS ]"
	readp_help_message
fi


################################################################################
# GETOPT FUNCTIONS
################################################################################

# getopts branch validation ----------------------------------------------------
getopts_branch_check() {

# -b [ BRANCH ]

case $OPTARG in
	dev)
		branch_status="0"			
		BDESC='^/branches'
		B_OPT="$OPTARG"
	;;

	gar)
		branch_status="0"			
		BDESC='^/tags'
		B_OPT="$OPTARG"
	;;

	*)
		clear ||:
		echo "-------------------------------------------"
		echo -e ${C_R} "COMMAND LINE ERROR"${C_NC}
		echo "-------------------------------------------"
		echo ''					
		echo " Invalid Branch: [-n $OPTARG ]" >&2
		echo ''
		echo ' Available -d [ OPTIONS ] are:'
		echo ''
		echo ' -b dev  For Development Branches ^/branches'
		echo ' -b gar  For GA and RC Branches ^/tags'
		echo ''
		echo ' Please correct the entry and try again.'
		echo ''
		exit 1
	;;
esac

}

# getopts name validation ------------------------------------------------------
getopts_name_check() {

# -n [ BRANCH NAME ]

DEV_FILE="$CFG/dev_list.txt"
GAR_FILE="$CFG/ga_rc_list.txt"

case $B_OPT in
	dev)
		CLIST="$CFG/dev_list.txt"
	;;
	gar)
		CLIST="$CFG/ga_rc_list.txt"
	;;
esac

if (grep -Fx "$OPTARG" "$CLIST" > /dev/null) ; [[ "$?" = "0" ]]
then
	N_OPT="$OPTARG"
	name_status="0"
else
	clear ||:
	echo "-------------------------------------------"
	echo -e ${C_R} "COMMAND LINE ERROR"${C_NC}
	echo "-------------------------------------------"
	echo ''
	echo "Invalid Branch: [-n $OPTARG ]" >&2
	echo ''
	case "$B_OPT" in
		dev)
			echo 'Please use one of the following branch names'
			echo ''
			echo 'WSJT-X Development Branches'
			echo '---------------------------'
			cat "$DEV_FILE" |sort |uniq |sed '/Back-To-Main-Menu/d'
			echo ''
			exit 1
		;;
		gar)
			echo 'Please use one of the following branch names'
			echo ''
			echo 'WSJT-X GA and RC Branches'
			echo '-------------------------'
			cat "$GAR_FILE" |sort |uniq |sed '/Back-To-Main-Menu/d'
			echo ''
			exit 1
		;;
	esac
fi

}


# getopts config validation ----------------------------------------------------
getopts_config_check() {

# -c [ Debug | Release ]

# process option
case $OPTARG in
	Release|release)
		C_OPT="Release"
		config_status="0"
	;;
	
	Debug|debug)
		C_OPT="Debug"
		config_status="0"
	;;
	*) 
	config_status="1"
esac

}

# getopts target validation ----------------------------------------------------
getopts_target_check() {

# -t [ TARGET NAME ]

# process option
case $OPTARG in
	install|package|docs)
		T_OPT="$OPTARG"
		target_status="0"
	;;
	
	*)
		T_OPT="$OPTARG"
		target_status="0"
	;;
	*)
	T_OPT="Unknown"
	target_status="1"
esac

}


# options status, used during debugging 
getopts_options_status() {

case $GDB in
	1)
		# check the status of each option
		clear ||:
		echo "-------------------------------------------"
		echo -e ${C_G} "COMMAND LINE INPUT"${C_NC}
		echo "-------------------------------------------"

		# -b option
		if [[ $branch_status = "1" ]] ; then
			echo -e "$FAILED  -b Branch ..: $BDESC"
			readp_help_message
		else 
			echo -e "$CHK  -b Branch ..: $BDESC"
		fi

		# -n option
		if [[ $name_status = "1" ]] ; then
			echo -e "$FAILED  -n Name ....: $N_OPT"
			readp_help_message
		else 
			echo -e "$CHK  -n Name ....: $N_OPT"
		fi

		# -c option
		if [[ $config_status = "1" ]] ; then
			echo -e "$FAILED -c Type .....: $C_OPT"
			readp_help_message
		else 
			echo -e "$CHK  -c Type ....: $C_OPT"
		fi

		# -t option
		if [[ $target_status = "1" ]] ; then
			echo -e "$FAILED -t Target ...: $T_OPT"
			readp_help_message
		else 
			echo -e "$CHK  -t Target ..: $T_OPT"
		fi
		echo ''

		# display the help somethign fails, 
		if [[ $branch_status = "1" ]] || [[ $name_status = "1" ]] || \
		[[ $config_status = "1" ]] || [[ $target_status = "1" ]]
		then
			readp_help_message
		fi
	;;
esac

}

# configre variable based on user input ----------------------------------------
configure_options() {

# variables processed by the getopts functions
# B_OPT	-b Branch ( dev | gar )
# OPT2	-n Name, wsjtx, wsjtx-1.6.0 etc
# OPT3  -c Cmake Build Type  ( debug | release )
# OPT4	-t install package docs | user-defined

# setup folders and urls
case $B_OPT in
	dev)
		APP_SRC="$SRCD/$N_OPT"
		APP_NAME="$N_OPT"
		OPTION=$C_OPT
		URL="https://svn.code.sf.net/p/wsjt/wsjt/branches/$N_OPT"
	;;

	gar)
		APP_SRC="$SRCD/$N_OPT"
		APP_NAME="$N_OPT"
		OPTION=$C_OPT
		URL="https://svn.code.sf.net/p/wsjt/wsjt/tags/$N_OPT"
	;;
esac

}

################################################################################
# MAIN SCRIPT FUNCTIONS
################################################################################

# display build message --------------------------------------------------------
build_message() {

clear ||:
case $T_OPT in
	install)	
		echo "-------------------------------------------"
		echo -e ${C_G} "WSJT-X [ INSTALL ] TARGET"${C_NC}
		echo "-------------------------------------------"
		echo ''
		echo ' The following build will be run:'
		echo ''
		echo " * Branch ..: $BDESC"
		echo " * Name ....: $N_OPT"
		echo " * Type ....: $C_OPT"
		echo " * Target ..: $T_OPT"
		echo ''
	;;

	package)
		echo "-------------------------------------------"
		echo -e ${C_G} "WSJT-X [ PACKAGE ] TARGET"${C_NC}
		echo "-------------------------------------------"
		echo ''
		echo ' The following build will be run:'
		echo ''
		echo " * Branch ..: $BDESC"
		echo " * Name ....: $N_OPT"
		echo " * Type ....: $C_OPT"
		echo " * Target ..: $T_OPT"
		echo ''
	;;

	docs)
		echo "-------------------------------------------"
		echo -e ${C_G} "WSJT-X [ USER GUIDE ] TARGET"${C_NC}
		echo "-------------------------------------------"
		echo ''
		echo ' The following build will be run:'
		echo ''
		echo " * Branch ..: $BDESC"
		echo " * Name ....: $N_OPT"
		echo " * Type ....: $C_OPT"
		echo " * Target ..: $T_OPT"
		echo ''
	;;
	
	*)
		echo "-------------------------------------------"
		echo -e ${C_F} "WSJT-X [ USER-DEFINED ] TARGET"${C_NC}
		echo "-------------------------------------------"
		echo ''
		echo ' The following build will be run:'
		echo ''
		echo " * Branch ..: $BDESC"
		echo " * Name ....: $N_OPT"
		echo " * Type ....: $C_OPT"
		echo " * Target ..: $T_OPT"
		echo ''
		echo ' NOTE: User Defined targets are *not* installed'
		echo '       by default, they are left in the Build'
		echo '       tree, and should run correctly from'
		echo '       location'
	;;
esac

}

# simple hamlib test -----------------------------------------------------------
hamlib_test() {
echo ''
echo '-------------------------------------------'
echo -e ${C_Y}' Testing Hamlib3'${C_NC}
echo '-------------------------------------------'
echo

if [[ -f $HL3I/bin/rigctl ]] ; then

	TEST=$($HL3I/bin/rigctl -m1 f)

	if [ "$TEST" == "145000000" ] ; then
		echo " Rig Control ......: OK"
		echo ' Tested With ......: rigctl -m1 f'
		echo ' Expected Result ..: 145000000'
		echo " Returned Result ..: $TEST"
	else
		echo "Rig Control Test .. FAILED"
		echo
		echo "If you have not built hamlib3 yet:"
		echo ''
		echo '1. Return to the Main Menu.'
		echo "2. Select Hamlib3 to build it."
		echo '3. Then try to build WSJT-X again'
		echo ''
		read -p "Press [Enter] to continue ..."
		exit
	fi
else
		echo "Cannot Find ( rigctl binary )"
		echo ''
		echo "If you have not built hamlib3 yet:"
		echo ''
		echo '1. Return to the Main Menu.'
		echo "2. Select Hamlib3 to build it."
		echo '3. Then try to build WSJT-X again'
		echo ''
		read -p "Press [Enter] to continue ..."
		exit
fi

}


# chekout or update from svn --------------------------------------------------
check_svn() {
echo ''
echo '-----------------------------------------------------'
echo -e ${C_Y}" SVN UPDATE"${C_NC}
echo '-----------------------------------------------------'

if [[ ! -d $APP_SRC/.svn ]]
then
	echo ''
	echo "Checking Out New Version of $APP_NAME"
	cd $SRCD
	svn co $URL
else
	# Yy / Nn answer to update from svn	
	while [ 1 ]
	do
		echo ''
		read -p "Update from SVN Before Building? [ Y/N ]: " yn
		case $yn in
		
		[Yy]* )
			cd "$APP_SRC"
			echo "Updating ( $APP_NAME )"
			svn cleanup && svn update
			break ;;
		
		[Nn]* )
			echo "Nothign to be done..."
			break ;;
		
		* )
			clear ||:
			echo "Please use "Y" yes or "N" No." ;;
		esac
	done
fi
}

# get WSJTX Version information from: Version.cmake ----------------------------
# Note: must be performed "After" SVN checkout
get_app_version() {

echo ''
echo '-----------------------------------------------------'
echo -e ${C_Y}" BRANCH INFORMATION for [ $N_OPT ]"${C_NC}
echo '-----------------------------------------------------'

# Example Versions.cmake
# ------------------------------------------------------------------------------
# set (WSJTX_VERSION_MAJOR 1)
# set (WSJTX_VERSION_MINOR 6)
# set (WSJTX_VERSION_PATCH 1)
# set (WSJTX_RC 0)					# release candidate number, comment out or zero for development versions
# set (WSJTX_VERSION_IS_RELEASE 0)	# set to 1 for final release build
# ------------------------------------------------------------------------------

VER_FILE="$APP_SRC/Versions.cmake"
# get Major number
MA=$(cat $VER_FILE |grep '_MAJOR' |awk '{print $3}' |cut -c1)

# get Minor number 
MI=$(cat $VER_FILE |grep '_MINOR' |awk '{print $3}' |cut -c1)

# get Patch number
PA=$(cat $VER_FILE |grep '_PATCH' |awk '{print $3}' |cut -c1)

# get RC version
RC=$(cat $VER_FILE |grep '_RC' |awk '{print $3}' |cut -c1)

# get Release Tag
REL=$(cat $VER_FILE |grep '_RELEASE' |awk '{print $3}' |cut -c1)

# Final Release Combinations
if [[ $REL == "1" ]] ; then AVER="$MA.$MI.$PA" ; fi
if [[ $RC != "0" ]] && [[ $REL == "1" ]] ; then AVER="$MA.$MI.$PA" ; fi

# Release Candidate
if [[ $RC == "0" ]] && [[ $REL == "0" ]] ; then AVER="$MA.$MI.$PA" ; fi
if [[ $RC != "0" ]] && [[ $REL == "0" ]] ; then AVER="$MA.$MI.$PA-rc$RC" ; fi

echo "-- Branch Version ..: $AVER"

# this is used for on screen displays only
case $REL in
	0)
		case $RC in
			0 )
				BTYPE="Development"
			;;
			*)
				BTYPE="Release Candidate"
			;;
		esac
	;;

	1)
		BTYPE="GA Release"
	;;
esac

}


# get the last changed svn number ----------------------------------------------
get_svn_revision() {

SVN_VER=$(svn info "$APP_SRC" |grep "Last Changed Rev:" |awk '{print $4}')
echo "-- SVN Revision ....: $SVN_VER"

}

# setup folder based on separation selection
check_separation() {

if [ $SEPARATE == "Yes" ] ; then 
	BUILDD="$HOMEDIR/wsjtx/$B_OPT/$AVER/$SVN_VER/build/$C_OPT"
	INSTALLD="$HOMEDIR/wsjtx/$B_OPT/$AVER/$SVN_VER/install/$C_OPT"
	PKGD="$HOMEDIR/wsjtx/$B_OPT/$AVER/$SVN_VER/package"

else
	BUILDD="$HOMEDIR/wsjtx/$B_OPT/$N_OPT/build/$C_OPT"
	INSTALLD="$HOMEDIR/wsjtx/$B_OPT/$N_OPT/install/$C_OPT"
	PKGD="$HOMEDIR/wsjtx/$BOPT/$N_OPT/package"
fi

}


# setup directories ------------------------------------------------------------
setup_dirs() {
echo ''
echo '-----------------------------------------------------'
echo -e ${C_Y}" SETUP DIRECTORIES for [ WSJT-X $AVER ]"${C_NC}
echo '-----------------------------------------------------'
echo ''
mkdir -p "$BUILDD" >/dev/null 2>&1
mkdir -p "$INSTALLD" >/dev/null 2>&1
mkdir -p "$PKGD" >/dev/null 2>&1
echo " Status .......: $BTYPE"
echo " Name .........: $N_OPT" 
echo " App Version ..: $AVER r$SVN_VER"
echo " Build Type ...: $C_OPT"
echo " Source .......: $APP_SRC"
echo " Build ........: $BUILDD"
echo " Install ......: $INSTALLD"
echo ''

}


# run cmake configure step -----------------------------------------------------
run_cmake() {
echo ''
echo '-----------------------------------------------------'
echo -e ${C_Y}" CONFIGURING [ WSJT-X $AVER $DESC ]"${C_NC}
echo '-----------------------------------------------------'
echo ''
cd "$BUILDD"

# $HL3I is the hamlib3 local install directory
# $C_OPT is the debug | release 
# $INSTALLD is the installation directory
# $APP_SRC source directory 

cmake -G "Unix Makefiles" -Wno-dev \
-D CMAKE_PREFIX_PATH:PATH="$HL3I" \
-D CMAKE_BUILD_TYPE="$C_OPT" \
-D CMAKE_INSTALL_PREFIX="$INSTALLD" "$APP_SRC"

}

# build the target -------------------------------------------------------------
run_build() {

# this only builds the target, and *does not* install it

echo ''
echo '-----------------------------------------------------'
echo -e ${C_Y}" BUILDING TARGET [ $T_OPT ]"${C_NC}
echo '-----------------------------------------------------'
echo ''
cd "$BUILDD"
case "$T_OPT" in
	install) 
	cmake --build . -- -j "$JJ"
	link_kvasd ;;
	
	package) # default package build
	cmake --build . --target package -- -j "$JJ"
	cp -u "$BUILDD"/wsjtx*.deb "$PKGD"/ ;;

	docs) # default user-guide build
		cmake --build . --target docs  >/dev/null 2>&1
		echo " Finnished building ..."
	 ;;

	*) # used for custom target building
	cmake --build . --target $T_OPT -- -j "$JJ"
	;;

esac

}


# build the target -------------------------------------------------------------
run_install_build() {

# this install the build target.

echo ''
echo '-----------------------------------------------------'
echo -e ${C_Y}" INSTALLING TARGET [ $T_OPT ]"${C_NC}
echo '-----------------------------------------------------'
echo ''
cd "$BUILDD"
case "$T_OPT" in
	install)
		cmake --build . --target install -- -j "$JJ"
		link_kvasd
	;;
	
	package)
		cp -u "$BUILDD"/wsjtx*.deb "$PKGD"/
		echo " Copied package to ..: $PKGD"
	;;

	docs)
		cd $BUILDD/doc
		make install >/dev/null 2>&1
		FILENAME=$(ls -al $INSTALLD/share/doc/wsjtx |grep 'html' |awk '{print $9}')
		echo " Finished installing ..."
		echo ''
	;;

esac

}


# check kvasd and link if wsjtx version is < 1.7.0 -----------------------------
function link_kvasd() {

declare -i minv="$MI"
declare -i maxv="7"
if (( $minv < $maxv )) ; then KREQ="Yes" ; fi

case "$KREQ" in
	Yes )
		# Link KVASD Binary to $INSTALLD/bin
		if [[ -f /usr/bin/kvasd ]] ; then
			mkdir -p "$INSTALLD/bin" >/dev/null 2>&1
			if [[ ! -L $INSTALLD/bin/kvasd ]] ; then ln -sf /usr/bin/kvasd "$INSTALLD"/bin/kvasd ; fi
   	    	if [[ $? = "0" ]] ; then KVSTATUS="OK" ; fi
		else
			KVSTATUS="Failed"
	        echo ''
	        echo '-------------------------------------------'
	        echo -e ${C_R}' KVASD WARNING'${C_NC}
	        echo '-------------------------------------------'
	        echo ''
	        echo ' * The KVASD Binary was not found in /usr/bin'
	        echo ' * Use the KVASD-Installer package to install the binary'
	        echo '   before running WSJT-X'
	        echo ' * After installation, in a terminal, you should link the'
	        echo '   binary to your installation directory, for example:'
	        echo ''
	        echo "   ln -s /usr/bin/kvasd $INSTALLD/bin/kvasd"
	        echo ''
	        echo ' * Alternatively, after installing the binary with KVASD-Installer,'
	        echo '   re-run the last build, which will automatically perform the'
	        echo '   link for you.'
	        echo ''
	        read -p "Press [ Enter ] to continue ..."
		fi ;;

    * )
         KVSTATUS="Not Required" ;;
esac

}

# finish message ---------------------------------------------------------------
finish_message() {
echo ''
echo '-----------------------------------------------------'
echo -e ${C_G}" BUILD SUMMARY"${C_NC}
echo '-----------------------------------------------------'
echo ''
case "$T_OPT" in
	install)
		echo " Status ...: $BTYPE"
		echo " Name .....: $N_OPT $AVER r$SVN_VER"		
		echo " SVN URL ..: $URL"
		echo " Source ...: $APP_SRC"
		echo " Build ....: $BUILDD"
		echo " Install ..: $INSTALLD"
		if [[ $KVSTATUS = "OK" ]] || [[ $KVSTATUS = "Not Required" ]] ; then
			echo -e ' KVASD ....: '${C_G}"$KVSTATUS"${C_NC}
		else
			echo -e ' KVASD ....: '${C_R}"$KVSTATUS"${C_NC}
		fi
		echo ''
		echo " TO RUN WSJT-X"
		echo " cd .......: $INSTALLD/bin"
		echo " Type, ....: ./wsjtx"
		echo ''
	;;

	package)
		PKG_NAME=$(ls -m1 $PKGD)
		echo " PKG Name ..: $PKG_NAME"
		echo " Version ...: $N_OPT $AVER r$SVN_VER"
		echo " SVN URL ...: $URL"
		echo " Source ....: $APP_SRC"
		echo " Build .....: $BUILDD"
		echo " Location ..: $PKGD"
		echo ''
	;;

	docs)
		echo ' At the time of the writing, the user-guide'
		echo ' is installed the same as performing a normal'
		echo ' build. Future updates to JTSDK-Nix may change'
		echo ' this behavior, leaving the document in the'
		echo ' build tree.' 	
		echo ''
		echo " Name ......: $FILENAME"
		echo " Version....: $N_OPT $AVER r$SVN_VER"
		echo " Location ..: $INSTALLD/share/doc/wsjtx"
		echo ''
	;;

	*) # user defined targets
		echo ' User-Defined target builds remain in the'
		echo ' build tree folder, they do not get installed.'
		echo ''
		echo ' Not all targets are available across all versions.'
		echo ' If you get a build error stating the target is unknown,'
		echo ' it may be due to the fact it did not exist in previous'
		echo ' versions of WSJT-X or earlier SVN revisions.'
		echo ''
		echo " Target ....: $T_OPT"
		echo " Version....: $N_OPT $AVER r$SVN_VER"
		echo " Location ..: $BUILDD"
		echo ''
	;;
esac

}


################################################################################
# START MAIN SCRIPT
################################################################################

# start getopts processing -----------------------------------------------------

# set these to "1" initially
branch_status="1"
name_status="1"
config_status="1"
target_status="1"

options=':hb:n:c:t:'
while getopts "$options" FLAG
do
	case $FLAG in
		h) cli_help ;;		
		b) getopts_branch_check ;;
		n) getopts_name_check ;;
		c) getopts_config_check ;;
		t) getopts_target_check ;;
		\? )
			clear ||:
			echo " Unknown option: -$OPTARG" >&2
			echo ''
			read -rp " Press [ Enter ] to view the help message"
			cli_help
			exit 1
		;;
	esac
done
shift "$((OPTIND-1))" # shift off the options

# getopts status message, for debugging only GDB="1"
getopts_options_status

# for -t (install | package ) targets ( -c Release | Debug )
build_array=('configure_options' 'build_message' 'check_svn' 'get_app_version' \
'get_svn_revision' 'check_separation' 'setup_dirs' 'run_cmake' 'run_build' \
'run_install_build' 'link_kvasd' 'finish_message')

# for user guide ( -t docs )
ug_array=('configure_options' 'build_message' 'check_svn' 'get_app_version' \
'get_svn_revision' 'check_separation' 'setup_dirs' 'run_cmake' 'run_build' \
'run_install_build' 'finish_message')

# user defined target
ud_target=('configure_options' 'build_message' 'check_svn' 'get_app_version' \
'get_svn_revision' 'check_separation' 'setup_dirs' 'run_cmake' 'run_build' \
'finish_message')

case "$T_OPT" in
	install|package)
		for i in "${!build_array[@]}" ; do ${build_array[$i]} ; done
	;;

	docs)
		for i in "${!ug_array[@]}" ; do ${ug_array[$i]} ; done
	;;

	*) # user defined targets
		for i in "${!ud_target[@]}" ; do ${ud_target[$i]} ; done
	;;

esac

echo ''		
read -p " Press [ Enter ] to continue..."

exit 0
