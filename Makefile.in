# Makefile for Linux
# Re-direct stdout and stderr:		bash
#								make >& junk
#
# Prerequisites: Bash, Git, Subversion

# Program Infomation
PROGRAM		:=	@PROGRAM@
VERSION		:=	@VERSION@
BUGS		:=	@BUGS@
WEB         :=	@WEB@

# System Information
DESC		:=	@DESC@
OS			:=	@HOST_OS@
ARCH		:=	@HOST_CPU@
JJJJ		:=	@JJJJ@

# Compiler Information
CC			:=	@CC@
CXX			:=	@CXX@
FC			:=	@FC@
FCV			:=	@FCV@
FC_LIB_PATH	:=	@FC_LIB_PATH@

# General Use Tools
AWK			:=	@AWK@
CP			:=	@CP@
CHOWN		:=	@CHOWN@
CHMOD		:=	@CHMOD@
GIT			:=	@GIT@
LN			:=	@LN@
MV			:=	@MV@
RM			:=	@RM@
SED			:=	@SED@
SHELL		:=	@SHELL@
SVN			:=	@SVN@
MKDIR		:=	@MKDIR@
PYTHON3		:=	@PYTHON3@
F2PY3		:=	@F2PY3@
CMAKE		:=	@CMAKE@
QMAKE		:=	@QMAKE@

# Install locations
INSTALL		:=	install
BINDIR		:=	@BINDIR@
SHARE		:=	@SHARE@
MANDIR		:=	@MANDIR@
DOCDIR		:=	@DOCDIR@
DTDIR		:=	@DTDIR@
ICOND		:=	@ICOND@

# Home directory locations
LOGNAME		:=	@LOGNAME@
HOMEDIR		:=	@HOMEDIR@
SRCD		:=	@SRCD@
TMPD		:=	@TMPD@
LOGD		:=	@LOGD@
MKRD		:=	@MKRD@

# Applications Directories
WSJTI		:=	@WSJTI@
WSPRI		:=	@WSPRI@
WSJTXIR		:=	@WSJTXIR@
WSJTXID		:=	@WSJTXID@
WSJTXRCIR	:=	@WSJTXRCIR@
WSJTXRCID	:=	@WSJTXRCID@

# Config Definitions
DEFS		:=	@DEFS@

# Package List and Program
PKGMGR		:=	@PKGMGR@
PKGCOIUNT	:=	@PKGCOUNT@
PKGLIST		:=	@PKGLIST@

# Files to install
SCRIPTS		:=	$(wildcard src/*.sh)
PKGS		:=	$(wildcard ./orig*.txt)

# Targets
all: install-dep
	@echo ''
	@echo '---------------------------------------------------------------'
	@echo ' Dependency Installation Summary'
	@echo '---------------------------------------------------------------'
	@echo ''	
	@echo ' To Ensure All ( New ) Dependencies are Picked up, type:'
	@echo ''
	@echo ' ./autogen.sh --with-distro=<distro> + <options>'
	@echo ''
	@echo ' For Example Configurations, type:'
	@echo ' ./autogen.sh help'
	@echo ''
	@echo ''

# Install package dependencies
install-dep:
	@clear
	@echo '---------------------------------------------'
	@echo " Install Package Dependencies"
	@echo '---------------------------------------------'
	@echo ''
	@sudo -k
	@echo ' This will install all @PROGRAM@ required packages'
	@echo ' and their dependencies. To see what would be installed,'
	@echo ' use the sumulate target:'
	@echo ''
	@echo ' make sumulate'
	@echo ''
	@echo "* $(PKGMGR) will update your package list first."
	@while [ -z "$$GO" ]; do \
	read -r -p "* OK To Continue: [y/n]" GO ; \
	done ; \
	[ $$GO = "y" ] || [ $$GO = "Y" ] || (echo '' ; echo " Exiting, disregaurd the error 1 msg." ; echo '' ; exit 1;)
	@echo "* Updating @DESC@ Package List, password required:"
	@echo ''
	@sudo $(PKGMGR) -y -q update && sudo $(PKGMGR) -y -q install --no-install-recommends $(PKGLIST)
	@sudo -k

mainsymlink:
	(cd $(DESTDIR)/$(BINDIR); ln -sf jtsdk.sh jtsdk ; \
	ln -sf jtsdk-hamlib3.sh jtsdk-hamlib3 ; \
	ln -sf jtsdk-wsjtx.sh jtsdk-wsjtx ; \
	ln -sf jtsdk-map65.sh jtsdk-map65 ; \
	ln -sf jtsdk-wsprx.sh jtsdk-wsprx ; \
	ln -sf jtsdk-wspr.sh jtsdk-wspr ; \
	ln -sf jtsdk-wsjt.sh jtsdk-wsjt)

# Install System Files
install: mainsymlink
	@clear
	@echo '---------------------------------------------'
	@echo " Installing @PROGRAM@ @VERSION@"
	@echo '---------------------------------------------'
	@echo ''
	@echo '..Installing Directories'
	@$(MKDIR) -p @SRCD@
	@$(MKDIR) -p @TMPD@
	@$(MKDIR) -p @LOGD@
	@$(MKDIR) -p @MKRD@
# WSPR
	@$(MKDIR) -p @WSJTI@
# WSJT
	@$(MKDIR) -p @WSPRI@
# WSPRX
	@$(MKDIR) -p @WSPRXBR@
	@$(MKDIR) -p @WSPRXIR@
	@$(MKDIR) -p @WSPRXBD@
	@$(MKDIR) -p @WSPRXID@
# MAP65
	@$(MKDIR) -p @MAP65BR@
	@$(MKDIR) -p @MAP65IR@
	@$(MKDIR) -p @MAP65BD@
	@$(MKDIR) -p @MAP65ID@
# WSJTX 1.5.0
	@$(MKDIR) -p @WSJTXBR@
	@$(MKDIR) -p @WSJTXIR@
	@$(MKDIR) -p @WSJTXBD@
	@$(MKDIR) -p @WSJTXID@
	@$(MKDIR) -p @WSJTXPD@
# WSJTX 1.4.0 RC
	@$(MKDIR) -p @WSJTXRCBR@
	@$(MKDIR) -p @WSJTXRCIR@
	@$(MKDIR) -p @WSJTXRCBD@
	@$(MKDIR) -p @WSJTXRCID@
	@$(MKDIR) -p @WSJTXRCPD@
	@$(MKDIR) -p $(HOMEDIR)/package-info
	@if [ -f orig-install.txt ] ; then \
	$(CP) -u orig-install.txt $(HOMEDIR)/package-info ; fi 
	@if [ -f orig-needed.txt ] ; then \
	$(CP) -u orig-needed.txt $(HOMEDIR)/package-info ; fi 
	@echo '..Changing Directory Ownership'
	@$(CHOWN) -R $(LOGNAME):$(LOGNAME) $(HOMEDIR)
	@echo '..Installing Scripts'
	@install -m 755 $(SCRIPTS) $(DESTDIR)$(BINDIR)
	@$(MKDIR) -p $(DESTDIR)$(DOCDIR)
	@echo '..Installing Misc Files'
	@install -m 644 src/docs/* $(DESTDIR)$(DOCDIR)
	@install -m 644 AUTHORS ChangeLog COPYING COPYRIGHT CREDITS README TO-DO $(DESTDIR)$(DOCDIR)
	@install -m 644 data/jtsdk.desktop $(DESTDIR)$(DTDIR)
	@install -m 644 data/jtsdk.xpm $(DESTDIR)$(ICOND)
	@echo '..Finished'
	@echo ''
	@echo 'To Run @PROGRAM@, type ..: jtsdk'
	@echo ''
	
# Uninstall System Files
uninstall:
	@clear
	@echo '---------------------------------------------'
	@echo " Uninstall @PROGRAM@ @VERSION@"
	@echo '---------------------------------------------'
	@echo ''
	@echo '..Removing installed scripts'
	@$(RM) -f $(DESTDIR)$(BINDIR)/jtsdk*
	@echo '..Removing installed manpages'
	@$(RM) -f ${DESTDIR}$(MANDIR)/jtsdk.1
	@echo '..Removing installed share files'
	@$(RM) -rf $(DESTDIR)$(SHARE)
	@$(RM) -f $(ICOND)/jtsdk.xpm
	@$(RM) -f $(DTDIR)/jtsdk.desktop
	@echo ''
	@echo 'UNINSTALL NOTES'
	@echo ''
	@echo ' 1. All user generated files remain in:'
	@echo "    PATH: $(HOMEDIR)"
	@echo ''
	@echo ' 2. All packages that were installed ( if any )'
	@echo '    during the configure and installation phase'
	@echo '    *have not* been removed automatically. This'
	@echo '    is by design, as it can potentially break'
	@echo '    system or application package dependencies.'
	@echo '    A list of installed packages can be found in:'
	@echo ''
	@echo "    PATH: $(HOMEDIR)/package-info/orig-needed.txt"
	@echo ''

# Cleanup Source Tree
.PHONY: clean simulate
clean:
	${RM} -f src/*.sh config.log config.status autoscan.log configure.scan \
	configure Makefile src/language/language_en data/jtsdk.desktop installed.txt \
	temp.list needed.txt installed.txt
	${RM} -rf ./autom4*

simulate:
	@clear
	@echo '----------------------------------------------------------'
	@echo ' Simulate Package Installation'
	@echo '----------------------------------------------------------'
	@echo ''
	@sudo -k
	@echo "This will *Simulate* installing packages for @PROGRAM@"
	@echo 'In *Simulate* mode, no packages will be installed.'
	@echo ''
	@echo "* $(PKGMGR) will update your package list first."
	@while [ -z "$$GO" ]; do \
	read -r -p "* OK To Continue: [y/n]" GO ; \
	done ; \
	[ $$GO = "y" ] || [ $$GO = "Y" ] || (echo '' ; echo " Exiting, disregaurd the error 1 msg." ; echo '' ; exit 1;)
	@echo "* Updating @DESC@ Package List, password required:"
	@echo ''
	@sudo $(PKGMGR) update && echo && sudo $(PKGMGR) -s -y -q install --no-install-recommends $(PKGLIST)
	@sudo -k
	@echo ''
	@echo '----------------------------------------------------------'
	@echo ' Finished Simulate Package Installation'
	@echo '----------------------------------------------------------'
	@echo ''
	@echo ' To perform real installation, type ..: make'
	@echo ''
	@echo ''
