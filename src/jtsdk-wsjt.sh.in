#! /usr/bin/env bash
#
# Name			: jtsdk-wsjt.sh
# Execution		: As normal user type: jtsdk-wsjt.sh
# Copyright		: @JTSDK_COPYRIGHT@
# Contributors	: @JTSDK_AUTHORS@
# Comment		: Part of the JTSDK Linux Project
#
# @PROGRAM@ is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation either version 3 of the License, or
# (at your option) any later version. 
#
# @PROGRAM@ is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#-------------------------------------------------------------------------#

set -e

# set home and system veriables
HOMEDIR=@HOMEDIR@
LOGS=@LOGD@
SRCD=@SRCD@
TMP=@TMPD@
MKRD=@MKRD@
INSTALL=@INSTALL@
INSTALLD=@WSJTI@

# Python3 and F2PY3
PYTHON3=@PYTHON3@
F2PY3=@F2PY3@

# App variables
URL="https://svn.code.sf.net/p/wsjt/wsjt/trunk"
APP_NAME=wsjt
APP_SRC="$SRCD/trunk"

# Foreground colours
C_R='\033[01;31m'		# red
C_G='\033[01;32m'		# green
C_Y='\033[01;33m'		# yellow
C_C='\033[01;36m'		# cyan
C_NC='\033[01;37m'		# no color

################################################################################
# FUNCTOINS
################################################################################
check_svn() {

if [[ ! -d $APP_SRC/.svn ]]
then
	echo
	echo "Checking Out New Version of $APP_NAME"
	cd $SRCD
	svn co $URL
else
	# Yy / Nn answer to update from svn	
	while [ 1 ]
	do
		echo
		read -p "Update from SVN Before Building? [ Y/N ]: " yn
		case "$yn" in
		
		[Yy]* )
			cd "$APP_SRC" 
			echo "Updating ( $APP_NAME )"
			svn cleanup && svn update
			break ;;
		[Nn]* )
			echo 'Nothing to be done'
			break ;;
		
		* )
			clear
			echo "Please use "Y" yes or "N" No." ;;
		esac
	done
fi

}

################################################################################
# START MAIN SCRIPT
################################################################################

# Make sure directories are present, in case they were deleted
mkdir -p "$INSTALLD" >/dev/null 2>&1
clear
echo '-----------------------------------------------------'
echo -e ${C_Y}"STARTING BUILD for ( $APP_NAME )"${C_NC}
echo '-----------------------------------------------------'
check_svn

echo
echo '-----------------------------------------------------'
echo -e ${C_Y}'RUN AUTORECONF'${C_NC}
echo '-----------------------------------------------------'
cd "$APP_SRC"
# clelan first
if [[ -f Makefile ]] ; then
	echo "Running make clean first"
	make clean >/dev/null 2>&1
fi
# run autoreconf to generate new Makefile & configure script
echo 'Generating Makefile and Configure scripts'
autoreconf -f -i

echo
echo '-----------------------------------------------------'
echo -e ${C_Y}'RUN CONFIGURE'${C_NC}
echo '-----------------------------------------------------'
echo ''
if [[ $(uname -m) == "i386" ]] || [[ $(uname -m) == "i686" ]] ; then
	./configure --with-portaudio-lib-dir=/usr/lib/i386-linux-gnu \
	--with-portaudio-include-dir=/usr/include \
	PYTHON=@PYTHON3@ \
	F2PY=@F2PY3@

elif [[ $(uname -m) == "x86_64" ]]; then
	./configure --with-portaudio-lib-dir=/usr/lib/x86_64-linux-gnu \
	--with-portaudio-include-dir=/usr/include \
	PYTHON=@PYTHON3@ \
	F2PY=@F2PY3@

else
	echo " Unsupported OS "$(uname -m)
fi

echo
echo '-----------------------------------------------------'
echo -e ${C_Y}'COMPILE and INSTALL TARGETS'${C_NC}
echo '-----------------------------------------------------'
echo ''
# get the targets from Makefile all: line into an array
targets=$(grep '^all\:' Makefile |awk 'FNR==1' |cut -f2-)

# loop through the targets
for i in "${targets[@]}"
do
	make $i
done

# now install the targets
mkdir -p "$INSTALLD"/{RxWav/Samples,WsjtMod}
install -m 644 RxWav/Samples/* "$INSTALLD"/RxWav/Samples/
install -m 644 CALL3.TXT wsjt.ico wsjtrc "$INSTALLD"
install -m 755 Pmw*.py wsjt.py wsjtrc kvasd.dat KVASD "$INSTALLD"
install -m 755 -s jt65code jt4code "$INSTALLD"
install -m 755 WsjtMod/* "$INSTALLD"/WsjtMod

if [[ -f $INSTALLD/$APP_NAME.sh ]] ; then rm -f "$INSTALLD/$APP_NAME.sh" ; fi
touch "$INSTALLD/$APP_NAME.sh" && chmod +x "$INSTALLD/$APP_NAME.sh"

# Generate a simple wsjt.sh run script
(
cat <<'EOF_WSJTSH'
#!/usr/bin/env bash
#-------------------------------------------------------------------------------
# File Name:    wsjt.sh
# Description:  Shell script wrapper to run wsjt
#				JTSDK auto generated file
#-------------------------------------------------------------------------------

set -e
HOMEDIR=@WSJTI@

# make sure we are in the right place
cd "$HOMEDIR"

# python3 path is updated form @PROGRAM@
@PYTHON3@ -O wsjt.py

EOF_WSJTSH
) > "$INSTALLD"/wsjt.sh

# ensure ownership is for the current user
chown -R "$USER":"$USER" "$INSTALLD" 

# Finished
echo
echo '-----------------------------------------------------'
echo -e ${C_G}"BUILD SUMMARY for ( $APP_NAME )"${C_NC}
echo '-----------------------------------------------------'
echo ''
echo " Build Type ..: Release"
echo " Source ......: $APP_SRC"
echo " Install .....: $INSTALLD"
echo ''
echo ' Tools ( jt65code jt4code )'
echo " Install .....: $INSTALLD"
echo ''
echo " TO RUN $APP_NAME"
echo " cd ..........: $INSTALLD"
echo " Type, .......: ./$APP_NAME.sh"
echo ''
read -p "Press [ Enter ] to return to the main menu .."

exit 0

