#! /usr/bin/env bash
#
# Name ..........: jtsdk-wsjtx
# Execution .....: Called from JTSDK Main Script
# Copyright .....: @COPYRIGHT@
# License .......: @LICENSE@
# Contributors ..: @AUTHORS@
# Comment .......: Part of the JTSDK Linux Project
#
# jtsdk-wsjtx is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation either version 3 of the License, or
# (at your option) any later version. 
#
# jtsdk-wsjtx is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#-------------------------------------------------------------------------#

# TO-DO: update function separation lines to add info on the right side.

set -e

# grab the number of command line arguments
NARGS=$#

# foreground colours
C_R='\033[01;31m'		# red
C_G='\033[01;32m'		# green
C_Y='\033[01;33m'		# yellow
C_C='\033[01;36m'		# cyan
C_NC='\033[01;37m'		# no color

# unicode bling bling :-)
CHK1=${C_G}✔${C_NC}
FAILED=${C_R}✘${C_NC}

# set home and directory paths
HOMEDIR=~/jtsdk
SRCD="$HOMEDIR/src"
TMPD="$HOMEDIR/tmp"
LOGS="$HOMEDIR/logs"
CFG="$HOMEDIR/config"
MENU=@SHARE@

# hamlib3 directories
HL3SRC="$HOMEDIR/src/g4wjs-hamlib"
HL3B="$HOMEDIR/src/build/hamlib"
HL3I="$HOMEDIR/hamlib3"

# options based on JTSDK configure.ac --enable --disable commands
#
# Note(s):
# [1] these features can be reset with with jtsdk -e [FEATURE] -d [FEATURE]
# [2] for resetting JJ use jtsdk -c
# [3] manpages, docs, parallel (JJ) and separate are enabled by default
# 
# SEPARATE = separate by svn revision
# BDOCS    = disable user guides
# BMANP    = disable manpages
SEPARATE=@SEPARATE@
BDOCS=@BDOCS@
BMANP=@BMANP@
JJ=@JJJJ@

# check global user defined options ( see jtsdk -h )
# add each option enabled to jtsdk_options array
wsjtx_options=()
if [[ -f $CFG/wsjtx-custom ]] ; then CUSTOM=1 ; else CUSTOM==0 ; fi
if [[ -f $CFG/autorun ]] ; then AUTORUN=1 ; wsjtx_options+=('autorun') ; else AUTORUN=0 ; fi
if [[ -f $CFG/autosvn ]] ; then AUTOSVN=1 ; wsjtx_options+=('autosvn') ; else AUTOSVN=0 ; fi
if [[ -f $CFG/clean ]] ; then CLEAN=1 ; wsjtx_options+=('clean') ; else CLEAN=0 ; fi
if [[ -f $CFG/cores ]] ; then CORES=$(awk 'FNR==1 {print $0}' < $CFG/cores) ; else CORES=$JJ ; fi
if [[ -f $CFG/docs ]] ; then DOCS=1 ; wsjtx_options+=('docs') ; else DOCS=0 ; fi
if [[ -f $CFG/manpages ]] ; then MANPAGES=1 ; wsjtx_options+=('manpages') ; else MANPAGES=0 ; fi
if [[ -f $CFG/quiet ]] ; then QUIET=1 ; wsjtx_options+=('quiet') ; else QUIET=0 ; fi
if [[ -f $CFG/rcfg ]] ; then RCFG=1 ; wsjtx_options+=('rcfg') ; else RCFG=0 ; fi
if [[ -f $CFG/separate ]] ; then SEPARATE=1 ; wsjtx_options+=('separate') ; else SEPARATE=0 ; fi
if [[ -f $CFG/skipsvn ]] ; then SKIPSVN=1 ; wsjtx_options+=('skipsvn') ; else SKIPSVN=0 ; fi

################################################################################
# PROCESS COMMAND-LINE OPTIONS
################################################################################

# command line options help message --------------------------------------------
cli_help() {

clear ||:
echo '----------------------'
echo -e ${C_G}" COMMAND LINE OPTIONS"${C_NC}
echo '----------------------'
echo ''
cat <<EOF
 Usage ....: jtsdk-wsjtx [-h] [-b] [-n] [-c] [-t]  
 Example ..: jtsdk-wsjtx -b dev -n wsjtx -c release -t install

 OPTIONS:
	-h	displays this message

	-b	( dev | gar )
		dev = development branches ^/branches
		gar = GA and RC branches ^/tags

	-n	Branch Name: wsjtx, wsjtx-1.6, wsjtx-1.6.0-rc1, etc

	-c	Cmake Build Type: ( release | debug )

	-t	install package docs | user-defined

EOF

exit 0

}

# shortcut to cut down on repeated code ----------------------------------------
readp_help_message() {
	echo ''
	read -rp "Press [ Enter ] to view the help message"
	readp_help_message
}

# check the number of arguments are > [ 0 ]
# check must happen *after* declaring the cli_help function
if (( "$NARGS" == "0" )) ; then
	clear ||:
	echo ''
	echo "Invalid number of arguments: [ $NARGS ]"
	readp_help_message
fi


################################################################################
# GETOPT FUNCTIONS
################################################################################

# getopts branch validation ----------------------------------------------------
getopts_branch_check() {

# -b [ BRANCH ]

case "$OPTARG" in
	dev)
		branch_status="0"			
		BDESC='^/branches'
		B_OPT="$OPTARG"
	;;

	gar)
		branch_status="0"			
		BDESC='^/tags'
		B_OPT="$OPTARG"
	;;

	*)
		clear ||:
		echo "-------------------------------------------"
		echo -e ${C_R} "COMMAND LINE ERROR"${C_NC}
		echo "-------------------------------------------"
		echo ''					
		echo " Invalid Branch: [ -n $OPTARG ]" >&2
		echo ''
		echo ' Available -d [ OPTIONS ] are:'
		echo ''
		echo ' -b dev  For Development Branches ^/branches'
		echo ' -b gar  For GA and RC Branches ^/tags'
		echo ''
		echo ' Please correct the entry and try again.'
		echo ''
		exit 1
	;;
esac

}

# getopts name validation ------------------------------------------------------
getopts_name_check() {

# -n [ BRANCH NAME ]

DEV_FILE="$CFG/dev_list.txt"
GAR_FILE="$CFG/ga_rc_list.txt"

case "$B_OPT" in
	dev)
		CLIST="$CFG/dev_list.txt"
	;;
	gar)
		CLIST="$CFG/ga_rc_list.txt"
	;;
esac

if (grep -Fx "$OPTARG" "$CLIST" > /dev/null) ; [[ "$?" = "0" ]]
then
	N_OPT="$OPTARG"
	name_status="0"
else
	clear ||:
	echo "-------------------------------------------"
	echo -e ${C_R} "COMMAND LINE ERROR"${C_NC}
	echo "-------------------------------------------"
	echo ''
	echo "Invalid Branch: [ -n $OPTARG ]" >&2
	echo ''
	case "$B_OPT" in
		dev)
			echo 'Please use one of the following branch names'
			echo ''
			echo 'WSJT-X Development Branches'
			echo '---------------------------'
			cat "$DEV_FILE" |sort |uniq |sed '/Back-To-Main-Menu/d'
			echo ''
			exit 1
		;;
		gar)
			echo 'Please use one of the following branch names'
			echo ''
			echo 'WSJT-X GA and RC Branches'
			echo '-------------------------'
			cat "$GAR_FILE" |sort |uniq |sed '/Back-To-Main-Menu/d'
			echo ''
			exit 1
		;;
	esac
fi

}


# getopts config validation ----------------------------------------------------
getopts_config_check() {

# -c [ Debug | Release ]

# process option
case "$OPTARG" in
	Release|release)
		C_OPT="Release"
		config_status="0"
	;;
	
	Debug|debug)
		C_OPT="Debug"
		config_status="0"
	;;
	*) 
	config_status="1"
esac

}

# getopts target validation ----------------------------------------------------
getopts_target_check() {

# -t [ TARGET NAME ]

# process option
case "$OPTARG" in
	install|package|docs)
		T_OPT="$OPTARG"
		target_status="0"
	;;
	
	*)
		T_OPT="$OPTARG"
		target_status="0"
	;;
	*)
	T_OPT="Unknown"
	target_status="1"
esac

}


# options status, used during debugging 
getopts_options_status() {

case "$QUIET" in
	1)
		# check the status of each option
		clear ||:
		echo "-------------------------------------------"
		echo -e ${C_G} "COMMAND LINE INPUT"${C_NC}
		echo "-------------------------------------------"

		# -b option
		if [[ $branch_status = "1" ]] ; then
			echo -e "$CHK2  -b Branch ..: $BDESC" ; readp_help_message
		else 
			echo -e "$CHK1  -b Branch ..: $BDESC"
		fi

		# -n option
		if [[ $name_status = "1" ]] ; then
			echo -e "$CHK2  -n Name ....: $N_OPT" ; readp_help_message
		else 
			echo -e "$CHK1  -n Name ....: $N_OPT"
		fi

		# -c option
		if [[ $config_status = "1" ]] ; then
			echo -e "$CHK2  -c Type .....: $C_OPT" ; readp_help_message
		else 
			echo -e "$CHK1  -c Type ....: $C_OPT"
		fi

		# -t option
		if [[ $target_status = "1" ]] ; then
			echo -e "$CHK2  -t Target ...: $T_OPT" ; readp_help_message
		else 
			echo -e "$CHK1  -t Target ..: $T_OPT"
		fi
		echo ''

		# display the help somethign fails, 
		if [[ $branch_status = "1" ]] || [[ $name_status = "1" ]] || \
		[[ $config_status = "1" ]] || [[ $target_status = "1" ]]
		then
			readp_help_message
		fi
	;;
esac

}

# configure variable based on user input ----------------------------------------
configure_options() {

# variables processed by the getopts functions
# N_OPT	-n Name, wsjtx, wsjtx-1.6.0 etc

# setup folders and urls
case $B_OPT in
	dev)
		APP_SRC="$SRCD/$N_OPT"
		APP_NAME="$N_OPT"
		URL="https://svn.code.sf.net/p/wsjt/wsjt/branches/$N_OPT"
	;;

	gar)
		APP_SRC="$SRCD/$N_OPT"
		APP_NAME="$N_OPT"
		URL="https://svn.code.sf.net/p/wsjt/wsjt/tags/$N_OPT"
	;;
esac

}


################################################################################
# MAIN SCRIPT FUNCTIONS
################################################################################

# display build message --------------------------------------------------------
build_message() {

clear ||:
case "$T_OPT" in
	install)	
		case "$QUIET" in
			1)
				echo 'JTSDK Option: [ CLEAN ] Enabled' ;;
			0)
				echo "-------------------------------------------"
				echo -e ${C_G} "WSJT-X [ INSTALL ] TARGET"${C_NC}
				echo "-------------------------------------------"
				echo ''
				echo ' The following build will be run:'
				echo ''
				echo " * Branch ..: $BDESC"
				echo " * Name ....: $N_OPT"
				echo " * Type ....: $C_OPT"
				echo " * Target ..: $T_OPT"
				echo ''
			;;
		esac
	;;

	package)
		case "$QUIET" in
			1)
				echo 'JTSDK Option: [ CLEAN ] Enabled' ;;
			0)
				echo "-------------------------------------------"
				echo -e ${C_G} "WSJT-X [ PACKAGE ] TARGET"${C_NC}
				echo "-------------------------------------------"
				echo ''
				echo ' The following build will be run:'
				echo ''
				echo " * Branch ..: $BDESC"
				echo " * Name ....: $N_OPT"
				echo " * Type ....: $C_OPT"
				echo " * Target ..: $T_OPT"
				echo ''
			;;
		esac
	;;

	docs)
		case "$QUIET" in
			1)
				echo 'JTSDK Option: [ CLEAN ] Enabled' ;;
			0)
				echo "-------------------------------------------"
				echo -e ${C_G} "WSJT-X [ USER GUIDE ] TARGET"${C_NC}
				echo "-------------------------------------------"
				echo ''
				echo ' The following build will be run:'
				echo ''
				echo " * Branch ..: $BDESC"
				echo " * Name ....: $N_OPT"
				echo " * Type ....: $C_OPT"
				echo " * Target ..: $T_OPT"
				echo ''
			;;
		esac
	;;
	
	*)
		echo "-------------------------------------------"
		echo -e ${C_F} "WSJT-X [ USER-DEFINED ] TARGET"${C_NC}
		echo "-------------------------------------------"
		echo ''
		echo ' The following build will be run:'
		echo ''
		echo " * Branch ..: $BDESC"
		echo " * Name ....: $N_OPT"
		echo " * Type ....: $C_OPT"
		echo " * Target ..: $T_OPT"
		echo ''
		echo ' NOTE: User Defined targets are *not* installed'
		echo '       by default, they are left in the Build'
		echo '       tree, and should run correctly from'
		echo '       location'
	;;
esac

}

# simple hamlib test -----------------------------------------------------------
hamlib_test() {
echo ''
echo '-------------------------------------------'
echo -e ${C_Y}' Testing Hamlib3'${C_NC}
echo '-------------------------------------------'
echo

if [[ -f $HL3I/bin/rigctl ]] ; then

	TEST=$($HL3I/bin/rigctl -m1 f)

	if [ "$TEST" == "145000000" ] ; then
		echo " Rig Control ......: OK"
		echo ' Tested With ......: rigctl -m1 f'
		echo ' Expected Result ..: 145000000'
		echo " Returned Result ..: $TEST"
	else
		echo "Rig Control Test .. FAILED"
		echo
		echo "If you have not built hamlib3 yet:"
		echo ''
		echo '1. Return to the Main Menu.'
		echo "2. Select Hamlib3 to build it."
		echo '3. Then try to build WSJT-X again'
		echo ''
		read -p "Press [Enter] to continue ..."
		exit
	fi
else
		echo "Cannot Find ( rigctl binary )"
		echo ''
		echo "If you have not built hamlib3 yet:"
		echo ''
		echo '1. Return to the Main Menu.'
		echo "2. Select Hamlib3 to build it."
		echo '3. Then try to build WSJT-X again'
		echo ''
		read -p "Press [Enter] to continue ..."
		exit
fi

}

#--------------------------------------------------- CHECKOUT or UPDATE FROM SVN
check_svn() {
echo ''
echo '-----------------------------------------------------'
echo -e ${C_Y}" SVN UPDATE"${C_NC}
echo '-----------------------------------------------------'
echo ''
# check skip svn
case "$SKIPSVN" in
	1)
		if [[ ! -d $APP_SRC/.svn ]] ; then 
			echo "Checking Out New Version of $APP_NAME"
			cd $SRCD
			svn co $URL
		else
			echo 'JTSDK Option: [ SKIPSVN ] Enabled'
		fi
	;;
	0)
esac

# check sutosvn
case "$AUTOSVN" in
	1)
		if [[ ! -d $APP_SRC/.svn ]]  ; then 
			echo "Checking Out New Version of $APP_NAME"
			cd $SRCD
			svn co $URL
		elif  [[ $SKIPSVN == "1" ]]  ; then 
			echo 'JTSDK Option: [ AUTOSVN ] Enabled, but skipping'
		else
			cd "$APP_SRC"
			echo "Updating ( $APP_NAME )"
			svn cleanup && svn update
		fi
	;;
	0)
	 echo 'JTSDK Option: Auto SVN Updates Disabled'
	;;
esac

}

# -------------------------------------------------------------- GET APP VERSION
# Note: must be performed "After" SVN checkout
get_app_version() {

echo ''
echo '-----------------------------------------------------'
echo -e ${C_Y}" BRANCH INFORMATION"${C_NC}
echo '-----------------------------------------------------'

# Example Versions.cmake
# ------------------------------------------------------------------------------
# set (WSJTX_VERSION_MAJOR 1)
# set (WSJTX_VERSION_MINOR 6)
# set (WSJTX_VERSION_PATCH 1)
# set (WSJTX_RC 0)					# release candidate number, comment out or zero for development versions
# set (WSJTX_VERSION_IS_RELEASE 0)	# set to 1 for final release build
# ------------------------------------------------------------------------------

VER_FILE="$APP_SRC/Versions.cmake"
# get Major number
MA=$(cat $VER_FILE |grep '_MAJOR' |awk '{print $3}' |cut -c1)

# get Minor number 
MI=$(cat $VER_FILE |grep '_MINOR' |awk '{print $3}' |cut -c1)

# get Patch number
PA=$(cat $VER_FILE |grep '_PATCH' |awk '{print $3}' |cut -c1)

# get RC version
RC=$(cat $VER_FILE |grep '_RC' |awk '{print $3}' |cut -c1)

# get Release Tag
REL=$(cat $VER_FILE |grep '_RELEASE' |awk '{print $3}' |cut -c1)

# Final Release Combinations
if [[ $REL == "1" ]] ; then AVER="$MA.$MI.$PA" ; fi
if [[ $RC != "0" ]] && [[ $REL == "1" ]] ; then AVER="$MA.$MI.$PA" ; fi

# Release Candidate
if [[ $RC == "0" ]] && [[ $REL == "0" ]] ; then AVER="$MA.$MI.$PA" ; fi
if [[ $RC != "0" ]] && [[ $REL == "0" ]] ; then AVER="$MA.$MI.$PA-rc$RC" ; fi

echo "-- Branch Version ..: $AVER"

# this is used for on screen displays only
case "$REL" in
	0)
		case "$RC" in
			0 )
				BTYPE="Development"
			;;
			*)
				BTYPE="Release Candidate"
			;;
		esac
	;;

	1)
		BTYPE="GA Release"
	;;
esac

}


# get the last changed svn number ----------------------------------------------
get_svn_revision() {

SVN_VER=$(svn info "$APP_SRC" |grep "Last Changed Rev:" |awk '{print $4}')
echo "-- SVN Revision ....: $SVN_VER"

}

# setup folder based on separation selection
check_separation() {

case "$SEPARATE" in
	1)
		BUILDD="$HOMEDIR/wsjtx/$B_OPT/$AVER/$SVN_VER/build/$C_OPT"
		INSTALLD="$HOMEDIR/wsjtx/$B_OPT/$AVER/$SVN_VER/install/$C_OPT"
		PKGD="$HOMEDIR/wsjtx/$B_OPT/$AVER/$SVN_VER/package"
	;;
	*)
		BUILDD="$HOMEDIR/wsjtx/$B_OPT/$N_OPT/build/$C_OPT"
		INSTALLD="$HOMEDIR/wsjtx/$B_OPT/$N_OPT/install/$C_OPT"
		PKGD="$HOMEDIR/wsjtx/$BOPT/$N_OPT/package"
	;;
esac

}

# TO-DO: update to add [ QUIET ] user option
# setup directories ------------------------------------------------------------
setup_dirs() {
echo ''
echo '-----------------------------------------------------'
echo -e ${C_Y}" SETUP DIRECTORIES for [ WSJT-X $AVER ]"${C_NC}
echo '-----------------------------------------------------'
echo ''
mkdir -p "$BUILDD" >/dev/null 2>&1
mkdir -p "$INSTALLD" >/dev/null 2>&1
mkdir -p "$PKGD" >/dev/null 2>&1

case "$QUIET" in
	1)
		echo 'JTSDK Option: [ QUIET ] Enabled' ;;
	*)
		echo " Status .......: $BTYPE"
		echo " Name .........: $N_OPT" 
		echo " App Version ..: $AVER r$SVN_VER"
		echo " Build Type ...: $C_OPT"
		echo " Source .......: $APP_SRC"
		echo " Build ........: $BUILDD"
		echo " Install ......: $INSTALLD"
		echo ''
	;;
esac
}

#-------------------------------------------------------------- CLEAN BUILD TREE
run_clean() {

case "$CLEAN" in
	1)
		if [[ -f "$BUILDD/Makefile" ]] ; then
			echo '-----------------------------------------------------'
			echo -e ${C_Y}" CLEANING BUILD TREE"${C_NC}
			echo '-----------------------------------------------------'
			echo ''
			cd "$BUILDD"
			echo 'JTSDK Option: [ CLEAN ] Enabled'
			make clean
		fi
	;;
esac

}

#----------------------------------------------------------------- RUN CONFIGURE
run_config() {

#------------------------------------------------------- wsjtx special case lang
cd "$BUILDD"
case "$CUSTOM" in
	1)
		larray=()
		cfgarray=()
		cfgopts=()

		# set these only in the WSJT-X Scrpt
		BACKTITLE="@PROGRAM@ @VERSION@"
		CMTITLE="  WSJT-X CUSTOM CONFIG MENU"
		CMPICKTITLE=" CMAKE OPTOINS LIST"
		CMMSG=" Arrow Up/Down, then [ Space Bar ] to Select Items\n
			  Use the [ Enter Key ] to Save Selections\n
				    ** Selecting Sets the Value ** "

		# get option list from CMakeLists.txt
		APP_SRC=/home/ki7mt/jtsdk/src/wsjtx
		olist=$(grep "option (" < "$APP_SRC/CMakeLists.txt" |cut -c 9- |awk '{print $1}' |sed '/^UPDATE_/d' | tr "\n" ' ')
		for i in $olist
		do
			larray+=("$i")
		done

		# loop through larray to create the needed --picklist menu
		n=1
		for opt in "${larray[@]}"
		do
			if [[ $opt  == *"_DOCS" ]] ; then status="OFF" ; else status="ON" ; fi
			list="$list $opt $status $n"
			n=$[n+1]
		done

# present user with the list of options
selections=$(dialog --ok-label " Set Option " --no-cancel \
--backtitle "$BACKTITLE" \
--title "$CMTITLE" \
--stdout \
--checklist "$CMMSG" 0 55 9 $list)

		# if the user selected something, add it to the cfgarray array
		if [[ $? -eq 0 ]]; then
			for i in $selections
			do
				if [[ $i  == *"_DOCS" ]] ; then
					item=$(echo $i | awk '{print "-D "$0"=OFF"}')
				else
					item=$(echo $i | awk '{print "-D "$0"=ON"}')
				fi
				cfgarray+=("$item")
			done

		else
			echo ''
			echo "Running Default CMakeList.txt Configuration"		
			echo ''	
		fi

CCMD='cmake -G "Unix Makefiles" -Wno-dev $(echo "${cfgarray[@]}") \
-D CMAKE_PREFIX_PATH:PATH="$HL3I" \
-D CMAKE_BUILD_TYPE="$C_OPT" \
-D CMAKE_INSTALL_PREFIX="$INSTALLD" "$APP_SRC"'


		# print the command
		echo ''
		echo "-- JTSDK Building Custom Configure Command"
		if [[ -z  ${cfgarray[@]} ]] ; then
			echo '-- JTSDK No options selected, using default options'
			echo '-----'
			echo "$CCMD"
			echo '-----'
		else
			echo ''
			echo "-- JTSDK Using CCMD : ${cfgarray[@]}"
			echo '-----'
			echo "$CCMD"
			echo '-----'
		fi
		echo ''

	# before we run the cmake command, remove the CMakeCache.txt file
	# to ensure it is rebuilt.
	rm -f "$BUILDD/CMakeCache.txt" > /dev/null 2>&1

	# now run the customized command
	eval "$CCMD"
	
	;;
	*)
		cd "$BUILDD"
		echo ''
		echo '-----------------------------------------------------'
		echo -e ${C_Y}" CONFIGURING [ WSJT-X $AVER $DESC ]"${C_NC}
		echo '-----------------------------------------------------'
		echo ''
		cfgarray=()
		if [[ $DOCS == "0" ]] ; then cfgarray+=("-D WSJT_GENERATE_DOCS=OFF") ; fi 
		if [[ $MANPAGES == "0" ]] ; then cfgarray+=("-D WSJT_SKIP_MANPAGES=ON") ; fi

RCMD='cmake -G "Unix Makefiles" -Wno-dev $(echo "${cfgarray[@]}") \
-D CMAKE_PREFIX_PATH:PATH="$HL3I" -D CMAKE_BUILD_TYPE="$C_OPT" \
-D CMAKE_INSTALL_PREFIX="$INSTALLD" "$APP_SRC"'

		# check if the user wanted to reconfigure
		case "$RCFG" in
			0)
				if 	[[ ! -f "$BUILDD/Makefile" ]] ; then
					echo 'JTSDK Message: Running Cmake on clean build tree'
					echo ''
					eval "$RCMD"
				else
					echo 'JTSDK Option: Cmake Configuration Disabled'
				fi
			;;
			*)
				if [[ -f "$BUILDD/Makefile" ]] ; then
					echo 'JTSDK Option: [ RCFG ] Enabled'
					echo ''
				else
					echo 'JTSDK Message: Running Cmake on clean build tree'
					echo ''
				fi
				eval "$RCMD"
			;;
		esac
	;;
esac


}

#--------------------------------------------------------------------- RUN BUILD
run_build() {
echo ''
echo '-----------------------------------------------------'
echo -e ${C_Y}" BUILDING TARGET [ $T_OPT ]"${C_NC}
echo '-----------------------------------------------------'
echo ''
cd "$BUILDD"

case "$T_OPT" in
	install) 
	cmake --build . -- -j "$JJ"
	link_kvasd ;;
	
	package) # default package build
	cmake --build . --target package -- -j "$JJ"
	cp -u "$BUILDD"/wsjtx*.deb "$PKGD"/ ;;

	docs) # default user-guide build
		cmake --build . --target docs  >/dev/null 2>&1
		echo " Finished building ..."
	 ;;

	*) # used for custom target building
	cmake --build . --target $T_OPT -- -j "$JJ"
	;;

esac

}


# build the target -------------------------------------------------------------
run_install_build() {

# this install the build target.
echo ''
echo '-----------------------------------------------------'
echo -e ${C_Y}" INSTALLING TARGET [ $T_OPT ]"${C_NC}
echo '-----------------------------------------------------'
echo ''
cd "$BUILDD"
case "$T_OPT" in
	install)
		cmake --build . --target install -- -j "$JJ"
		link_kvasd
	;;
	
	package)
		cp -u "$BUILDD"/wsjtx*.deb "$PKGD"/
		echo " Copied package to ..: $PKGD"
	;;

	docs)
		cd $BUILDD/doc
		make install >/dev/null 2>&1
		FILENAME=$(ls -al $INSTALLD/share/doc/wsjtx |grep 'html' |awk '{print $9}')
		echo " Finished installing ..."
		echo ''
	;;

esac

}


# check kvasd and link if wsjtx version is < 1.7.0 -----------------------------
function link_kvasd() {

declare -i minv="$MI"
declare -i maxv="7"
if (( $minv < $maxv )) ; then KREQ="Yes" ; fi

case "$KREQ" in
	Yes )
		# Link KVASD Binary to $INSTALLD/bin
		if [[ -f /usr/bin/kvasd ]] ; then
			mkdir -p "$INSTALLD/bin" >/dev/null 2>&1
			if [[ ! -L $INSTALLD/bin/kvasd ]] ; then ln -sf /usr/bin/kvasd "$INSTALLD"/bin/kvasd ; fi
   	    	if [[ $? = "0" ]] ; then KVSTATUS="OK" ; fi
		else
			KVSTATUS="Failed"
	        echo ''
	        echo '-------------------------------------------'
	        echo -e ${C_R}' KVASD WARNING'${C_NC}
	        echo '-------------------------------------------'
	        echo ''
	        echo ' * The KVASD Binary was not found in /usr/bin'
	        echo ' * Use the KVASD-Installer package to install the binary'
	        echo '   before running WSJT-X'
	        echo ' * After installation, in a terminal, you should link the'
	        echo '   binary to your installation directory, for example:'
	        echo ''
	        echo "   ln -s /usr/bin/kvasd $INSTALLD/bin/kvasd"
	        echo ''
	        echo ' * Alternatively, after installing the binary with KVASD-Installer,'
	        echo '   re-run the last build, which will automatically perform the'
	        echo '   link for you.'
	        echo ''
	        read -p "Press [ Enter ] to continue ..."
		fi ;;

    * )
         KVSTATUS="Not Required" ;;
esac

}

# finish message ---------------------------------------------------------------
finish_message() {
echo ''
echo '-----------------------------------------------------'
echo -e ${C_G}" BUILD SUMMARY"${C_NC}
echo '-----------------------------------------------------'
echo ''
case "$T_OPT" in
	install)
		echo " Status ...: $BTYPE"
		echo " Name .....: $N_OPT $AVER r$SVN_VER"		
		echo " SVN URL ..: $URL"
		echo " Source ...: $APP_SRC"
		echo " Build ....: $BUILDD"
		echo " Install ..: $INSTALLD"
		if [[ $KVSTATUS = "OK" ]] || [[ $KVSTATUS = "Not Required" ]] ; then
			echo -e ' KVASD ....: '${C_G}"$KVSTATUS"${C_NC}
		else
			echo -e ' KVASD ....: '${C_R}"$KVSTATUS"${C_NC}
		fi
		echo ''
		echo " TO RUN WSJT-X"
		echo " cd .......: $INSTALLD/bin"
		echo " Type, ....: ./wsjtx"
		echo ''
		echo ''
	;;

	package)
		PKG_NAME=$(ls -m1 $PKGD)
		echo " PKG Name ..: $PKG_NAME"
		echo " Version ...: $N_OPT $AVER r$SVN_VER"
		echo " SVN URL ...: $URL"
		echo " Source ....: $APP_SRC"
		echo " Build .....: $BUILDD"
		echo " Location ..: $PKGD"
		echo ''
	;;

	docs)
		echo ' At the time of the writing, the user-guide'
		echo ' is installed the same as performing a normal'
		echo ' build. Future updates to JTSDK-Nix may change'
		echo ' this behavior, leaving the document in the'
		echo ' build tree.' 	
		echo ''
		echo " Name ......: $FILENAME"
		echo " Version....: $N_OPT $AVER r$SVN_VER"
		echo " Location ..: $INSTALLD/share/doc/wsjtx"
		echo ''
	;;

	*) # user defined targets
		echo ' User-Defined target builds remain in the'
		echo ' build tree folder, they do not get installed.'
		echo ''
		echo ' Not all targets are available across all versions.'
		echo ' If you get a build error stating the target is unknown,'
		echo ' it may be due to the fact it did not exist in previous'
		echo ' versions of WSJT-X or earlier SVN revisions.'
		echo ''
		echo " Target ....: $T_OPT"
		echo " Version....: $N_OPT $AVER r$SVN_VER"
		echo " Location ..: $BUILDD"
		echo ''
	;;
esac

}


#-------------------------------------------------------------- WSJTX OPTION MSG
wsjtx_options_message() {
echo ' BUILD OPTIONS'
echo " Number of cores ......: $JJ"
if [[ -z ${cfgarray[@]} ]] ; then
	echo " Cmake  Options .......: Using Defaults"
else
	echo " Cmake  Options .......: ${cfgarray[@]}"
fi
if [[ -z ${wsjtx_options[@]} ]] ; then
echo -n " Global User Options ..: None"
echo ''
else
	echo -n " Global User Options ..: "
	for i in "${wsjtx_options[@]-}" ; do echo -n "$i " ; done ; echo ''
fi

}


#------------------------------------------------------------------ WSJT AUTORUN
auto_run() {
RCMD='./wsjtx'
case "$AUTORUN" in
	1)
		echo ''
		echo 'JTSDK Option: [ AUTORUN ] Enabled'
		echo ''
		cd "$INSTALLD/bin"
		eval "$RCMD"
	;;
esac

}

#------------------------------------------------------------------ WSJT AUTORUN
clean_up() {

# this ensures the wsjtx-custom file is *not* present as it will affect
# the configuration stage for normal builds
rm -f "$CFG/wsjtx-custom" > /dev/null 2>&1
if [[ $OCLEAN == "1" ]] ; then rm -f "$CFG/clean" > /dev/null 2>&1 ; fi
if [[ $ORCFG == "1" ]] ; then rm -f "$CFG/rcfg" > /dev/null 2>&1 ; fi

}


################################################################################
# START MAIN SCRIPT
################################################################################

# start getopts processing -----------------------------------------------------

# set these to "1" initially
branch_status="1"
name_status="1"
config_status="1"
target_status="1"
options=':hb:n:c:t:'

while getopts "$options" FLAG
do
	case "$FLAG" in
		h) cli_help ;;		
		b) getopts_branch_check ;;
		n) getopts_name_check ;;
		c) getopts_config_check ;;
		t) getopts_target_check ;;
		\? )
			clear ||:
			echo " Unknown option: -$OPTARG" >&2
			echo ''
			read -rp " Press [ Enter ] to view the help message"
			cli_help
			exit 1
		;;
	esac
done
shift "$((OPTIND-1))" # shift off the options

# getopts status message, disabled if [ quiet ] is set
getopts_options_status

# for -t (install | package ) targets ( -c Release | Debug )
build_array=('configure_options' 'build_message' 'check_svn' 'get_app_version' \
'get_svn_revision' 'check_separation' 'setup_dirs' 'run_clean' 'run_config' 'run_build' \
'run_install_build' 'link_kvasd' 'finish_message' 'wsjtx_options_message' \
'clean_up' 'auto_run')

# for user guide ( -t docs )
ug_array=('configure_options' 'build_message' 'check_svn' 'get_app_version' \
'get_svn_revision' 'check_separation' 'setup_dirs' 'run_clean' 'run_config' \
'run_build' 'run_install_build' 'finish_message' 'wsjtx_options_message')

# user defined target ( -t ?? )
ud_target=('configure_options' 'build_message' 'check_svn' 'get_app_version' \
'get_svn_revision' 'check_separation' 'setup_dirs' 'run_clean' 'run_config' \
'run_build' 'finish_message' 'wsjtx_options_message')

case "$T_OPT" in
	install|package)
		for i in "${!build_array[@]}" ; do ${build_array[$i]} ; done
	;;

	docs)
		for i in "${!ug_array[@]}" ; do ${ug_array[$i]} ; done
	;;

	*) # user defined targets
		for i in "${!ud_target[@]}" ; do ${ud_target[$i]} ; done
	;;

esac

exit 0
