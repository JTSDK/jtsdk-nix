#! /usr/bin/env bash
#
# Name			: jtsdk-wsjtx.sh
# Execution		: As normal user type: jtsdk-wsjtx.sh
# Copyright		: @COPYRIGHT@
# Contributors	: @AUTHORS@
# Comment		: Part of the JTSDK Linux Project
#
# @PROGRAM@ is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation either version 3 of the License, or
# (at your option) any later version. 
#
# @PROGRAM@ is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#-------------------------------------------------------------------------#

set -e

# variables passed from JTSDK Main Script
OPT1=$1		# dev or garc...: dev = ^/dev branches, garc = ^/tags branches
OPT2=$2		# branch name ..: ^/branches/wsjtx etc etc
OPT3=$3		# build type....: Release, Debug, Package or Doc

# set home and directory paths
HOMEDIR=~/jtsdk
SRCD="$HOMEDIR/src"
TMPD="$HOMEDIR/tmp"
LOGS="$HOMEDIR/logs"
CFG="$HOMEDIR/config"
MENU=@SHARE@
JJ=@JJJJ@
SEPARATE=@SEPARATE@

# hamlib3 directories
HL3SRC="$HOMEDIR/src/g4wjs-hamlib"
HL3B="$HOMEDIR/src/build/hamlib"
HL3I="$HOMEDIR/hamlib3"

# foreground colours
C_R='\033[01;31m'		# red
C_G='\033[01;32m'		# green
C_Y='\033[01;33m'		# yellow
C_C='\033[01;36m'		# cyan
C_NC='\033[01;37m'		# no color

# now set up the actual SVN URL based on OPT1 + OPT2
case $OPT1 in
	dev)
		APP_SRC="$SRCD/$OPT2"
		APP_NAME="$OPT2"
		OPTION=$OPT3
		URL="https://svn.code.sf.net/p/wsjt/wsjt/branches/$OPT2"
	;;
	garc)
		APP_SRC="$SRCD/$OPT2"
		APP_NAME="$OPT2"
		OPTION=$OPT3
		URL="https://svn.code.sf.net/p/wsjt/wsjt/tags/$OPT2"
	;;
esac

case $OPT3 in
	debug)
		DESC="Debug" ;;
	
	release)
		DESC="Release" ;;
		
	package)
		DESC="Package" ;;

	doc)
		DESC="User Guide"
esac


################################################################################
# FUNCTOINS
################################################################################

# simple hamlib test
hamlib_test() {
clear ||:
echo '-------------------------------------------'
echo -e ${C_Y}' Testing Hamlib3'${C_NC}
echo '-------------------------------------------'
echo

if [[ -f $HL3I/bin/rigctl ]] ; then

	TEST=$($HL3I/bin/rigctl -m1 f)

	if [ "$TEST" == "145000000" ] ; then
		echo " Rig Control ......: OK"
		echo ' Tested With ......: rigctl -m1 f'
		echo ' Expected Result ..: 145000000'
		echo " Returned Result ..: $TEST"
	else
		echo "Rig Controll Test .. FAILED"
		echo
		echo "If you have not built hamlib3 yet:"
		echo ''
		echo '1. Return to the Main Menu.'
		echo "2. Select Hamlib3 to build it."
		echo '3. Then try to build WSJT-X again'
		echo ''
		read -p "Press [Enter] to continue ..."
		exit
	fi
else
		echo "Cannot Find ( rigctl binary )"
		echo ''
		echo "If you have not built hamlib3 yet:"
		echo ''
		echo '1. Return to the Main Menu.'
		echo "2. Select Hamlib3 to build it."
		echo '3. Then try to build WSJT-X again'
		echo ''
		read -p "Press [Enter] to continue ..."
		exit
fi

}

check_svn() {
echo ''
echo '-----------------------------------------------------'
echo -e ${C_Y}" SVN UPDATE"${C_NC}
echo '-----------------------------------------------------'

if [[ ! -d $APP_SRC/.svn ]]
then
	echo ''
	echo "Checking Out New Version of $APP_NAME"
	cd $SRCD
	svn co $URL
else
	# Yy / Nn answer to update from svn	
	while [ 1 ]
	do
		echo ''
		read -p "Update from SVN Before Building? [ Y/N ]: " yn
		case $yn in
		
		[Yy]* )
			cd "$APP_SRC"
			echo "Updating ( $APP_NAME )"
			svn cleanup && svn update
			break ;;
		
		[Nn]* )
			echo "Nothign to be done..."
			break ;;
		
		* )
			clear ||:
			echo "Please use "Y" yes or "N" No." ;;
		esac
	done
fi
}

# get WSJTX Version information from: Version.cmake
# Note: must be performed "After" SVN checkout
get_version() {

echo ''
echo '-----------------------------------------------------'
echo -e ${C_Y}" CHECK APP && SVN VERSIONS"${C_NC}
echo '-----------------------------------------------------'

# Example Versions.cmake
# ------------------------------------------------------------------------------
# set (WSJTX_VERSION_MAJOR 1)
# set (WSJTX_VERSION_MINOR 6)
# set (WSJTX_VERSION_PATCH 1)
# set (WSJTX_RC 0)					# release candidate number, comment out or zero for development versions
# set (WSJTX_VERSION_IS_RELEASE 0)	# set to 1 for final release build
# ------------------------------------------------------------------------------

VER_FILE="$APP_SRC/Versions.cmake"
# get Major number
MA=$(cat $VER_FILE |grep '_MAJOR' |awk '{print $3}' |cut -c1)

# get Minor number 
MI=$(cat $VER_FILE |grep '_MINOR' |awk '{print $3}' |cut -c1)

# get Patch number
PA=$(cat $VER_FILE |grep '_PATCH' |awk '{print $3}' |cut -c1)

# get RC version
RC=$(cat $VER_FILE |grep '_RC' |awk '{print $3}' |cut -c1)

# get Release Tag
REL=$(cat $VER_FILE |grep '_RELEASE' |awk '{print $3}' |cut -c1)

# Final Release Combinations
if [[ $REL == "1" ]] ; then AVER="$MA.$MI.$PA" ; fi
if [[ $RC != "0" ]] && [[ $REL == "1" ]] ; then AVER="$MA.$MI.$PA" ; fi

# R Release Candidate
if [[ $RC == "0" ]] && [[ $REL == "0" ]] ; then AVER="$MA.$MI.$PA" ; fi
if [[ $RC != "0" ]] && [[ $REL == "0" ]] ; then AVER="$MA.$MI.$PA-rc$RC" ; fi

echo "-- Repository Version Is ..: $AVER"

}

# get the last changed svn number
get_svn_revision() {

SVN_VER=$(svn info "$APP_SRC" |grep "Last Changed Rev:" |awk '{print $4}')
echo "-- SVN Revision Is ........: $SVN_VER"

}

function link_kvasd() {
# Only display KVASD message for RC (v1.6.x series ) as 
declare -i minv="$MI"
declare -i maxv="7"
if (( $minv < $maxv )) ; then KREQ="Yes" ; fi

case "$KREQ" in
	Yes )
		# Link KVASD Binary to $INSTALLD/bin
		if [[ -f /usr/bin/kvasd ]] ; then
			echo "-- Linking KVASD binary to: $INSTALLD/bin"
    	    if [[ ! -L $INSTALLD/bin/kvasd ]] ; then ln -sf /usr/bin/kvasd "$INSTALLD"/bin/kvasd ; fi
    	    if [[ $? = "0" ]] ; then KVSTATUS="OK" ; fi
		else
			KVSTATUS="Failed"
	        echo ''
	        echo '-------------------------------------------'
	        echo -e ${C_R}' KVASD WARNING'${C_NC}
	        echo '-------------------------------------------'
	        echo ''
	        echo ' * The KVASD Binary was not found in /usr/bin'
	        echo ' * Use the KVASD-Installer package to install the binary'
	        echo '   before running WSJT-X'
	        echo ' * After installation, in a terminal, you should link the'
	        echo '   binary to your installation directory, for example:'
	        echo ''
	        echo "   ln -s /usr/bin/kvasd $INSTALLD/bin/kvasd"
	        echo ''
	        echo ' * Alternatively, after installing the binary with KVASD-Installer,'
	        echo '   re-run the last build, which will automatically perform the'
	        echo '   link for you.'
	        echo ''
	        read -p "Press [ Enter ] to continue ..."
		fi ;;

    * )
         KVSTATUS="Not Required" ;;
esac

}


# setup folder based on separation selection
check_separation() {

if [ $SEPARATE == "Yes" ] ; then 
	BUILDD="$HOMEDIR/wsjtx/$OPT1/$AVER/$SVN_VER/build/$OPTION"
	INSTALLD="$HOMEDIR/wsjtx/$OPT1/$AVER/$SVN_VER/install/$OPTION"
	PKGD="$HOMEDIR/wsjtx/$OPT1/$AVER/$SVN_VER/package"

else
	BUILDD="$HOMEDIR/wsjtx/$OPT1/$AVER/build/$OPTION"
	INSTALLD="$HOMEDIR/wsjtx/$OPT1/$AVER/install/$OPTION"
	PKGD="$HOMEDIR/wsjtx/$OPT1/$AVER/package"
fi

}


# make sure the build and install directories exist
setup_dirs() {
echo ''
echo '-----------------------------------------------------'
echo -e ${C_Y}" SETUP DIRECTORIES"${C_NC}
echo '-----------------------------------------------------'
echo ''
mkdir -p "$BUILDD" >/dev/null 2>&1
mkdir -p "$INSTALLD" >/dev/null 2>&1
mkdir -p "$PKGD" >/dev/null 2>&1
echo " App Version ..: $AVER r$SVN_VER"
echo " Build Type ...: $OPTION"
echo " Source .......: $APP_SRC"
echo " Build ........: $BUILDD"
echo " Install ......: $INSTALLD"
echo ''

}


################################################################################
# START MAIN SCRIPT
################################################################################
clear ||:

# check hamlib3 is installed and working
hamlib_test
# ask update from svn
check_svn

# check version data
get_version
get_svn_revision

# check if seperatoin is enabled
check_separation

# setup directories
setup_dirs

# run cmake configure step
echo
echo '-----------------------------------------------------'
echo -e ${C_Y}" CONFIGURING ( WSJT-X $AVER $DESC )"${C_NC}
echo '-----------------------------------------------------'
echo ''
cd "$BUILDD"
cmake -G "Unix Makefiles" -Wno-dev \
-D CMAKE_PREFIX_PATH:PATH="$HL3I" \
-D CMAKE_BUILD_TYPE="$OPTION" \
-D CMAKE_INSTALL_PREFIX="$INSTALLD" "$APP_SRC"

# build the target
echo ''
echo '-----------------------------------------------------'
echo -e ${C_Y}" BUILDING ( WSJT-X $AVER $DESC )"${C_NC}
echo '-----------------------------------------------------'
echo ''
cd "$BUILDD"
case "$OPTION" in
	Release*|Debug* )
	cmake --build . --target install -- -j "$JJ"
	link_kvasd ;;
	
	package )
	cmake --build . --target package -- -j "$JJ"
	cp -u "$BUILDD"/wsjtx*.deb "$PKGD"/ ;;

	*Guide )
	cmake --build . --target docs  >/dev/null 2>&1
	cd $BUILDD/doc
	make install DESTDIR="$INSTALLD"  >/dev/null 2>&1
	FILENAME=$(ls -al $INSTALLD/share/doc/wsjtx |grep 'html' |awk '{print $9}')
	echo "Finished Building..: $FILENAME"
	echo '' ;;
	
	*)
	;;
esac


# finish message
echo ''
echo '-----------------------------------------------------'
echo -e ${C_G}" BUILD SUMMARY ( WSJT-X $AVER $DESC )"${C_NC}
echo '-----------------------------------------------------'
echo ''
case "$OPTION" in
	Release*|Debug* )
		echo " App Version ...: $AVER r$SVN_VER"
		echo " Build Type ....: $OPTION"
		echo " Source ........: $APP_SRC"
		echo " Build .........: $BUILDD"
		echo " Install .......: $INSTALLD"
		if [[ $KVSTATUS = "OK" ]] || [[ $KVSTATUS = "Not Required" ]] ; then
			echo -e ' KVASD Status ..: '${C_G}"$KVSTATUS"${C_NC}
		else
			echo -e ' KVASD Status ..: '${C_R}"$KVSTATUS"${C_NC}
		fi
		echo ''
		echo " TO RUN $APP_NAME"
		echo " cd ...........: $INSTALLD/bin"
		echo " Type, ........: ./wsjtx"
		echo ''
		read -p "Press [ Enter ] to continue.."
	;;
	package* )
		PKG_NAME=$(ls -m1 $PKGD)
		echo " Type ......: $OPTION"
		echo " Name ......: $PKG_NAME"
		echo " Location ..: $PKGD"
		echo ''
		read -p "Press [ Enter ] to continue .."
	;;
	Guide*)
		echo "Document Name ..: $FILENAME"
		echo "Location .......: $INSTALLD/share/doc/wsjtx"
		echo ''
		read -p "Press [ Enter ] to continue .." ;;
	* )
	;;
esac

exit 0
