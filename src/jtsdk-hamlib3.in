#! /usr/bin/env bash
#
# Name			: jtsdk-hamlib3.sh
# Execution		: As normal user type: jtsdk-hamlib3.sh
# Copyright		: @COPYRIGHT@
# Contributors	: @AUTHORS@
# Comment		: Part of the @PROGRAM@ Linux Project
#
# @PROGRAM@ is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation either version 3 of the License, or
# (at your option) any later version. 
#
# @PROGRAM@ is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#-------------------------------------------------------------------------#

set -e

# set home and directory paths
HOMEDIR=@HOMEDIR@
MENU=@SHARE@
SRCD="$HOMEDIR/src"
TMPD="$HOMEDIR/tmp"
LOGS="$HOMEDIR/logs"


# hamlib3 directories
HL3SRC="$HOMEDIR/src/g4wjs-hamlib"
HL3B="$HOMEDIR/src/build/hamlib"
HL3I="$HOMEDIR/hamlib3"


# misc variables
JJ=@JJJJ@
HAMLIBURL="git://git.code.sf.net/u/bsomervi/hamlib"
LOG="$LOGS"/hamlib-build.log
PKG_NAME=Hamlib3
TODAY=$(date +"%d-%m-%Y")
TIMESTAMP=$(date +"%d-%m-%Y at %R")
BUILDER=$(whoami)

# Foreground colours
C_R='\033[01;31m'		# red
C_G='\033[01;32m'		# green
C_Y='\033[01;33m'		# yellow
C_C='\033[01;36m'		# cyan
C_NC='\033[01;37m'		# no color

make_pkg_list() {

if [ -f "$TMPD"/pkg_list_hamlib3 ]; then rm -f "$TMPD"/pkg_list_hamlib3 ; fi
touch "$TMPD"/pkg_list_hamlib3

(
cat <<'EOF_HAMLIB3'
bin/rigctl
bin/rigctld
bin/rigmem
bin/rigsmtr
bin/rigswr
bin/rotctl
bin/rotctld
lib/libhamlib.a
lib/libhamlib.la
lib/pkgconfig/hamlib.pc
include/hamlib/rig.h
include/hamlib/rigclass.h
include/hamlib/rig_dll.h
include/hamlib/riglist.h
include/hamlib/rotator.h
include/hamlib/rotclass.h
include/hamlib/rotlist.h
EOF_HAMLIB3
) > "$TMPD"/pkg_list_hamlib3

}

# post build test-1 (file check)
post_build_test1() {
echo
echo '[1]' "Test-1 (file check)"
rm -rf "$TMPD"/counter && touch "$TMPD"/counter

# check that files exist at least
while read f; do
	if [[ -f $HL3I/$f ]]; then
		echo -e " $f"'..'${C_G}'OK'${C_NC}
		echo "$f" >> "$TMPD"/counter
	else
		echo -e "$f"'..'${C_R}' MISSING '${C_NC}
	fi
done < "$TMPD"/pkg_list_hamlib3

# get counter info
LINES=$(wc -l < "$TMPD"/counter)
if [[ $LINES -ge "16" ]]; then
	echo -e ${C_G}" Passed"${C_NC}
	echo
	T1_STATUS=OK
else
	echo
	echo "Something went wrong with the build."
	echo "The build script will exit. Check the"
	echo "build log to investigate possible cause."
	echo
	echo "Log: $LOG"
	echo 
	read -p "Press [Enter] to continue ..."
fi
}

# post build test2 (rigctl test)
post_build_test2() {

echo '[2]' "Test-2 (rigctl check)"
TEST2=$($HL3I/bin/rigctl -m1 f)

if [[ $TEST2 == "145000000" ]]; then
	echo " Rig Control ......: OK"
	echo ' Tested With ......: rigctl -m1 f'
	echo ' Expected Result ..: 145000000'
	echo " Returned Result ..: $TEST2"
	echo -e ${C_G}' Passed'${C_NC}
	echo ''
	T2_STATUS=OK
else
	echo "Rig Controll .. FAILED"
	echo "The build script will exit. Check the"
	echo "build log."
	echo
	echo "Log: $LOG"
	echo 
	echo "to investigate the cause."
	echo 
	read -p "Press [Enter] to continue ..."
	clean_exit
fi
}

################################################################################
# START MAIN SCRIPT
################################################################################
clear
echo "-------------------------------------------"
echo -e ${C_Y} "BUILDING [ $PKG_NAME ]"${C_NC}
echo "-------------------------------------------"
echo

# make package list
make_pkg_list

# setup the log
if [[ -f $LOG ]]; then
	mv $LOG $LOG-$(date +"%Y%m%d%H%M")
	touch $LOG
else
	touch $LOG
fi

cd $HOMEDIR
mkdir -p $HL3B
if [[ -f $HL3SRC/autogen.sh ]]; then
	echo 'Performing Git Pull and Integration Update'
	cd $HL3SRC
	git pull
	git checkout integration
else
	if [[ -d $HL3SRC ]]; then rm -rf $HL3SRC ; fi
	cd $SRCD
	git clone git://git.code.sf.net/u/bsomervi/hamlib g4wjs-hamlib
	cd $SRCD/g4wjs-hamlib
	git checkout integration
fi

# Run configure
cd $HL3B
echo ''
echo '---------------------------------------------------------------'
echo -e ${C_Y} "CONFIGURING [ $PKG_NAME ]"${C_NC}
echo '---------------------------------------------------------------'
echo ''
if [ "$1" = "shared" ]; then

	# Build shared
	echo -en "Build Type: " && echo -e ${C_G}'Shared'${C_NC}
	echo ''
	$HL3SRC/autogen.sh --prefix=$HL3I \
	--enable-shared \
	--disable-static \
	--disable-winradio \
	--without-cxx-binding \
	CC='gcc' \
	CXX='g++' \
	CFLAGS='-fdata-sections -ffunction-sections' \
	LDFLAGS='-Wl,--gc-sections'

else

	# Build Static ( default )
	echo -en "Build Type: " && echo -e ${C_G}'Static'${C_NC}
	echo ''
	$HL3SRC/autogen.sh --prefix=$HL3I \
	--disable-shared \
	--enable-static \
	--disable-winradio \
	--without-cxx-binding \
	CC='gcc' \
	CXX='g++' \
	CFLAGS='-fdata-sections -ffunction-sections' \
	LDFLAGS='-Wl,--gc-sections'
fi

# Make clean check
if [ -f $HL3B/tests/rigctld ];
then
	echo ''
	echo '---------------------------------------------------------------'
	echo -e ${C_Y} "RUNNING MAKE CLEAN [ $PKG_NAME ]"${C_NC}
	echo '---------------------------------------------------------------'
	echo ''
	make clean
fi

# Run make
echo ''
echo '----------------------------------------------------------------'
echo -e ${C_Y} "RUNNING MAKE ALL [ $PKG_NAME ]"${C_NC}
echo '----------------------------------------------------------------'
echo ''
make -j"$JJ"

# Run make install-strip
echo ''
echo '----------------------------------------------------------------'
echo -e ${C_Y} "INSTALLING [ $PKG_NAME ]"${C_NC}
echo '----------------------------------------------------------------'
echo ''
make install-strip

# Run simple post build tests
echo ''
echo '----------------------------------------------------------------'
echo -e ${C_Y} "TESTING [ $PKG_NAME ]"${C_NC}
echo '----------------------------------------------------------------'
post_build_test1
post_build_test2

# Generate README if build finishes .. OK ..
if [ $? = "0" ];
then

	if [ -f $HL3I/$PKG_NAME.build.info ]; then rm -f $HL3I/$PKG_NAME.build.info ; fi

	echo ''
	echo '---------------------------------------------------------------'
	echo -e ${C_Y} "BUILD INFO [ $PKG_NAME.build.info ] "${C_NC}
	echo '---------------------------------------------------------------'
	echo ''
	echo ' Creating Hamlib3 Build Info File'

# Generate Build Info File
(
cat <<EOF

# Package Information
Build Date...: $TIMESTAMP
Builder......: $BUILDER
Prefix.......: $HL3I
Pkg Name.....: $PKG_NAME
Pkg Version..: development

# Source Location and Integration
Git URL......: git://git.code.sf.net/u/bsomervi/hamlib
Git Extra....: git checkout integration'

# Configure Options <for Static>
autogen.sh --prefix=$PREFIX --disable-shared --enable-static \
--disable-winradio --without-cxx-binding CC=$TC/gcc.exe \
CXX=$TC/g++.exe CFLAGS='-fdata-sections -ffunction-sections' \
LDFLAGS='-Wl,--gc-sections'

# Configure Options <for Shared>
autogen.sh --prefix=$PREFIX --disable-static --enable-shared \
--disable-winradio --without-cxx-binding CC=$TC/gcc.exe \
CXX=$TC/g++.exe CFLAGS='-fdata-sections -ffunction-sections' \
LDFLAGS='-Wl,--gc-sections'

# Build Commands
make
make install-strip

EOF
) > $HL3I/$PKG_NAME.build.info
fi

echo ''
echo '------------------------------------------------'
echo -e ${C_G} "FINISHED BUILDING  [ $PKG_NAME ]"${C_NC}
echo '------------------------------------------------'
echo ''
echo " Test 1 ...: $T1_STATUS"
echo " Test 2 ...: $T2_STATUS"
echo " Source ...: $HL3SRC"
echo " Build ....: $HL3B"
echo " Install ..: $HL3I"
echo " Pkg-Cfg ..: $HL3I/lib/pkgconfig/hamlib3.pc"
echo ''
echo ''
read -p "Press [Enter] to continue .."

exit 0

