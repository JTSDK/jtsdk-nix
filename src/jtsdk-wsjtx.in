#! /usr/bin/env bash
#
# Name			: jtsdk-wsjtx.sh
# Execution		: As normal user type: jtsdk-wsjtx.sh
# Copyright		: @COPYRIGHT@
# Contributors	: @AUTHORS@
# Comment		: Part of the JTSDK Linux Project
#
# @PROGRAM@ is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation either version 3 of the License, or
# (at your option) any later version. 
#
# @PROGRAM@ is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#-------------------------------------------------------------------------#

set -e

# variables passed from JTSDK Main Script
OPT1=$1		# dev or garc...: dev = ^/dev branches, garc = ^/tags branches
OPT2=$2		# branch name ..: ^/branches/wsjtx etc etc
OPT3=$3		# build type ...: Release, Debug, Package, Docs, or User-Defined $VAR

# set home and directory paths
HOMEDIR=~/jtsdk
SRCD="$HOMEDIR/src"
TMPD="$HOMEDIR/tmp"
LOGS="$HOMEDIR/logs"
CFG="$HOMEDIR/config"
MENU=@SHARE@
JJ=@JJJJ@
SEPARATE=@SEPARATE@

# hamlib3 directories
HL3SRC="$HOMEDIR/src/g4wjs-hamlib"
HL3B="$HOMEDIR/src/build/hamlib"
HL3I="$HOMEDIR/hamlib3"

# foreground colours
C_R='\033[01;31m'		# red
C_G='\033[01;32m'		# green
C_Y='\033[01;33m'		# yellow
C_C='\033[01;36m'		# cyan
C_NC='\033[01;37m'		# no color

# now set up the actual SVN URL based on OPT1 + OPT2
case $OPT1 in
	dev)
		APP_SRC="$SRCD/$OPT2"
		APP_NAME="$OPT2"
		OPTION=$OPT3
		URL="https://svn.code.sf.net/p/wsjt/wsjt/branches/$OPT2"
	;;

	garc)
		APP_SRC="$SRCD/$OPT2"
		APP_NAME="$OPT2"
		OPTION=$OPT3
		URL="https://svn.code.sf.net/p/wsjt/wsjt/tags/$OPT2"
	;;
	
	*)
		clear ||:
		echo "-------------------------------------------"
		echo -e ${C_R} "CONFIGURATION ERROR [ $OPT1 ]"${C_NC}
		echo "-------------------------------------------"
		echo ''
		echo ' COMMAND LINE USAGE'
		echo ''
		echo ' jtsdk-wsjtx [ $1 ] [ $2 ] [ $3 ]'
		echo ''
		echo ' [ $1 ] only accepts one of two arguments:'
		echo ''
		echo ' dev ...: designates devel branches ^/branches'
		echo ' garc ..: designates GA and RC branches ^/tags'
		echo ''
		echo ' Please correct the entry, then reissue the command.'
		echo ''
		exit 1
	;;
esac

# minimal arg validation
case $OPT3 in
	Release)
		DESC="Release"
	;;
	
	Debug)
		DESC="Debug"
	;;
	
	package)
		DESC="Package"
	;;

	docs)
		DESC="User Guide"
	;;

	*) # if $3 is NULL, set Release as default
		if [[ -z $OPT3 ]] ; then
			OPT3="Release"
			DESC="Release"
		else
			# this has the potential to cause build failures if the target is
			# not valid.
			OPTION="Release"
			DESC="$OPT3"
		fi
	;;
esac


################################################################################
# FUNCTIONS
################################################################################

# display build message --------------------------------------------------------
build_message() {

clear ||:
case $OPT3 in
	Release|Debug)	
		echo "-------------------------------------------"
		echo -e ${C_G} "WSJT-X BUILD for [ $OPT2 $DESC ]"${C_NC}
		echo "-------------------------------------------"
		echo ''
		echo ' This selection will perform the following:'
		echo ''
		echo ' * Checkout or Update WSJT-X from SVN'
		echo " * Configure the $DESC Target"
		echo ' * Compile the application'
		echo " * Install $OPT2 $DESC to your home directory"
		echo ''
	;;

	package)
		echo "-------------------------------------------"
		echo -e ${C_G} "WSJT-X PACKAGE for [ $OPT2 ]"${C_NC}
		echo "-------------------------------------------"
		echo ''
		echo ' This selection will perform the following:'
		echo ''
		echo ' * Checkout or Update WSJT-X from SVN'
		echo " * Configure and Build the $OPT2 Release Target"
		echo ' * Generate a package suitable for installation'		
	;;

	doc)
		echo "-------------------------------------------"
		echo -e ${C_G} "WSJT-X USER GUIDE for [ $OPT2 ]"${C_NC}
		echo "-------------------------------------------"
		echo ''
		echo ' This selection will perform the following:'
		echo ''
		echo ' * Checkout or Update WSJT-X from SVN'
		echo ' * Configure the build'
		echo ' * Generate the HTML document' 
	;;
	
	*)
		echo "-------------------------------------------"
		echo -e ${C_R} "USER DEFINED TARGET [ $OPT3 ]"${C_NC}
		echo "-------------------------------------------"
		echo ''
		echo ' This selection will perform the following:'
		echo ''
		echo ' * Checkout or Update WSJT-X from SVN'
		echo ' * Configure the build'
		echo " * Run the build for a single target: $OPT3"
		echo ' * It will *NOT* install the custom target'
	;;
esac

}

# simple hamlib test -----------------------------------------------------------
hamlib_test() {
echo '-------------------------------------------'
echo -e ${C_Y}' Testing Hamlib3'${C_NC}
echo '-------------------------------------------'
echo

if [[ -f $HL3I/bin/rigctl ]] ; then

	TEST=$($HL3I/bin/rigctl -m1 f)

	if [ "$TEST" == "145000000" ] ; then
		echo " Rig Control ......: OK"
		echo ' Tested With ......: rigctl -m1 f'
		echo ' Expected Result ..: 145000000'
		echo " Returned Result ..: $TEST"
	else
		echo "Rig Controll Test .. FAILED"
		echo
		echo "If you have not built hamlib3 yet:"
		echo ''
		echo '1. Return to the Main Menu.'
		echo "2. Select Hamlib3 to build it."
		echo '3. Then try to build WSJT-X again'
		echo ''
		read -p "Press [Enter] to continue ..."
		exit
	fi
else
		echo "Cannot Find ( rigctl binary )"
		echo ''
		echo "If you have not built hamlib3 yet:"
		echo ''
		echo '1. Return to the Main Menu.'
		echo "2. Select Hamlib3 to build it."
		echo '3. Then try to build WSJT-X again'
		echo ''
		read -p "Press [Enter] to continue ..."
		exit
fi

}


# chekout or update from svn --------------------------------------------------
check_svn() {
echo ''
echo '-----------------------------------------------------'
echo -e ${C_Y}" SVN UPDATE"${C_NC}
echo '-----------------------------------------------------'

if [[ ! -d $APP_SRC/.svn ]]
then
	echo ''
	echo "Checking Out New Version of $APP_NAME"
	cd $SRCD
	svn co $URL
else
	# Yy / Nn answer to update from svn	
	while [ 1 ]
	do
		echo ''
		read -p "Update from SVN Before Building? [ Y/N ]: " yn
		case $yn in
		
		[Yy]* )
			cd "$APP_SRC"
			echo "Updating ( $APP_NAME )"
			svn cleanup && svn update
			break ;;
		
		[Nn]* )
			echo "Nothign to be done..."
			break ;;
		
		* )
			clear ||:
			echo "Please use "Y" yes or "N" No." ;;
		esac
	done
fi
}

# get WSJTX Version information from: Version.cmake ----------------------------
# Note: must be performed "After" SVN checkout
get_app_version() {

echo ''
echo '-----------------------------------------------------'
echo -e ${C_Y}" GET APPLICATION VERSION"${C_NC}
echo '-----------------------------------------------------'

# Example Versions.cmake
# ------------------------------------------------------------------------------
# set (WSJTX_VERSION_MAJOR 1)
# set (WSJTX_VERSION_MINOR 6)
# set (WSJTX_VERSION_PATCH 1)
# set (WSJTX_RC 0)					# release candidate number, comment out or zero for development versions
# set (WSJTX_VERSION_IS_RELEASE 0)	# set to 1 for final release build
# ------------------------------------------------------------------------------

VER_FILE="$APP_SRC/Versions.cmake"
# get Major number
MA=$(cat $VER_FILE |grep '_MAJOR' |awk '{print $3}' |cut -c1)

# get Minor number 
MI=$(cat $VER_FILE |grep '_MINOR' |awk '{print $3}' |cut -c1)

# get Patch number
PA=$(cat $VER_FILE |grep '_PATCH' |awk '{print $3}' |cut -c1)

# get RC version
RC=$(cat $VER_FILE |grep '_RC' |awk '{print $3}' |cut -c1)

# get Release Tag
REL=$(cat $VER_FILE |grep '_RELEASE' |awk '{print $3}' |cut -c1)

# Final Release Combinations
if [[ $REL == "1" ]] ; then AVER="$MA.$MI.$PA" ; fi
if [[ $RC != "0" ]] && [[ $REL == "1" ]] ; then AVER="$MA.$MI.$PA" ; fi

# R Release Candidate
if [[ $RC == "0" ]] && [[ $REL == "0" ]] ; then AVER="$MA.$MI.$PA" ; fi
if [[ $RC != "0" ]] && [[ $REL == "0" ]] ; then AVER="$MA.$MI.$PA-rc$RC" ; fi

echo "-- Repository Version Is ..: $AVER"

case $REL in
	0)
		case $RC in
			0 )
				BTYPE="Development"
			;;
			*)
				BTYPE="Release Candicate"
			;;
		esac
	;;

	1)
		BTYPE="GA Release"
	;;
esac

}


# get the last changed svn number ----------------------------------------------
get_svn_revision() {

SVN_VER=$(svn info "$APP_SRC" |grep "Last Changed Rev:" |awk '{print $4}')
echo "-- SVN Revision Is ........: $SVN_VER"

}

# setup folder based on separation selection
check_separation() {

if [ $SEPARATE == "Yes" ] ; then 
	BUILDD="$HOMEDIR/wsjtx/$OPT1/$AVER/$SVN_VER/build/$OPT3"
	INSTALLD="$HOMEDIR/wsjtx/$OPT1/$AVER/$SVN_VER/install/$OPT3"
	PKGD="$HOMEDIR/wsjtx/$OPT1/$AVER/$SVN_VER/package"

else
	BUILDD="$HOMEDIR/wsjtx/$OPT1/$OPT2/build/$OPT3"
	INSTALLD="$HOMEDIR/wsjtx/$OPT1/$OPT2/install/$OPT3"
	PKGD="$HOMEDIR/wsjtx/$OPT1/$OPT2/package"
fi

}


# setup directories ------------------------------------------------------------
setup_dirs() {
echo ''
echo '-----------------------------------------------------'
echo -e ${C_Y}" SETUP DIRECTORIES for [ WSJT-X $AVER ]"${C_NC}
echo '-----------------------------------------------------'
echo ''
mkdir -p "$BUILDD" >/dev/null 2>&1
mkdir -p "$INSTALLD" >/dev/null 2>&1
mkdir -p "$PKGD" >/dev/null 2>&1
echo " App Version ..: $AVER r$SVN_VER $BTYPE"
echo " Build Type ...: $OPTION"
echo " Source .......: $APP_SRC"
echo " Build ........: $BUILDD"
echo " Install ......: $INSTALLD"
echo ''

}


# run cmake configure step -----------------------------------------------------
run_cmake() {
echo ''
echo '-----------------------------------------------------'
echo -e ${C_Y}" CONFIGURING [ WSJT-X $AVER $DESC ]"${C_NC}
echo '-----------------------------------------------------'
echo ''
cd "$BUILDD"
cmake -G "Unix Makefiles" -Wno-dev \
-D CMAKE_PREFIX_PATH:PATH="$HL3I" \
-D CMAKE_BUILD_TYPE="$OPTION" \
-D CMAKE_INSTALL_PREFIX="$INSTALLD" "$APP_SRC"

}


# build the target -------------------------------------------------------------
run_build() {
echo ''
echo '-----------------------------------------------------'
echo -e ${C_Y}" BUILDING  [ WSJT-X $AVER $DESC ]"${C_NC}
echo '-----------------------------------------------------'
echo ''
cd "$BUILDD"
case "$OPT3" in
	Release|Debug)
	cmake --build . -- -j "$JJ"
	link_kvasd ;;
	
	package)
	cmake --build . --target package -- -j "$JJ"
	cp -u "$BUILDD"/wsjtx*.deb "$PKGD"/ ;;

	doc)
		cmake --build . --target docs  >/dev/null 2>&1
		echo " Finnished building ..."
	 ;;

	*) # used for custom target building
	cmake --build . --target $OPT3 -- -j "$JJ"
	;;

esac

}


# build the target -------------------------------------------------------------
run_install_build() {
echo ''
echo '-----------------------------------------------------'
echo -e ${C_Y}" INSTALLING [ WSJT-X $AVER $DESC ]"${C_NC}
echo '-----------------------------------------------------'
echo ''
cd "$BUILDD"
case "$OPT3" in
	Release|Debug)
		cmake --build . --target install -- -j "$JJ"
		link_kvasd
	;;
	
	package)
		cp -u "$BUILDD"/wsjtx*.deb "$PKGD"/
		echo " Copied package to ..: $PKGD"
	;;

	doc)
		cd $BUILDD/doc
		make install >/dev/null 2>&1
		FILENAME=$(ls -al $INSTALLD/share/doc/wsjtx |grep 'html' |awk '{print $9}')
		echo " Finished installing ..."
		echo ''
	;;

esac

}


# check kvasd and link if wsjtx version is < 1.7.0 -----------------------------
function link_kvasd() {

declare -i minv="$MI"
declare -i maxv="7"
if (( $minv < $maxv )) ; then KREQ="Yes" ; fi

case "$KREQ" in
	Yes )
		# Link KVASD Binary to $INSTALLD/bin
		if [[ -f /usr/bin/kvasd ]] ; then
			mkdir -p "$INSTALLD/bin" >/dev/null 2>&1
			if [[ ! -L $INSTALLD/bin/kvasd ]] ; then ln -sf /usr/bin/kvasd "$INSTALLD"/bin/kvasd ; fi
   	    	if [[ $? = "0" ]] ; then KVSTATUS="OK" ; fi
		else
			KVSTATUS="Failed"
	        echo ''
	        echo '-------------------------------------------'
	        echo -e ${C_R}' KVASD WARNING'${C_NC}
	        echo '-------------------------------------------'
	        echo ''
	        echo ' * The KVASD Binary was not found in /usr/bin'
	        echo ' * Use the KVASD-Installer package to install the binary'
	        echo '   before running WSJT-X'
	        echo ' * After installation, in a terminal, you should link the'
	        echo '   binary to your installation directory, for example:'
	        echo ''
	        echo "   ln -s /usr/bin/kvasd $INSTALLD/bin/kvasd"
	        echo ''
	        echo ' * Alternatively, after installing the binary with KVASD-Installer,'
	        echo '   re-run the last build, which will automatically perform the'
	        echo '   link for you.'
	        echo ''
	        read -p "Press [ Enter ] to continue ..."
		fi ;;

    * )
         KVSTATUS="Not Required" ;;
esac

}

# finish message ---------------------------------------------------------------
finish_message() {
echo ''
echo '-----------------------------------------------------'
echo -e ${C_G}" BUILD SUMMARY [ WSJT-X $AVER $OPT3 ]"${C_NC}
echo '-----------------------------------------------------'
echo ''
case "$OPT3" in
	Release*|Debug)
		echo " Version ..: $AVER r$SVN_VER $BTYPE"
		echo " SVN URL ..: $URL"
		echo " Source ...: $APP_SRC"
		echo " Build ....: $BUILDD"
		echo " Install ..: $INSTALLD"
		if [[ $KVSTATUS = "OK" ]] || [[ $KVSTATUS = "Not Required" ]] ; then
			echo -e ' KVASD ....: '${C_G}"$KVSTATUS"${C_NC}
		else
			echo -e ' KVASD ....: '${C_R}"$KVSTATUS"${C_NC}
		fi
		echo ''
		echo " TO RUN [ $OPT2 $AVER r$SVN_VER ]"
		echo " cd .......: $INSTALLD/bin"
		echo " Type, ....: ./wsjtx"
		echo ''
	;;

	package)
		PKG_NAME=$(ls -m1 $PKGD)
		echo " Version ...: $AVER r$SVN_VER $BTYPE"
		echo " Name ......: $PKG_NAME"
		echo " SVN URL ...: $URL"
		echo " Source ....: $APP_SRC"
		echo " Build .....: $BUILDD"
		echo " Location ..: $PKGD"
		echo ''
	;;

	docs)
		echo " Version ...: $AVER r$SVN_VER $BTYPE"
		echo " Name ......: $FILENAME"
		echo " Location ..: $INSTALLD/share/doc/wsjtx"
		echo ''
	;;

	*)
		echo " Target ..: $OPT3"
		echo " Build ...: $BUILDD"
		echo ''
	;;
esac

}


################################################################################
# START MAIN SCRIPT
################################################################################

# for Release, Debug and package targets
build_array=('build_message' 'hamlib_test' 'check_svn' 'get_app_version' \
'get_svn_revision' 'check_separation' 'setup_dirs' 'run_cmake' 'run_build' \
'run_install_build' 'link_kvasd' 'finish_message')

# for user guide
ug_array=('build_message' 'check_svn' 'get_app_version' 'get_svn_revision' \
'check_separation' 'setup_dirs' 'run_cmake' 'run_build' 'run_install_build' \
'finish_message')

ud_target=('build_message' 'check_svn' 'get_app_version' \
'get_svn_revision' 'check_separation' 'setup_dirs' 'run_cmake' 'run_build' \
'finish_message')

case $OPT3 in
	Release|Debug|package)
		for i in "${!build_array[@]}" ; do ${build_array[$i]} ; done
	;;

	doc)
		for i in "${!ug_array[@]}" ; do ${ug_array[$i]} ; done
	;;
	*)
		for i in "${!ud_target[@]}" ; do ${ud_target[$i]} ; done
	;;

esac

echo ''		
read -p " Press [ Enter ] to continue..."

exit 0
