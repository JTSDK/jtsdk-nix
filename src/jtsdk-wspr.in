#! /usr/bin/env bash
#
# Name ..........: jtsdk-wspr.sh
# Execution .....: Called from @PROGRAM@ main script
# Copyright .....: @COPYRIGHT@
# License .......: @LICENSE@
# Contributors ..: @AUTHORS@
# Comment .......: Part of the @PROGRAM@ Linux Project
#
# jtsdk-wspr is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation either version 3 of the License, or
# (at your option) any later version. 
#
# jtsdk-wspr is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#-------------------------------------------------------------------------#

set -e

# grab the number of command line arguments
NARGS=$#

# Foreground colors
C_R='\033[01;31m'		# red
C_G='\033[01;32m'		# green
C_Y='\033[01;33m'		# yellow
C_C='\033[01;36m'		# cyan
C_NC='\033[01;37m'		# no color

# set home and directory paths
HOMEDIR=~/jtsdk
SRCD="$HOMEDIR/src"
TMPD="$HOMEDIR/tmp"
LOGS="$HOMEDIR/logs"
CFG="$HOMEDIR/config"
OPTION=$1

# app specfic options
APP_NAME=wspr
APP_SRC="$SRCD/$APP_NAME"
URL="https://svn.code.sf.net/p/wspr/wspr/branches/wspr"

# fixed expansions from JTSDK configure.ac
MENU=@SHARED@
PYTHON3=@PYTHON3@
F2PY3=@F2PY@

# options based on JTSDK configure.ac
#
# Note(s):
# [1] these features can be reset with with jtsdk -e [FEATURE] -d [FEATURE]
# [2] for resetting JJ use jtsdk -c
# [3] manpages, docs, and separate are enabled by default
# [4] while available, @PROGRAM@ does not use parallel compiling due to F2PY
#
# SEPARATE = separate by svn revision
# BDOC     = disable user guides
# BMANP    = disable manpages
JJ=@JJJJ@

# check global user defined options ( see jtsdk -h )
# add each option enabled to jtsdk_options array
wspr_options=()
if [[ -f $CFG/autorun ]] ; then AUTORUN=1 && wspr_options+=('autorun') ; else AUTORUN=0 ; fi
if [[ -f $CFG/autosvn ]] ; then AUTOSVN=1 && wspr_options+=('autosvn') ; else AUTOSVN=0 ; fi
if [[ -f $CFG/clean ]] ; then CLEAN=1 && wspr_options+=('clean') ; else CLEAN=0 ; fi
if [[ -f $CFG/cores ]] ; then CORES=$(awk 'FNR==1 {print $0}' < $CFG/cores) ; else CORES=$JJ ; fi
if [[ -f $CFG/docs ]] ; then BDOC=1 && wspr_options+=('docs') ; else BDOC=0 ; fi
if [[ -f $CFG/manpages ]] ; then BMANP=1 && wspr_options+=('manpages') ; else BMANP=0 ; fi
if [[ -f $CFG/quiet ]] ; then QUIET=1 && wspr_options+=('quiet') ; else QUIET=0 ; fi
if [[ -f $CFG/rcfg ]] ; then RCFG=1 && wspr_options+=('rcfg') ; else RCFG=0 ; fi
if [[ -f $CFG/separate ]] ; then SEPARATE=1 && wspr_options+=('separate') ; else SEPARATE=0 ; fi
if [[ -f $CFG/skipsvn ]] ; then SKIPSVN=1 && wspr_options+=('skipsvn') ; else SKIPSVN=0 ; fi


################################################################################
# FUNCTOINS
################################################################################


#--------------------------------------------------- CHECKOUT or UPDATE FROM SVN
check_svn() {
echo ''
echo '-----------------------------------------------------'
echo -e ${C_Y}" SVN UPDATE"${C_NC}
echo '-----------------------------------------------------'
echo ''
# check skip svn
case "$SKIPSVN" in
	1)
		if [[ ! -d $APP_SRC/.svn ]] ; then 
			echo "Checking Out New Version of $APP_NAME"
			cd $SRCD
			svn co $URL
		else
			echo 'JTSDK Option: [ SKIPSVN ] Enabled'
		fi
	;;
	0)
esac

# check sutosvn
case "$AUTOSVN" in
	1)
		if [[ ! -d $APP_SRC/.svn ]]  ; then 
			echo "Checking Out New Version of $APP_NAME"
			cd $SRCD
			svn co $URL
		elif  [[ $SKIPSVN -eq 1 ]]  ; then 
			echo 'JTSDK Option: [ AUTOSVN ] Enabled, but skipping'
		else
			cd "$APP_SRC"
			echo "Updating ( $APP_NAME )"
			svn cleanup && svn update
		fi
	;;
	0)
	 echo 'JTSDK Option: Auto SVN Updates Disabled'
	;;
esac
}


#---------------------------------------------------------- WSPR GET APP VERSION
get_version() {
# Example
# Version="4.0 r" + "$Rev: 5247 $"[6:-1]
echo ''
echo '-----------------------------------------------------'
echo -e ${C_Y}" CHECK APP and SVN REVISIONS"${C_NC}
echo '-----------------------------------------------------'
AVER=$(cat $APP_SRC/wspr.py |grep 'Version="' |awk '{print $1}' |cut -c10-13)
echo ''
echo " Application Version..: $AVER"

}

#---------------------------------------------------------- WSPR GET SVN VERSION
get_svn_revision() {

SVN_VER=$(svn info "$APP_SRC" |grep "Last Changed Rev:" |awk '{print $4}')
echo " SVN Revision.........: $SVN_VER"

}

#--------------------------------------------------------------- WSPR SETUP DIRS
setup_dirs() {
echo ''
echo '-----------------------------------------------------'
echo -e ${C_Y}" SETUP DIRECTORIES"${C_NC}
echo '-----------------------------------------------------'
echo ''
case "$SEPARATE" in
	1)
		BUILDD="$APP_SRC"
		INSTALLD="$HOMEDIR/$APP_NAME/$AVER/$SVN_VER/install"
	;;
	*)
		BUILDD="$APP_SRC"
		INSTALLD="$HOMEDIR/$APP_NAME/$AVER/install"
	;;
esac

# make the directories
mkdir -p "$INSTALLD" >/dev/null 2>&1

case "$QUIET" in
	1)
		echo 'JTSDK Option: [ QUIET ] Enabled' ;;
	*)
		echo " Name .........: WSPR" 
		echo " App Version ..: $AVER r$SVN_VER"
		echo " Source .......: $APP_SRC"
		echo " Build ........: $APP_SRC"
		echo " Install ......: $INSTALLD"
		echo ''
	;;
esac

}

#---------------------------------------------------------------- WSPR RUN CLEAN
run_clean() {
cd "$BUILDD"
case "$CLEAN" in
	1)
		if [[ -f "$BUILDD/Makefile" ]] ; then
		echo ''
		echo '-----------------------------------------------------'
		echo -e ${C_Y}'RUN MAKE DISTCLEAN FIRST'${C_NC}
		echo '-----------------------------------------------------'
		echo ''
		echo 'JTSDK Option: [ CLEAN ] Enabled'
		echo ''
		cd "$APP_SRC"
		make distclean
		echo ''
		fi
	;;
esac

}

#--------------------------------------------------------------- WSPR RUN CONFIG
run_config() {
echo ''
echo '-----------------------------------------------------'
echo -e ${C_Y}" RUN AUTOCONF and CONFIGURE"${C_NC}
echo '-----------------------------------------------------'
echo ''
cd "$BUILDD"

# add prefix to config array
cfgarray=("--prefix=$INSTALLD")

# add docs and manpage options to config array
if [[ $BDOC -eq 0 ]] ; then cfgarray+=("--disable-docs") ; fi 
if [[ $BMANP -eq 0 ]] ; then cfgarray+=("--disable-manpages") ; fi

# configure command
CCMD="./configure"

case "$RCFG" in
	0)
		if 	[[ ! -f "$BUILDD/Makefile" ]] ; then
			echo 'JTSDK Message .....: Run ( autoreconf -f -i ) on clean build tree'
			autoreconf -f -i
			eval "$CCMD $(echo ${cfgarray[@]})"
		fi
	;;
	1)
		if [[ -f "$BUILDD/Makefile" ]] ; then
			echo 'JTSDK Option ......: [ RCFG ] Enabled'
		else
			echo 'JTSDK Message .....: Run ( autoreconf -f -i ) on clean build tree'
		fi
		echo "JTSDK Config Options ..: ${cfgarray[@]}"
		echo ''
		autoreconf -f -i
		eval "$CCMD $(echo ${cfgarray[@]})"
	;;
esac

}

#----------------------------------------------------------------- WSPR RUN MAKE
run_build() {
cd "$BUILDD"
echo
echo '-----------------------------------------------------'
echo -e ${C_Y}'RUNNING MAKE'${C_NC}
echo '-----------------------------------------------------'
echo ''
make

}

#------------------------------------------------------------------ WSPR INSTALL
run_install_build() {
echo
echo '-----------------------------------------------------'
echo -e ${C_Y}'INSTALL WSPR'${C_NC}
echo '-----------------------------------------------------'
echo ''
cd "$APP_SRC"
mkdir -p "$INSTALLD"/{doc/examples,save/Samples,WsprMod,manpages}

echo "..Installing Binaries"
binaries=(fmtest fcal fmeasure fmtave wspr0 wsprcode)
for i in "${binaries[@]}"
do
	install -m 755 -s $i "$INSTALLD" 
done

echo "..Installing Python3 Files"
install -m 755 gocal Pmw*.py wspr.py wsprrc "$INSTALLD"
install -m 755 WsprMod/{*.py,*.so} "$INSTALLD"/WsprMod

echo "..Installing Sample Wav Files"
install -m 644 save/Samples/* "$INSTALLD"/save/Samples/

echo "..Installing Misc Text Files"
install -m 644 AUTHORS	README NEWS COPYING COPYRIGHT "$INSTALLD"
install -m 644 doc/examples/* "$INSTALLD"/doc/examples/

echo "..Generating Hamlib Rig List"
rigctl -l >> "$INSTALLD/r.l" || {
rigctl_error
}
if [[ -f $INSTALLD/hamlib_rig_numbers ]] ; then rm -f "$INSTALLD/hamlib_rig_numbers" ; fi
awk 'NR > 3 { print }' < "$INSTALLD/r.l" > "$INSTALLD/hamlib_rig_numbers"
sed  -i 's .\{2\}  ' "$INSTALLD/hamlib_rig_numbers"
rm -f "$INSTALLD/r.l"

echo "..Installing Runtime Script"
rm -f "$INSTALLD/$APP_NAME.sh" >/dev/null 2>&1
touch "$INSTALLD/$APP_NAME.sh" && chmod +x "$INSTALLD/$APP_NAME.sh"
(
cat <<EOF_WSPR
#!/usr/bin/env bash
#-------------------------------------------------------------------------------
# File Name:    wspr.sh
# Description:  Shell script wrapper to run wspr
#				JTSDK auto generated file
#-------------------------------------------------------------------------------

set -e

# python3 path is updated from configure script
cd $INSTALLD
env PYTHONPATH="$INSTALLD/WsjtMod" @PYTHON3@ -O ./wspr.py

EOF_WSPR
) > "$INSTALLD"/wspr.sh

# install manpages, only if BMANP=1
case "$BMANP" in
	1)
		# Manpages and User Guide
		for f in ./manpages/*.1 ; do
			echo "..Installing $f"
			install -m 644 "$f" "$INSTALLD"/manpages/
		done
	;;
esac

# install docs, only if DOCS=1
case "$BDOC" in
	1)
		echo "..Installing $(ls -al ./doc/wspr-main* |awk '{print $9}')"
		install -m 644 doc/wspr-main*.html "$INSTALLD/doc/"
		DOCNAME=$(ls -al doc/wspr-main* |awk '{print $9}' |rev | cut -d"/" -f1 | rev)
	;;
esac

}


#----------------------------------------------------------- WSPR FINISH MESSAGE
finish_message() {
echo ''
echo '-----------------------------------------------------'
echo -e ${C_G}"BUILD SUMMARY"${C_NC}
echo '-----------------------------------------------------'
echo ''
echo " Name .........: $APP_NAME"
echo " Version ......: $AVER"
echo " SVN Version ..: r$SVN_VER"
if [[ $DOCS -eq 1 ]] ; then
echo " User Guide ...: $DOCNAME"
fi
echo " Source .......: $APP_SRC"
echo " Install ......: $INSTALLD"
echo " SVN URL ......: $URL"

}

#--------------------------------------------------------- BUILD OPTIONS MESSAGE
wspr_options_message() {
echo ''
echo ' BUILD OPTIONS'
echo " Number of cores ......: $JJ"
if [[ -z ${cfgarray[@]} ]] ; then
		echo " Makefile Options .....: Using Defaults"
else
	echo " Makefile Options .....: ${cfgarray[@]}"
fi
if [[ -z ${wspr_options[@]} ]] ; then
echo -n " Global User Options ..: None"
echo ''
else
	echo -n " Global User Options ..: "
	for i in "${wspr_options[@]-}" ; do echo -n "$i " ; done ; echo ''
fi

}


#------------------------------------------------------------------- RUN MESSAGE
run_message() {
echo ''
echo " TO RUN $APP_NAME"
echo " cd ...........: $INSTALLD"
echo " Type, ........: ./$APP_NAME.sh"

}

#------------------------------------------------------------------ WSPR AUTORUN
auto_run() {

# what to open
RCMD='env PYTHONPATH="$INSTALLD/WsjtMod" @PYTHON3@ -O ./wspr.py'
case "$AUTORUN" in
	1)
		echo ''
		echo 'JTSDK Option: [ AUTORUN ] Enabled'
		echo ''
		cd "$INSTALLD"
		eval "$RCMD"
	;;
esac

}


################################################################################
# START MAIN SCRIPT
################################################################################

clear ||:
check_svn
get_version
get_svn_revision
setup_dirs
run_clean
run_config
run_build
run_install_build
finish_message
wspr_options_message
run_message
auto_run

exit 0

