#! /usr/bin/env bash
#
# Name			: jtsdk-wspr.sh
# Execution		: As normal user type: jtsdk-wspr.sh
# Copyright		: @JTSDK_COPYRIGHT@
# Contributors	: @JTSDK_AUTHORS@
# Comment		: Part of the JTSDK Linux Project
#
# @PROGRAM@ is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation either version 3 of the License, or
# (at your option) any later version. 
#
# @PROGRAM@ is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#-------------------------------------------------------------------------#

set -e

# set $1 var from jtsdk main scipt
TARGET=$1

# set home and directory paths
HOMEDIR=/home/$LOGNAME/jtsdk
SRCD="$HOMEDIR/src"
TMPD="$HOMEDIR/tmp"
LOGS="$HOMEDIR/logs"
MENU=@SHARE@

# app specfic options
APP_NAME=wspr
APP_SRC="$SRCD/$APP_NAME"
URL="https://svn.code.sf.net/p/wsjt/wsjt/branches/wspr"
SEPARATE=@SEPARATE@
PYTHON3=@PYTHON3@
F2PY3=@F2PY3@

# Foreground colours
C_R='\033[01;31m'		# red
C_G='\033[01;32m'		# green
C_Y='\033[01;33m'		# yellow
C_C='\033[01;36m'		# cyan
C_NC='\033[01;37m'		# no color

################################################################################
# FUNCTOINS
################################################################################
check_svn() {

if [[ ! -d $APP_SRC/.svn ]]
then
	echo
	echo " Checking Out New Version of $APP_NAME"
	cd $SRCD
	svn co $URL
else
	# Yy / Nn answer to update from svn	
	while [ 1 ]
	do
		echo
		read -p " Update from SVN Before Building? [ Y/N ]: " yn
		case "$yn" in
		
		[Yy]* )
			cd "$APP_SRC" 
			echo " Updating ( $APP_NAME )"
			svn cleanup && svn update
			break ;;
		[Nn]* )
			echo ' Nothing to be done..'
			break ;;
		
		* )
			clear
			echo " Please use "Y" yes or "N" No." ;;
		esac
	done
fi

}

# get WSPR Version information from: wspy.py
get_version_info() {

# Example
# ------------------------------------------------------------------------------
# Using wspy.py line: Version="4.0 r" + "$Rev: 4889 $"[6:-2]
# ------------------------------------------------------------------------------

AVER=$(cat $APP_SRC/wspr.py |grep 'Version="' |awk '{print $1}' |cut -c10-13)
SVN_VER=$(svn info "$APP_SRC" |grep "Last Changed Rev:" |awk '{print $4}')
echo " Application Version..: $AVER"
echo " SVN Version..........: $SVN_VER"
}

################################################################################
# START MAIN SCRIPT
################################################################################

# start the build
clear
echo '-----------------------------------------------------'
echo -e ${C_Y}" STARTING BUILD for ( WSPR )"${C_NC}
echo '-----------------------------------------------------'
check_svn

echo ''
echo '-----------------------------------------------------'
echo -e ${C_Y}" CHECK APP and SVN REVISIONS"${C_NC}
echo '-----------------------------------------------------'
get_version_info

echo ''
echo '-----------------------------------------------------'
echo -e ${C_Y}" SETTING UP DIRRECTORIES"${C_NC}
echo '-----------------------------------------------------'

# setup install locaiton
if [ $SEPARATE == "Yes" ] ; then 
	INSTALLD="$HOMEDIR/$APP_NAME/$AVER/r$SVN_VER/install"
	echo ' Using Enable Separate'
else
	INSTALLD="$HOMEDIR/$APP_NAME/$AVER/install"
	echo ' Using Consolidated Install Location'
fi

# Make sure directories are present, in case they were deleted
echo " Install Location: $INSTALLD"
echo ' Creating Install Directory'
mkdir -p $INSTALLD

# reun autoreconf to generate configure and makfiles
echo ''
echo '-----------------------------------------------------'
echo -e ${C_Y}' RUN AUTORECONF'${C_NC}
echo '-----------------------------------------------------'
cd "$APP_SRC"
# clelan first
if [[ -f Makefile ]] ; then
	echo " Running make clean first"
	make clean >/dev/null 2>&1
fi
# run autoreconf to generate new Makefile & configure script
echo ' Generating Makefile and Configure scripts'
autoreconf -f -i

echo ''
echo '-----------------------------------------------------'
echo -e ${C_Y}'RUN CONFIGURE'${C_NC}
echo '-----------------------------------------------------'
echo ''
./configure --prefix="$INSTALLD" --with-python3=$PYTHON3 --with-f2py=$F2PY3

# Note: This is done manually due to the way WSPR runs in a normal system
# This is only needed for use with JTSDK
echo '-----------------------------------------------------'
echo -e ${C_Y}"COMPILING [ $TARGET ] TARGET "${C_NC}
echo '-----------------------------------------------------'
case "$TARGET" in
	user-guide )
	make user-guide
	echo ' Creating Doc directory'
	mkdir -p "$INSTALLD"/doc
	echo " Copying wspr-main-$AVER.html"
	cp -u $APP_SRC/doc/wspr-main-$AVER.html $INSTALLD/doc/
	echo " Location..: "$INSTALLD"/doc/wspr-main-$AVER.html"
	echo ''
	read -p "Press [ENTER] to continue ..." ;;
	install )	
	echo ''
	echo '-----------------------------------------------------'
	echo -e ${C_Y}'INSTALLING WSPR'${C_NC}
	echo '-----------------------------------------------------'
	echo ''
	echo ' Installing Base Files'
	mkdir -p "$INSTALLD"/{doc/examples,save/Samples,WsprMod,man1}
	install -m 644 save/Samples/* "$INSTALLD"/save/Samples/
	install -m 755 gocal Pmw*.py wspr.py wsprrc "$INSTALLD"
	install -m 644 AUTHORS	README NEWS COPYING COPYRIGHT "$INSTALLD"
	install -m 644 hamlib_rig* "$INSTALLD"
	install -m 755 WsprMod/* "$INSTALLD"/WsprMod
	install -m 644 manpages/*.1 "$INSTALLD"/man1
	install -m 644 doc/wspr-main-$AVER.html "$INSTALLD"/doc
	install -m 644 doc/examples/* "$INSTALLD"/doc/examples/
	chmod -R 644 "$INSTALLD"/doc/examples/*
	
	# loop through binaries && install strip
	echo ' Installing binaries'
	binaries=(fmtest fcal fmeasure fmtave wspr0 wsprcode)
	for i in "${binaries[@]}"
	do
		install -m 755 -s $i "$INSTALLD" 
	done
	
	# Prepare for new wspr.sh script
	echo ' Generating wspr.sh script'
	rm -f "$INSTALLD/$APP_NAME.sh"
	touch "$INSTALLD/$APP_NAME.sh" && chmod +x "$INSTALLD/$APP_NAME.sh"
	
# Generate a simple wsspr.sh run script
(
cat <<'EOF_WSPRSH'
#!/usr/bin/env bash
#-------------------------------------------------------------------------------
# File Name:    wspr.sh
# Description:  Shell script wrapper to run wspr
#				JTSDK auto generated file
#-------------------------------------------------------------------------------
set -e

# python3 path is updated form @PROGRAM@
@PYTHON3@ -O wspr.py

EOF_WSPRSH
) > "$INSTALLD"/wspr.sh

	# ensure ownership is for the current user
	echo " Changing Install Ownership To [ $USER ]"
	chown -R "$USER":"$USER" "$INSTALLD"
	
	# Finished
	echo
	echo '-----------------------------------------------------'
	echo -e ${C_G}"BUILD SUMMARY for ( WSPR )"${C_NC}
	echo '-----------------------------------------------------'
	echo ''
	echo " Source ......: $APP_SRC"
	echo " Install .....: $INSTALLD"
	echo " Manpages.....: $INSTALLD/man1"
	echo " User Guide ..: $INSTALLD/doc/wspr-main-$AVER.html"
	echo ''
	echo ' FMT Tools'
	echo " Install .....: $INSTALLD"
	echo ''
	echo " TO RUN $APP_NAME"
	echo " cd ..........: $INSTALLD"
	echo " Type, .......: ./$APP_NAME.sh"
	echo ''
	read -p "Press [ Enter ] to return to the main menu .."
	exit 0 ;;
	* )
	exit 0 ;;
esac





