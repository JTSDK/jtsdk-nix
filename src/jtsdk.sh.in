#! /usr/bin/env bash
#
# Name			: @PROGRAM@ @VERSION@
# Execution		: As normal user type: jtsdk
# Copyright		: @COPYRIGHT@
# Contributors	: @AUTHORS@
# Comment		: Part of the JTSDK Linux Project
#
# @PROGRAM@ is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation either version 3 of the License, or
# (at your option) any later version. 
#
# @PROGRAM@ is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#-------------------------------------------------------------------------#

set -e

# set reasonable menu height & width.
# This is an ANSI sequence, and should
# work in most Xterm windows
echo -e "\e[8;30;100t"

# host informaiton
HOST_OS=@HOST_OS@
HOST_CPU=@HOST_CPU@

# set home directory path
HOMEDIR=@HOMEDIR@

# home directory paths
LOGS=@LOGD@
SRCD=@SRCD@
DOCS=@DOCDIR@
TMP=@TMPD@
MKRD=@MKRD@
HAMLIBD=@HAMLIBD@
ADOCD=@ADOCD@

################################################################################
# Language Section
################################################################################

# backtitle lang
BACKTITLE="@PROGRAM@ @VERSION@"

# root chk lang
RCTITLE="ROOT / SUDO CHECK FAILED"
RCMSG="    @PROGRAM@ must be run as normal user, not root or sudo.\n\
          Please run "$0" without "sudo" prefix"

# dialog lang
DITITLE="DIALOG INSTALL"
DIMSG="        @PROGRAM@ Will now install Dialog Msg CLient"
DISUCTITLE="DIALOG INSTALL COMPLETE"
DISUCMSG="\n      Dialog Install Complete."

# sig catch lang
SIGCAUGHT="   SIGNAL CAUGHT"
SIGCAUGHTMSG="\n   Signal Caught, Performing Cleanup Routine"
CLEANTMP=" CLEANING TMP"
CLEANTMPMSG="\n         Cleaning Up Temporary Files"
RESETOPT=" RESET OPTIONS"
RESETOPTMSG="\n         Restteing Used Bash Options"
CLEANVAR=" CLEANING VARS"
CLEANVARMSG="\n             Unset Used Variables"

# exit lang
EXITWSDT=" EXIT @PROGRAM@"
EXITWSDTMSG="\n      Performing Shutdown Cleanup Routine"

# main menu lang
MMTITLE=" @PROGRAM@ MAIN MENU"
MENUMSG="            Key the letter then hit [ENTER]\n\
     Arrow Up/Dwn or '+' or '-' Keys to Navigate\n\n"

# applicaiton menu title's
WSJTXTITLE=" WSJT-X BUILD MENU"
WSJTXRCTITLE=" WSJT-X RC BUILD MENU"

# help menu lang
HTITLE="APPLICATION BUILD HELP DOCUMENT"
WSJTXHELPTITLE="WSJT-X BUILD HELP"
WSJTXRCHELPTITLE="WSJT-X RC BUILD HELP"

# setup check lang
SETUPTITLE="  SETUP REQUIRED"
SETUPMSG="\n   In Order to use @PROGRAM@, you must first run setup.sh \n\
     Select 'OK' then at command prompt run: ./setup.sh\n"

# under development
UD=" UNDER DEVELOPMENT"
UDMSG="\n      Build Selection is Under Development"

# main menu
touch @TMPD@/MMenu.tmp
cat << 'EOF' > @TMPD@/MMenu.tmp 
"1" "WSJT ..... v10.0  (devel)" \
"2" "WSPR ..... v4.0.0 (devel)" \
"3" "WSJT-X ... v1.5.0 (devel)" \
"4" "WSJT-X ... v1.4.0 (RC3)" \
"5" "Hamlib3 .. v3.0.0 (devel)" \
"H" "Help" \
"E" "Exit"
EOF

# WSJTX 1.5.0 devel menu
touch @TMPD@/WSJTXMenu.tmp
cat << 'EOF' > @TMPD@/WSJTXMenu.tmp 
"1" "Release Target" \
"2" "Debug Target" \
"H" "Help" \
"B" "Back"
EOF

# WSJTX 1.4.0 release candidate menu
touch @TMPD@/WSJTXRCMenu.tmp
cat << 'EOF' > @TMPD@/WSJTXRCMenu.tmp 
"1" "Release Target" \
"2" "Debug Target" \
"H" "Help" \
"B" "Back"
EOF

################################################################################
# Functions Section
################################################################################

#--set options------------------------------------------------------------------
set_options() {
set -e                 # exit immediately on any error
set -o pipefail        # pipeline fail retun exit status
set -u                 # undefined variables
} # end set flags


#--unset options----------------------------------------------------------------
function unset_options() {
set +e
set +o pipefail
set +u
}


#--under development------------------------------------------------------------
function under_development() {

dialog --backtitle "$BACKTITLE" --title "$UD" --msgbox "$UDMSG" 7 50

}


#--signal catch-----------------------------------------------------------------
sig_catch_cleanup() {
EXIT_STATUS="$?"

if [[ "$EXIT_STATUS" == "0" ]]
then
   clean_exit

else

dialog --backtitle "$BACKTITLE" --title "$SIGCAUGHT" --infobox "$SIGCAUGHTMSG" 5 50
	sleep 1

dialog --backtitle "$BACKTITLE" --title "$CLEANTMP" --infobox "$CLEANTMPMSG" 5 50
	rm -r  $TMP/*
	sleep 1

dialog --backtitle "$BACKTITLE" --title "$RESETOPT" --infobox "$RESETOPTMSG" 5 50
	unset_options
	wait
	clear

	echo "Exit Status ""[ "$EXIT_STATUS" ]"
	echo "@PROGRAM@ Signal Catch Cleanup Complete"
	echo ''
	trap - SIGHUP SIGINT SIGQUIT SIGTERM SIGTSTP
	unset exit_status
	exit
fi
}

#--root check-------------------------------------------------------------------
root_chk() {
MSGCLIENT=""
TESTD=$(dpkg --get-selections dialog | awk '{print $1}')

if [[ $TESTD = "dialog" ]]
then
   MSGCLIENT="dialog"
  else
   MSGCLIENT="whiptail"
fi
clear

if [[ $EUID = "0" ]]
then
"$MSGCLIENT" --title "$RCTITLE" --backtitle "$BACKTITLE" --msgbox "$RCMSG" 7 70
clean_exit
exit
fi
clear

unset {TESTVAR,MSGCLIENT}
}


#--dialog check-----------------------------------------------------------------
dialog_chk() {
INSTALLED=$(dialog --version |awk '{print $1}')

if [[ $INSTALLED == Version: ]]; then
   MSGCLIENT="dialog"

elif [[ $INSTALLED != dialog ]]; then
   MSGCLIENT="whiptail"
   clear

"$MSGCLIENT" --title "$DITITLE" --backtitle "$BACKTITLE" --msgbox "$DIMSG" 7 70
   touch "$LOGS"/install_log
   sudo apt-get -qy install dialog | tee 2>>"$LOGS"/install_log
   wait
   dialog --create-rc ~/.dialogrc
   wait
   cp "$CONFIG"/debian.rc ~/.dialogrc
   wait
   clear

dialog --title "$DISUCTITLE" --backtitle "$BACKTITLE" --msgbox "$DISUCMSG" 7 40
sudo -k

fi
}


#--normal shutdown--------------------------------------------------------------
clean_exit() {
local EXIT_STATUS=$?

dialog --backtitle "$BACKTITLE" --title "$EXITWSDT" --infobox "$EXITWSDTMSG" 5 50
   sleep 1

dialog --backtitle "$BACKTITLE" --title "$CLEANTMP" --infobox "$CLEANTMPMSG" 5 50
   rm -r $TMP/*
   wait
   sleep 1

dialog --backtitle "$BACKTITLE" --title "$RESETOPT" --infobox "$RESETOPTMSG" 5 50
	unset_options
	wait
	sleep 1
	clear

   echo "Exit Status ""[ "$EXIT_STATUS" ]"
   echo "@PROGRAM@ Clean Exit Complete."
   echo ''
   trap - SIGHUP SIGINT SIGQUIT SIGTERM SIGTSTP
   unset EXIT_STATUS
exit
}


# app check --------------------------------------------------------------------
app_chk() {
# To be used at a later date
# system utils
    export LC_ALL=C
    _BASH=$(bash --version |awk 'FNR==1 {print $4}')
    _BINUTILS=$(ld --version | head -n1 | cut -d" " -f3-)
    _BISON=$(bison --version | head -n1)
    _BZ2=$( bzip2 --version 2>&1 < /dev/null |awk 'FNR==1 {print $7}')
    _COREUTILS=$(chown --version |awk 'FNR==1 {print $4}')
    _FIND=$(find --version |awk 'FNR {print $4}')
    _DIFF=$(diff --version |awk 'FNR==1 {print $4}')
    _PATCH=$(patch --version |awk 'FNR==1 {print $4}')
    _GREP=$(grep --version |awk 'FNR==1 {print $4}')
    _GZIP=$(grep --version |awk 'FNR==1 {print $4}')	
	_CMAKE=$(cmake --version)
	_QMAKE=$(qmake -v |awk 'FNR==1') 
	
# compiler related
	_GCC=$(gcc --version |awk 'FNR==1 {print $4}')
	_GPP=$(g++ --version |awk 'FNR==1 {print $4}')
	_CLANG=$(clang --version |awk 'FNR==1 {print $9}' |cut -c 1-3)
	_LDDN=$(ldd --version |awk 'FNR==1 {print $3}') 
	_LDDV=$(ldd --version |awk 'FNR==1 {print $5}')
 	_M4=$(m4 --version |awk 'FNR==1 {print $4}')
	_MAKE=$(make --version |awk 'FNR==1 {print $3}')
	_SED=$(sed --version |awk 'FNR==1 {print $4}')
	_TAR=$(tar --version |awk 'FNR==1 {print $4}')
	_XZ=$(xz --version |awk 'FNR==1 {print $4}')
}


#--dialog rc file---------------------------------------------------------------
make_dialogrc() {

if [ -f "$TMP"/.dialogrc ]; then rm -f "$TMP"/.dialogrc ; fi
touch "$TMP"/.dialogrc

(
cat <<'EOF_DIALOGRC'
aspect = 0
separate_widget = ""
tab_len = 0
visit_items = OFF
use_shadow = ON
use_colors = ON
screen_color = (CYAN,BLUE,ON)
shadow_color = (BLACK,BLACK,ON)
dialog_color = (BLACK,WHITE,OFF)
title_color = (BLUE,WHITE,ON)
border_color = (WHITE,WHITE,ON)
button_active_color = (WHITE,BLUE,ON)
button_inactive_color = (BLACK,WHITE,OFF)
button_key_active_color = (WHITE,BLUE,ON)
button_key_inactive_color = (RED,WHITE,OFF)
button_label_active_color = (YELLOW,BLUE,ON)
button_label_inactive_color = (BLACK,WHITE,ON)
inputbox_color = (BLACK,WHITE,OFF)
inputbox_border_color = (BLACK,WHITE,OFF)
searchbox_color = (BLACK,WHITE,OFF)
searchbox_title_color = (BLUE,WHITE,ON)
searchbox_border_color = (WHITE,WHITE,ON)
position_indicator_color = (BLUE,WHITE,ON)
menubox_color = (BLACK,WHITE,OFF)
menubox_border_color = (WHITE,WHITE,ON)
item_color = (BLACK,WHITE,OFF)
item_selected_color = (WHITE,BLUE,ON)
tag_color = (BLUE,WHITE,ON)
tag_selected_color = (YELLOW,BLUE,ON)
tag_key_color = (BLACK,WHITE,OFF)
tag_key_selected_color = (WHITE,BLUE,ON)
check_color = (BLACK,WHITE,OFF)
check_selected_color = (WHITE,BLUE,ON)
uarrow_color = (GREEN,WHITE,ON)
darrow_color = (GREEN,WHITE,ON)
itemhelp_color = (WHITE,BLACK,OFF)
form_active_text_color = (WHITE,BLUE,ON)
form_text_color = (WHITE,CYAN,ON)
form_item_readonly_color = (CYAN,WHITE,ON)
gauge_color = (BLUE,WHITE,ON)
EOF_DIALOGRC
) > "$TMP"/.dialogrc

# use preset dialog config file
if [ -f "$TMP"/.dialogrc ]; then
	export DIALOGRC="$TMP"/.dialogrc
fi

}

################################################################################
# Start Main Script
################################################################################

# set traps
trap sig_catch_cleanup SIGHUP SIGINT SIGQUIT SIGTERM SIGTSTP

# set shell options
set_options

# root check
root_chk

# dialog check
dialog_chk

# generate dialog rc
make_dialogrc

# menu help files
HELP="$DOCS"/main_menu_help.txt
WSJTXHELP="$DOCS"/wsjtx_menu_help.txt
WSJTXRCHELP="$DOCS"/wsjtxrc_menu_help.txt

# MAIN MANU --------------------------------------------------------------------
while [ 0 ]; do

dialog --ok-label SELECT --nocancel --backtitle "$BACKTITLE" --title \
"$MMTITLE" --menu "$MENUMSG" 15 60 20 --file "$TMP/MMenu.tmp" 2> "$TMP/selection"

MMSELECT=$(head -c 1 < $TMP/selection)

# WSJT Menu
if [[ $MMSELECT = "1" ]]; then
	jtsdk-wsjt.sh
	continue

# WSPR Menu --------------------------------------------------------------------
elif [[ $MMSELECT = "2" ]]; then
	jtsdk-wspr.sh
	continue

# WSJT-X 1.5.0 Menu (devel) ----------------------------------------------------
	elif [[ $MMSELECT = "3" ]]; then

dialog --ok-label SELECT --no-cancel --backtitle "$BACKTITLE" --title \
"$WSJTXTITLE" --menu "$MENUMSG" 12 60 18 --file "$TMP/WSJTXMenu.tmp" 2> "$TMP/buildselect"

	BUILDSELECT=$(head -c 1 < $TMP/buildselect)

	# Release
	if [[ $BUILDSELECT = "1" ]]; then
		jtsdk-wsjtx dev release
		continue

	# Debug
	elif [[ $BUILDSELECT = "2" ]]; then
		jtsdk-wsjtx dev debug
		continue

	# Package (On Hold)
#	elif [[ $BUILDSELECT = "3" ]]; then
#		jtsdk-wsjtx.sh wsjtx-1.5.0 Package
#		continue

	# Help
	elif [[ $BUILDSELECT = "H" ]]; then
dialog --exit-label DONE --backtitle "$BACKTITLE" --title "$WSJTXHELPTITLE" \
--textbox "$WSJTXHELP" 20 80

	# Back ( return to main menu )
	elif [[ $BUILDSELECT = "B" ]]; then
		rm -f "$TMP/buildselect"
		continue
	fi
# End WSJT-X 1.5.0 Menu---------------------------------------------------------


# WSJT-X 1.4.0 RC Menu ---------------------------------------------------------
	elif [[ $MMSELECT = "4" ]]; then

dialog --ok-label SELECT --no-cancel --backtitle "$BACKTITLE" --title \
"$WSJTXRCTITLE" --menu "$MENUMSG" 12 60 18 --file "$TMP/WSJTXMenu.tmp" 2> "$TMP/buildselect"

	BUILDSELECT=$(head -c 1 < $TMP/buildselect)

	# Release
	if [[ $BUILDSELECT = "1" ]]; then
		jtsdk-wsjtx rc release
		continue

	# Debug
	elif [[ $BUILDSELECT = "2" ]]; then
		jtsdk-wsjtx rc debug
		continue

	# Package (On Hold)
#	elif [[ $BUILDSELECT = "3" ]]; then
#		jtsdk-wsjtx.sh wsjtx-1.4.0 Package
#		continue

	# Help
	elif [[ $BUILDSELECT = "H" ]]; then
dialog --exit-label DONE --backtitle "$BACKTITLE" --title "$WSJTXRCHELPTITLE" \
--textbox "$WSJTXRCHELP" 20 80


	# Back ( return to main menu )
	elif [[ $BUILDSELECT = "B" ]]; then
		rm -f "$TMP/buildselect"
		continue
	fi
# End WSJT-X 1.4.0 Menu---------------------------------------------------------

# Build Hamlib3
   elif [[ $MMSELECT = "5" ]]; then
	jtsdk-hamlib3.sh
	continue

# Help File
   elif [[ $MMSELECT = "H" ]]; then
dialog --exit-label DONE --backtitle "$BACKTITLE" --title "$HTITLE" \
--textbox "$HELP" 20 80
	continue

# Exit @PROGRAM@
  elif [[ $MMSELECT = "E" ]]; then
   clean_exit
   fi
done


